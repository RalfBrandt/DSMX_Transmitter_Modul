FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C21x34 microcontroller devices.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0068) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0069) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0070) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0071) ; bytes on the stack which are otherwise required for the return address. If
                                        (0072) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0073) ; release, the C compiler automatically places an infinite loop at the end
                                        (0074) ; of main, rather than a return instruction.)
                                        (0075) ;
                                        (0076) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0077) 
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ; Interrupt Vector Table
                                        (0081) ;-----------------------------------------------------------------------------
                                        (0082) ;
                                        (0083) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0084) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0085) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0086) ; vector jump targets are modified automatically according to the user
                                        (0087) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0088) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0089) ; configuration files. If you need to hard code a vector, update the
                                        (0090) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0091) ; of this file.
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) 
                                        (0094)     AREA TOP (ROM, ABS, CON)
                                        (0095) 
                                        (0096)     org   0                        ;Reset Interrupt Vector
                                        (0097) IF	(TOOLCHAIN & HITECH)
                                        (0098) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0099) ELSE
0000: 80 67    JMP   0x0068             (0100)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0101) ENDIF
                                        (0102)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0103)     ;---------------------------------------------------
                                        (0104)     ; Insert your custom code below this banner
                                        (0105)     ;---------------------------------------------------
                                        (0106) 
                                        (0107)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0108)     halt                           ;Stop execution if power falls too low
                                        (0109) 
                                        (0110)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0111)     // call	void_handler
0008: 7E       RETI                     (0112)     reti
                                        (0113) 
                                        (0114)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0115)     // call	void_handler
000C: 7E       RETI                     (0116)     reti
                                        (0117) 
                                        (0118)     org   18h                      ;VC3 Interrupt Vector
                                        (0119)     // call	void_handler
0018: 7E       RETI                     (0120)     reti
                                        (0121) 
                                        (0122)     org   1Ch                      ;GPIO Interrupt Vector
001C: 7D 17 31 LJMP  PSoC_GPIO_ISR      (0123)     ljmp	PSoC_GPIO_ISR
001F: 7E       RETI                     (0124)     reti
                                        (0125) 
                                        (0126)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0127)     // call	void_handler
0020: 7E       RETI                     (0128)     reti
                                        (0129) 
                                        (0130)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 06 8E LJMP  _Counter16_1_ISR|CS_PIN_GetState|CS_PIN_Invert(0131)     ljmp	_Counter16_1_ISR
0027: 7E       RETI                     (0132)     reti
                                        (0133) 
                                        (0134)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 05 C4 LJMP  _TX8SW_1_CWrite|_SPIM_1_ISR|_TX8SW_1_Write|TX8SW_1_PutCRLF(0135)     ljmp	_SPIM_1_ISR
002B: 7E       RETI                     (0136)     reti
                                        (0137) 
                                        (0138)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 06 14 LJMP  _SleepTimer_1_bGetTimer|_SleepTimer_1_bGetTickCntr|_RX8_1_ISR|_SleepTimer_1_SyncWait|_SleepTimer_1_iGetTickCntr|_SleepTimer_1_SetTimer(0139)     ljmp	_RX8_1_ISR
002F: 7E       RETI                     (0140)     reti
                                        (0141) 
                                        (0142)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0143)     // call	void_handler
0060: 7E       RETI                     (0144)     reti
                                        (0145) 
                                        (0146)     org   64h                      ;Sleep Timer Interrupt Vector
0064: 7D 05 D3 LJMP  _SleepTimer_1_ISR  (0147)     ljmp	_SleepTimer_1_ISR
0067: 7E       RETI                     (0148)     reti
0068: 71 10    OR    F,0x10             
                                        (0149)     ;---------------------------------------------------
                                        (0150)     ; Insert your custom code above this banner
                                        (0151)     ;---------------------------------------------------
                                        (0152)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0153) 
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  Start of Execution.
                                        (0156) ;-----------------------------------------------------------------------------
                                        (0157) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0158) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0159) ;
                                        (0160) 
                                        (0161) IF	(TOOLCHAIN & HITECH)
                                        (0162)  	AREA PD_startup(CODE, REL, CON)
                                        (0163) ELSE
                                        (0164)     org 68h
                                        (0165) ENDIF
                                        (0166) __Start:
                                        (0167) 
                                        (0168)     ; initialize SMP values for voltage stabilization, if required,
                                        (0169)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0170)     ; least for now. 
                                        (0171)     ;
                                        (0172)     M8C_SetBank1
006A: 62 E3 80 MOV   REG[0xE3],0x80     (0173)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0174)     M8C_SetBank0
                                        (0175) 
                                        (0176) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0177) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0178)     M8C_EnableWatchDog
                                        (0179) ENDIF
                                        (0180) 
0072: 41 FE FB AND   REG[0xFE],0xFB     (0181)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0182) 
                                        (0183)     ;---------------------------
                                        (0184)     ; Set up the Temporary stack
                                        (0185)     ;---------------------------
                                        (0186)     ; A temporary stack is set up for the SSC instructions.
                                        (0187)     ; The real stack start will be assigned later.
                                        (0188)     ;
                                        (0189) _stack_start:          equ 80h
0075: 50 80    MOV   A,0x80             (0190)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0191)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
007B: 5D D0    MOV   A,REG[0xD0]        
007D: 08       PUSH  A                  
007E: 62 D0 00 MOV   REG[0xD0],0x0      
0081: 55 FA 01 MOV   [chidx+140],0x1    
0084: 4F       MOV   X,SP               
0085: 5B       MOV   A,X                
0086: 01 03    ADD   A,0x3              
0088: 53 F9    MOV   [chidx+139],A      
008A: 55 F8 3A MOV   [chidx+138],0x3A   
008D: 50 06    MOV   A,0x6              
008F: 00       SWI                      
0090: 71 10    OR    F,0x10             
0092: 51 F9    MOV   A,[chidx+139]      
0094: 60 E8    MOV   REG[0xE8],A        
0096: 51 F8    MOV   A,[chidx+138]      
0098: 60 EA    MOV   REG[0xEA],A        
009A: 70 EF    AND   F,0xEF             
009C: 18       POP   A                  
009D: 60 D0    MOV   REG[0xD0],A        
                                        (0192) 
                                        (0193)     ;------------------------
                                        (0194)     ; Set Power-related Trim 
                                        (0195)     ;------------------------
                                        (0196)     
                                        (0197) M8C_ClearWDTAndSleep
                                        (0198) 
                                        (0199) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0200)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0201)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0202)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V
                                        (0203)  ENDIF
                                        (0204) ENDIF ; 5.0 V Operation
                                        (0205) 
                                        (0206) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0207)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0208)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0209)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V
                                        (0210)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0211)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V
                                        (0212)  ENDIF
                                        (0213) ENDIF ; 3.3 Volt Operation
                                        (0214) 
                                        (0215) IF ( POWER_SETTING & POWER_SET_2V7_12MHZ)      ; *** 2.7 Volts / 12MHZ operation ***
                                        (0216)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0217)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_12MHZ, SSCTBL2_TRIM_BGR_2V
                                        (0218) ENDIF ; *** 2.7 Volts / 12MHZ operation ***
                                        (0219) 
                                        (0220) IF ( POWER_SETTING & POWER_SET_2V7_6MHZ)       ; *** 2.7 Volts /  6MHZ operation ***
                                        (0221)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0222)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_6MHZ,  SSCTBL2_TRIM_BGR_2V
                                        (0223) ENDIF ; *** 2.7 Volts /  6MHZ operation ***
                                        (0224) 
009F: 55 F8 00 MOV   [chidx+138],0x0    (0225)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
00A2: 55 F9 00 MOV   [chidx+139],0x0    (0226)     mov  [bSSC_KEYSP], 0
00A5: 71 10    OR    F,0x10             
                                        (0227) 
                                        (0228)     ;---------------------------------------
                                        (0229)     ; Initialize Crystal Oscillator and PLL
                                        (0230)     ;---------------------------------------
                                        (0231) IF ( POWER_SETTING & POWER_SET_2V7)       ; *** 2.7 Volts  ***
                                        (0232)     M8C_SetBank1
                                        (0233)     mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_3MHz)
                                        (0234)     M8C_SetBank0
                                        (0235)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0236) 
                                        (0237) ELSE 	 ;*** all other voltages OK for 12Mhz ***
                                        (0238)     M8C_SetBank1
00A7: 62 E0 02 MOV   REG[0xE0],0x2      (0239)     mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
00AA: 70 EF    AND   F,0xEF             
00AC: 62 E3 38 MOV   REG[0xE3],0x38     
00AF: 62 D1 01 MOV   REG[0xD1],0x1      
                                        (0240)     M8C_SetBank0
                                        (0241)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0242) 
                                        (0243) ENDIF
                                        (0244) 
                                        (0245) 	;-------------------------------------------------------
                                        (0246)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0247)     ;-------------------------------------------------------
                                        (0248) 
                                        (0249)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0250) 
                                        (0251) IF (SYSCLK_SOURCE)
                                        (0252)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0253) ENDIF
                                        (0254)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0255) 
                                        (0256) IF	(TOOLCHAIN & HITECH)
                                        (0257)     ;---------------------------------------------
                                        (0258)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0259)     ;---------------------------------------------
                                        (0260) 	global		__Lstackps
                                        (0261) 	mov     a,low __Lstackps
                                        (0262) 	swap    a,sp
                                        (0263) 
                                        (0264) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0265)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0266)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0267)     RAM_SETPAGE_CUR 0
                                        (0268)     RAM_SETPAGE_MVW 0
                                        (0269)     RAM_SETPAGE_MVR 0
                                        (0270)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0271)       or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0272)     ELSE
                                        (0273)       or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0274)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0275) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0276) ELSE
                                        (0277)     ;---------------------------------------------
                                        (0278)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0279)     ;---------------------------------------------
                                        (0280) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0281)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00B2: 50 00    MOV   A,0x0              (0282)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00B4: 4E       SWAP  SP,A               (0283)     swap  A, SP
00B5: 62 D3 01 MOV   REG[0xD3],0x1      
00B8: 62 D0 00 MOV   REG[0xD0],0x0      
00BB: 62 D5 00 MOV   REG[0xD5],0x0      
00BE: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0284)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0285)     RAM_SETPAGE_CUR 0
                                        (0286)     RAM_SETPAGE_MVW 0
                                        (0287)     RAM_SETPAGE_MVR 0
                                        (0288) 
                                        (0289)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00C1: 71 C0    OR    F,0xC0             (0290)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0291)   ELSE
                                        (0292)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0293)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0294) ELSE
                                        (0295)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0296)     swap  SP, A
                                        (0297) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0298) ENDIF ;	TOOLCHAIN
                                        (0299) 
                                        (0300)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0301)     ;---------------------------------------------------
                                        (0302)     ; Insert your custom code below this banner
                                        (0303)     ;---------------------------------------------------
                                        (0304) 
                                        (0305)     ;---------------------------------------------------
                                        (0306)     ; Insert your custom code above this banner
                                        (0307)     ;---------------------------------------------------
                                        (0308)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0309) 
                                        (0310)     ;-------------------------
                                        (0311)     ; Load Base Configuration
                                        (0312)     ;-------------------------
                                        (0313)     ; Load global parameter settings and load the user modules in the
                                        (0314)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0315)     ; to minimize start up time; (2) We may still need to play with the
                                        (0316)     ; Sleep Timer.
                                        (0317)     ;
00C3: 7C 04 50 LCALL 0x0450             (0318)     lcall LoadConfigInit
                                        (0319) 
                                        (0320)     ;-----------------------------------
                                        (0321)     ; Initialize C Run-Time Environment
                                        (0322)     ;-----------------------------------
                                        (0323) IF ( C_LANGUAGE_SUPPORT )
                                        (0324) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0325)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0326)     mov  [__r0],<__bss_start
                                        (0327) BssLoop:
                                        (0328)     cmp  [__r0],<__bss_end
                                        (0329)     jz   BssDone
                                        (0330)     mvi  [__r0],A
                                        (0331)     jmp  BssLoop
                                        (0332) BssDone:
                                        (0333)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0334)     mov  X,<__idata_start
                                        (0335)     mov  [__r0],<__data_start
                                        (0336) IDataLoop:
                                        (0337)     cmp  [__r0],<__data_end
                                        (0338)     jz   C_RTE_Done
                                        (0339)     push A
                                        (0340)     romx
                                        (0341)     mvi  [__r0],A
                                        (0342)     pop  A
                                        (0343)     inc  X
                                        (0344)     adc  A,0
                                        (0345)     jmp  IDataLoop
                                        (0346) 
                                        (0347) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0348) 
                                        (0349) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00C6: 62 D0 00 MOV   REG[0xD0],0x0      (0350)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0351)                                        ; to use the Virtual Register page.
                                        (0352) 
                                        (0353)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0354)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0355)     ; text segment and may have been relocated by the Code Compressor.
                                        (0356)     ;
00C9: 50 03    MOV   A,0x3              (0357)     mov   A, >__pXIData                ; Get the address of the flash
00CB: 57 C3    MOV   X,0xC3             (0358)     mov   X, <__pXIData                ;   pointer to the xidata area.
00CD: 08       PUSH  A                  (0359)     push  A
00CE: 28       ROMX                     (0360)     romx                               ; get the MSB of xidata's address
00CF: 53 3F    MOV   [__r0],A           (0361)     mov   [__r0], A
00D1: 18       POP   A                  (0362)     pop   A
00D2: 75       INC   X                  (0363)     inc   X
00D3: 09 00    ADC   A,0x0              (0364)     adc   A, 0
00D5: 28       ROMX                     (0365)     romx                               ; get the LSB of xidata's address
00D6: 4B       SWAP  A,X                (0366)     swap  A, X
00D7: 51 3F    MOV   A,[__r0]           (0367)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0368)                                        ;   XIData structure list in flash
00D9: 80 04    JMP   0x00DE             (0369)     jmp   .AccessStruct
                                        (0370) 
                                        (0371)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0372)     ; values of C variables. Each structure contains 3 member elements.
                                        (0373)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0374)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0375)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0376)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0377)     ; value in the second member element, an unsigned byte:
                                        (0378)     ; (1) If the value of the second element is non-zero, it represents
                                        (0379)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0380)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0381)     ; the bytes are copied to the block of RAM.
                                        (0382)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0383)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0384)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0385) 
                                        (0386) .AccessNextStructLoop:
00DB: 75       INC   X                  (0387)     inc   X                            ; pXIData++
00DC: 09 00    ADC   A,0x0              (0388)     adc   A, 0
00DE: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0389) .AccessStruct:                         ; Entry point for first block
                                        (0390)     ;
                                        (0391)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0392)     ;
                                        (0393)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00E1: 08       PUSH  A                  (0394)     push  A
00E2: 28       ROMX                     (0395)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00E3: 60 D5    MOV   REG[0xD5],A        (0396)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00E5: 74       INC   A                  (0397)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00E6: A0 4B    JZ    0x0132             (0398)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00E8: 18       POP   A                  (0399)     pop   A                            ; restore pXIData to [A,X]
00E9: 75       INC   X                  (0400)     inc   X                            ; pXIData++
00EA: 09 00    ADC   A,0x0              (0401)     adc   A, 0
00EC: 08       PUSH  A                  (0402)     push  A
00ED: 28       ROMX                     (0403)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00EE: 53 3F    MOV   [__r0],A           (0404)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00F0: 18       POP   A                  (0405)     pop   A                            ; restore pXIData to [A,X]
00F1: 75       INC   X                  (0406)     inc   X                            ; pXIData++ (point to size)
00F2: 09 00    ADC   A,0x0              (0407)     adc   A, 0
00F4: 08       PUSH  A                  (0408)     push  A
00F5: 28       ROMX                     (0409)     romx                               ; Get the size (CPU.A <- *pXIData)
00F6: A0 1C    JZ    0x0113             (0410)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00F8: 53 3E    MOV   [__r1],A           (0411)     mov   [__r1], A                    ;             else downcount in __r1
00FA: 18       POP   A                  (0412)     pop   A                            ; restore pXIData to [A,X]
                                        (0413) 
                                        (0414) .CopyNextByteLoop:
                                        (0415)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0416)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0417)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0418)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0419)     ;
00FB: 75       INC   X                  (0420)     inc   X                            ; pXIData++ (point to next data byte)
00FC: 09 00    ADC   A,0x0              (0421)     adc   A, 0
00FE: 08       PUSH  A                  (0422)     push  A
00FF: 28       ROMX                     (0423)     romx                               ; Get the data value (CPU.A <- *pXIData)
0100: 3F 3F    MVI   [__r0],A           (0424)     mvi   [__r0], A                    ; Transfer the data to RAM
0102: 47 3F FF TST   [__r0],0xFF        (0425)     tst   [__r0], 0xff                 ; Check for page crossing
0105: B0 06    JNZ   0x010C             (0426)     jnz   .CopyLoopTail                ;   No crossing, keep going
0107: 5D D5    MOV   A,REG[0xD5]        (0427)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0109: 74       INC   A                  (0428)     inc   A
010A: 60 D5    MOV   REG[0xD5],A        (0429)     mov   reg[ MVW_PP], A
                                        (0430) .CopyLoopTail:
010C: 18       POP   A                  (0431)     pop   A                            ; restore pXIData to [A,X]
010D: 7A 3E    DEC   [__r1]             (0432)     dec   [__r1]                       ; End of this array in flash?
010F: BF EB    JNZ   0x00FB             (0433)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0111: 8F C9    JMP   0x00DB             (0434)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0435) 
                                        (0436) .ClearRAMBlockToZero:
0113: 18       POP   A                  (0437)     pop   A                            ; restore pXIData to [A,X]
0114: 75       INC   X                  (0438)     inc   X                            ; pXIData++ (point to next data byte)
0115: 09 00    ADC   A,0x0              (0439)     adc   A, 0
0117: 08       PUSH  A                  (0440)     push  A
0118: 28       ROMX                     (0441)     romx                               ; Get the run length (CPU.A <- *pXIData)
0119: 53 3E    MOV   [__r1],A           (0442)     mov   [__r1], A                    ; Initialize downcounter
011B: 50 00    MOV   A,0x0              (0443)     mov   A, 0                         ; Initialize source data
                                        (0444) 
                                        (0445) .ClearRAMBlockLoop:
                                        (0446)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0447)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0448)     ;
011D: 3F 3F    MVI   [__r0],A           (0449)     mvi   [__r0], A                    ; Clear a byte
011F: 47 3F FF TST   [__r0],0xFF        (0450)     tst   [__r0], 0xff                 ; Check for page crossing
0122: B0 08    JNZ   0x012B             (0451)     jnz   .ClearLoopTail               ;   No crossing, keep going
0124: 5D D5    MOV   A,REG[0xD5]        (0452)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0126: 74       INC   A                  (0453)     inc   A
0127: 60 D5    MOV   REG[0xD5],A        (0454)     mov   reg[ MVW_PP], A
0129: 50 00    MOV   A,0x0              (0455)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0456) .ClearLoopTail:
012B: 7A 3E    DEC   [__r1]             (0457)     dec   [__r1]                       ; Was this the last byte?
012D: BF EF    JNZ   0x011D             (0458)     jnz   .ClearRAMBlockLoop           ;   No,  continue
012F: 18       POP   A                  (0459)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0130: 8F AA    JMP   0x00DB             (0460)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0461) 
                                        (0462) .C_RTE_WrapUp:
0132: 18       POP   A                  (0463)     pop   A                            ; balance stack
0133: 71 10    OR    F,0x10             
                                        (0464) 
                                        (0465) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0466) 
                                        (0467) C_RTE_Done:
                                        (0468) 
                                        (0469) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0470) 
                                        (0471)     ;-------------------------------
                                        (0472)     ; Voltage Stabilization for SMP
                                        (0473)     ;-------------------------------
                                        (0474) 
                                        (0475) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0476) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0477)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0478)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0479)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0480)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0481)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0482)     M8C_SetBank1
                                        (0483)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0484)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0485)     M8C_SetBank0
                                        (0486)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0487)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0488) .WaitFor2ms:
                                        (0489)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0490)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0491) ENDIF ; SMP is operational
                                        (0492) ENDIF ; 5.0V Operation
                                        (0493) 
                                        (0494)     ;-------------------------------
                                        (0495)     ; Set Power-On Reset (POR) Level
                                        (0496)     ;-------------------------------
                                        (0497)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0498)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0499)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0500)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0501)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0502) 
                                        (0503)     M8C_SetBank1
                                        (0504) 
                                        (0505) IF (POWER_SETTING & POWER_SET_2V7)             ; 2.7V Operation?
                                        (0506)                                                ;  Yes, lowest trip already set
                                        (0507) ELSE                                           ;   No, must adjust POR...
                                        (0508) IF (POWER_SETTING & POWER_SET_3V3)             ; 3.3V Operation?
0135: 43 E3 10 OR    REG[0xE3],0x10     (0509)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, change to midpoint trip
0138: 70 EF    AND   F,0xEF             
                                        (0510) ELSE
                                        (0511) IF (POWER_SETTING & POWER_SET_5V0)             ; 5.0V Operation?
                                        (0512)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)       ; and Slow Mode?
                                        (0513)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, set to midpoint trip
                                        (0514)  ELSE                                          ;    No, fast mode
                                        (0515)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )    ;      As fast as 24MHz?
                                        (0516)     or   reg[VLT_CR], VLT_CR_POR_MID           ;         No, change to midpoint trip
                                        (0517)   ELSE ; 24HMz                                 ;
                                        (0518)     or    reg[VLT_CR], VLT_CR_POR_HIGH         ;        Yes, switch to	highest setting
                                        (0519)   ENDIF ; 24MHz
                                        (0520)  ENDIF ; Slow Mode
                                        (0521) ENDIF ; 5.0V Operation
                                        (0522) ENDIF ; 3.3V Operation
                                        (0523) ENDIF ; 2.7V Operation
                                        (0524) 
                                        (0525)     M8C_SetBank0
                                        (0526) 
                                        (0527)     ;----------------------------
                                        (0528)     ; Wrap up and invoke "main"
                                        (0529)     ;----------------------------
                                        (0530) 
                                        (0531)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0532)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0533)     ;
013A: 62 E0 00 MOV   REG[0xE0],0x0      (0534)     mov  reg[INT_MSK0],0
013D: 71 10    OR    F,0x10             
                                        (0535) 
                                        (0536)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0537)     ;
                                        (0538)     M8C_SetBank1
013F: 62 E0 02 MOV   REG[0xE0],0x2      (0539)     mov  reg[OSC_CR0],(SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0142: 70 EF    AND   F,0xEF             
                                        (0540)     M8C_SetBank0
                                        (0541) 
                                        (0542)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0543)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0544)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0545)     ;
0144: 62 E2 00 MOV   REG[0xE2],0x0      (0546)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0547)                                    ; have been set during the boot process.
                                        (0548) IF	(TOOLCHAIN & HITECH)
                                        (0549) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0550) ELSE
                                        (0551) IF ENABLE_LJMP_TO_MAIN
                                        (0552)     ljmp  _main                    ; goto main (no return)
                                        (0553) ELSE
0147: 7C 12 E3 LCALL _main              (0554)     lcall _main                    ; call main
                                        (0555) .Exit:
014A: 8F FF    JMP   0x014A             (0556)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0557) ENDIF
                                        (0558) ENDIF ; TOOLCHAIN
                                        (0559) 
                                        (0560)     ;---------------------------------
                                        (0561)     ; Library Access to Global Parms
                                        (0562)     ;---------------------------------
                                        (0563)     ;
                                        (0564)  bGetPowerSetting:
                                        (0565) _bGetPowerSetting:
                                        (0566)     ; Returns value of POWER_SETTING in the A register.
                                        (0567)     ; No inputs. No Side Effects.
                                        (0568)     ;
                                        (0569) IF (POWER_SETTING & POWER_SET_2V7)
                                        (0570)     mov   A, POWER_SETTING | POWER_SET_SLOW_IMO
                                        (0571) ELSE
014C: 50 08    MOV   A,0x8              (0572)     mov   A, POWER_SETTING          ; Supply voltage and internal main osc
                                        (0573) ENDIF
014E: 7F       RET                      (0574)     ret
                                        (0575) 
                                        (0576) IF	(TOOLCHAIN & HITECH)
                                        (0577) ELSE
                                        (0578)     ;---------------------------------
                                        (0579)     ; Order Critical RAM & ROM AREAs
                                        (0580)     ;---------------------------------
                                        (0581)     ;  'TOP' is all that has been defined so far...
                                        (0582) 
                                        (0583)     ;  ROM AREAs for C CONST, static & global items
                                        (0584)     ;
                                        (0585)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0586)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0587) __idata_start:
                                        (0588) 
                                        (0589)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0590) __func_lit_start:
                                        (0591) 
                                        (0592) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0593)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0594)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0595)     ; relocated by the code compressor, but the text area may shrink and
                                        (0596)     ; that moves xidata around.
                                        (0597)     ;
                                        (0598) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0599) ENDIF
                                        (0600) 
                                        (0601)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0602)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0603) 
                                        (0604)     ; CODE segment for general use
                                        (0605)     ;
                                        (0606)     AREA text (ROM, REL, CON)
                                        (0607) __text_start:
                                        (0608) 
                                        (0609)     ; RAM area usage
                                        (0610)     ;
                                        (0611)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0612) __data_start:
                                        (0613) 
                                        (0614)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0615)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0616)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0617) __bss_start:
                                        (0618) ENDIF ; TOOLCHAIN
                                        (0619) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
03CB: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_dsm_sateilte_Bank1
                                        (0019) export LoadConfigTBL_dsm_sateilte_Bank0
                                        (0020) export LoadConfigTBL_dsm_sateilte_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_dsm_sateilte_Bank0:
                                        (0023) ;  Instance name CS_PIN, User Module LED
                                        (0024) ;  Instance name Counter16_1, User Module Counter16
                                        (0025) ;       Instance name Counter16_1, Block Name CNTR16_LSB(DBB00)
                                        (0026) 	db		23h, 00h		;Counter16_1_CONTROL_LSB_REG(DBB00CR0)
                                        (0027) 	db		21h, ffh		;Counter16_1_PERIOD_LSB_REG(DBB00DR1)
                                        (0028) 	db		22h, 00h		;Counter16_1_COMPARE_LSB_REG(DBB00DR2)
                                        (0029) ;       Instance name Counter16_1, Block Name CNTR16_MSB(DBB01)
                                        (0030) 	db		27h, 00h		;Counter16_1_CONTROL_MSB_REG(DBB01CR0)
                                        (0031) 	db		25h, ffh		;Counter16_1_PERIOD_MSB_REG(DBB01DR1)
                                        (0032) 	db		26h, 00h		;Counter16_1_COMPARE_MSB_REG(DBB01DR2)
                                        (0033) ;  Instance name LED_1, User Module LED
                                        (0034) ;  Instance name RST, User Module LED
                                        (0035) ;  Instance name RX8_1, User Module RX8
                                        (0036) ;       Instance name RX8_1, Block Name RX8(DCB03)
                                        (0037) 	db		2fh, 00h		;RX8_1_CONTROL_REG  (DCB03CR0)
                                        (0038) 	db		2dh, 00h		;RX8_1_(DCB03DR1)
                                        (0039) 	db		2eh, 00h		;RX8_1_RX_BUFFER_REG(DCB03DR2)
                                        (0040) ;  Instance name SPIM_1, User Module SPIM
                                        (0041) ;       Instance name SPIM_1, Block Name SPIM(DCB02)
                                        (0042) 	db		2bh, 00h		;SPIM_1_CONTROL_REG  (DCB02CR0)
                                        (0043) 	db		29h, 00h		;SPIM_1_TX_BUFFER_REG(DCB02DR1)
                                        (0044) 	db		2ah, 00h		;SPIM_1_RX_BUFFER_REG(DCB02DR2)
                                        (0045) ;  Instance name SleepTimer_1, User Module SleepTimer
                                        (0046) ;  Instance name TX8SW_1, User Module TX8SW
                                        (0047) ;  Global Register values Bank 0
                                        (0048) 	db		60h, 09h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0049) 	db		64h, 00h		; AnalogComparatorControl0 register (CMP_CR0)
                                        (0050) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0051) 	db		61h, 00h		; AnalogMuxBusConfig register (AMUXCFG)
                                        (0052) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0053) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0054) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0055) 	db		62h, 00h		; PWM_Control register (PWM_CR)
                                        (0056) 	db		b0h, 38h		; Row_0_InputMux register (RDI0RI)
                                        (0057) 	db		b1h, 01h		; Row_0_InputSync register (RDI0SYN)
                                        (0058) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0059) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0060) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0061) 	db		b5h, 22h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0062) 	db		b6h, 10h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0063) 	db		ffh
                                        (0064) LoadConfigTBL_dsm_sateilte_Bank1:
                                        (0065) ;  Instance name CS_PIN, User Module LED
                                        (0066) ;  Instance name Counter16_1, User Module Counter16
                                        (0067) ;       Instance name Counter16_1, Block Name CNTR16_LSB(DBB00)
                                        (0068) 	db		20h, 01h		;Counter16_1_FUNC_LSB_REG(DBB00FN)
                                        (0069) 	db		21h, 06h		;Counter16_1_INPUT_LSB_REG(DBB00IN)
                                        (0070) 	db		22h, 40h		;Counter16_1_OUTPUT_LSB_REG(DBB00OU)
                                        (0071) ;       Instance name Counter16_1, Block Name CNTR16_MSB(DBB01)
                                        (0072) 	db		24h, 21h		;Counter16_1_FUNC_MSB_REG(DBB01FN)
                                        (0073) 	db		25h, 36h		;Counter16_1_INPUT_MSB_REG(DBB01IN)
                                        (0074) 	db		26h, 44h		;Counter16_1_OUTPUT_MSB_REG(DBB01OU)
                                        (0075) ;  Instance name LED_1, User Module LED
                                        (0076) ;  Instance name RST, User Module LED
                                        (0077) ;  Instance name RX8_1, User Module RX8
                                        (0078) ;       Instance name RX8_1, Block Name RX8(DCB03)
                                        (0079) 	db		2ch, 05h		;RX8_1_FUNC_REG     (DCB03FN)
                                        (0080) 	db		2dh, e1h		;RX8_1_INPUT_REG    (DCB03IN)
                                        (0081) 	db		2eh, 40h		;RX8_1_OUTPUT_REG   (DCB03OU)
                                        (0082) ;  Instance name SPIM_1, User Module SPIM
                                        (0083) ;       Instance name SPIM_1, Block Name SPIM(DCB02)
                                        (0084) 	db		28h, 06h		;SPIM_1_FUNCTION_REG (DCB02FN)
                                        (0085) 	db		29h, c5h		;SPIM_1_INPUT_REG    (DCB02IN)
                                        (0086) 	db		2ah, 7dh		;SPIM_1_OUTPUT_REG   (DCB02OU)
                                        (0087) ;  Instance name SleepTimer_1, User Module SleepTimer
                                        (0088) ;  Instance name TX8SW_1, User Module TX8SW
                                        (0089) ;  Global Register values Bank 1
                                        (0090) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0091) 	db		6bh, 04h		; AnalogColumnClockDivide register (CLK_CR3)
                                        (0092) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0093) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0094) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0095) 	db		64h, 00h		; ComparatorGlobalOutEn register (CMP_GO_EN)
                                        (0096) 	db		fdh, 00h		; DAC_Control register (DAC_CR)
                                        (0097) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0098) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0099) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0100) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0101) 	db		e1h, b1h		; OscillatorControl_1 register (OSC_CR1)
                                        (0102) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0103) 	db		dfh, 19h		; OscillatorControl_3 register (OSC_CR3)
                                        (0104) 	db		deh, 00h		; OscillatorControl_4 register (OSC_CR4)
                                        (0105) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0106) 	db		d8h, 00h		; Port_0_MUXBusCtrl register (MUX_CR0)
                                        (0107) 	db		d9h, 00h		; Port_1_MUXBusCtrl register (MUX_CR1)
                                        (0108) 	db		dah, 00h		; Port_2_MUXBusCtrl register (MUX_CR2)
                                        (0109) 	db		dbh, 00h		; Port_3_MUXBusCtrl register (MUX_CR3)
                                        (0110) 	db		ffh
                                        (0111) AREA psoc_config(rom, rel)
                                        (0112) LoadConfigTBL_dsm_sateilte_Ordered:
                                        (0113) ;  Ordered Global Register values
                                        (0114) 	M8C_SetBank0
03CD: 62 00 00 MOV   REG[0x0],0x0       (0115) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
03D0: 71 10    OR    F,0x10             
                                        (0116) 	M8C_SetBank1
03D2: 62 00 B8 MOV   REG[0x0],0xB8      (0117) 	mov	reg[00h], b8h		; Port_0_DriveMode_0 register (PRT0DM0)
03D5: 62 01 47 MOV   REG[0x1],0x47      (0118) 	mov	reg[01h], 47h		; Port_0_DriveMode_1 register (PRT0DM1)
03D8: 70 EF    AND   F,0xEF             
                                        (0119) 	M8C_SetBank0
03DA: 62 03 06 MOV   REG[0x3],0x6       (0120) 	mov	reg[03h], 06h		; Port_0_DriveMode_2 register (PRT0DM2)
03DD: 62 02 29 MOV   REG[0x2],0x29      (0121) 	mov	reg[02h], 29h		; Port_0_GlobalSelect register (PRT0GS)
03E0: 71 10    OR    F,0x10             
                                        (0122) 	M8C_SetBank1
03E2: 62 02 00 MOV   REG[0x2],0x0       (0123) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
03E5: 62 03 40 MOV   REG[0x3],0x40      (0124) 	mov	reg[03h], 40h		; Port_0_IntCtrl_1 register (PRT0IC1)
03E8: 70 EF    AND   F,0xEF             
                                        (0125) 	M8C_SetBank0
03EA: 62 01 40 MOV   REG[0x1],0x40      (0126) 	mov	reg[01h], 40h		; Port_0_IntEn register (PRT0IE)
03ED: 62 04 00 MOV   REG[0x4],0x0       (0127) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
03F0: 71 10    OR    F,0x10             
                                        (0128) 	M8C_SetBank1
03F2: 62 04 2D MOV   REG[0x4],0x2D      (0129) 	mov	reg[04h], 2dh		; Port_1_DriveMode_0 register (PRT1DM0)
03F5: 62 05 D2 MOV   REG[0x5],0xD2      (0130) 	mov	reg[05h], d2h		; Port_1_DriveMode_1 register (PRT1DM1)
03F8: 70 EF    AND   F,0xEF             
                                        (0131) 	M8C_SetBank0
03FA: 62 07 82 MOV   REG[0x7],0x82      (0132) 	mov	reg[07h], 82h		; Port_1_DriveMode_2 register (PRT1DM2)
03FD: 62 06 40 MOV   REG[0x6],0x40      (0133) 	mov	reg[06h], 40h		; Port_1_GlobalSelect register (PRT1GS)
0400: 71 10    OR    F,0x10             
                                        (0134) 	M8C_SetBank1
0402: 62 06 00 MOV   REG[0x6],0x0       (0135) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0405: 62 07 00 MOV   REG[0x7],0x0       (0136) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0408: 70 EF    AND   F,0xEF             
                                        (0137) 	M8C_SetBank0
040A: 62 05 00 MOV   REG[0x5],0x0       (0138) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
040D: 62 08 00 MOV   REG[0x8],0x0       (0139) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0410: 71 10    OR    F,0x10             
                                        (0140) 	M8C_SetBank1
0412: 62 08 10 MOV   REG[0x8],0x10      (0141) 	mov	reg[08h], 10h		; Port_2_DriveMode_0 register (PRT2DM0)
0415: 62 09 EF MOV   REG[0x9],0xEF      (0142) 	mov	reg[09h], efh		; Port_2_DriveMode_1 register (PRT2DM1)
0418: 70 EF    AND   F,0xEF             
                                        (0143) 	M8C_SetBank0
041A: 62 0B EF MOV   REG[0xB],0xEF      (0144) 	mov	reg[0bh], efh		; Port_2_DriveMode_2 register (PRT2DM2)
041D: 62 0A 10 MOV   REG[0xA],0x10      (0145) 	mov	reg[0ah], 10h		; Port_2_GlobalSelect register (PRT2GS)
0420: 71 10    OR    F,0x10             
                                        (0146) 	M8C_SetBank1
0422: 62 0A 00 MOV   REG[0xA],0x0       (0147) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0425: 62 0B 00 MOV   REG[0xB],0x0       (0148) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0428: 70 EF    AND   F,0xEF             
                                        (0149) 	M8C_SetBank0
042A: 62 09 00 MOV   REG[0x9],0x0       (0150) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
042D: 62 0C 00 MOV   REG[0xC],0x0       (0151) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0430: 71 10    OR    F,0x10             
                                        (0152) 	M8C_SetBank1
0432: 62 0C 01 MOV   REG[0xC],0x1       (0153) 	mov	reg[0ch], 01h		; Port_3_DriveMode_0 register (PRT3DM0)
0435: 62 0D 0E MOV   REG[0xD],0xE       (0154) 	mov	reg[0dh], 0eh		; Port_3_DriveMode_1 register (PRT3DM1)
0438: 70 EF    AND   F,0xEF             
                                        (0155) 	M8C_SetBank0
043A: 62 0F 0E MOV   REG[0xF],0xE       (0156) 	mov	reg[0fh], 0eh		; Port_3_DriveMode_2 register (PRT3DM2)
043D: 62 0E 00 MOV   REG[0xE],0x0       (0157) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0440: 71 10    OR    F,0x10             
                                        (0158) 	M8C_SetBank1
0442: 62 0E 00 MOV   REG[0xE],0x0       (0159) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0445: 62 0F 00 MOV   REG[0xF],0x0       (0160) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0448: 70 EF    AND   F,0xEF             
                                        (0161) 	M8C_SetBank0
044A: 62 0D 00 MOV   REG[0xD],0x0       (0162) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
044D: 70 EF    AND   F,0xEF             
                                        (0163) 	M8C_SetBank0
044F: 7F       RET                      (0164) 	ret
                                        (0165) 
                                        (0166) 
                                        (0167) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_dsm_sateilte
                                        (0026) export _LoadConfig_dsm_sateilte
                                        (0027) export Port_0_Data_SHADE
                                        (0028) export _Port_0_Data_SHADE
                                        (0029) export Port_1_Data_SHADE
                                        (0030) export _Port_1_Data_SHADE
                                        (0031) export Port_3_Data_SHADE
                                        (0032) export _Port_3_Data_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
0450: 55 07 00 MOV   [ser_c+7],0x0      (0065) 	mov		[Port_0_Data_SHADE], 0h
0453: 55 08 00 MOV   [ser_c+8],0x0      (0066) 	mov		[Port_1_Data_SHADE], 0h
0456: 55 09 00 MOV   [ser_c+9],0x0      (0067) 	mov		[Port_3_Data_SHADE], 0h
                                        (0068) 
0459: 7C 04 60 LCALL 0x0460             (0069) 	lcall	LoadConfig_dsm_sateilte
045C: 7C 03 CB LCALL 0x03CB             (0070) 	lcall	LoadConfigTBL_dsm_sateilte_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
045F: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration dsm_sateilte
                                        (0078) ;
                                        (0079) ;    Load configuration registers for dsm_sateilte.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_dsm_sateilte:
                                        (0096)  LoadConfig_dsm_sateilte:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
0460: 10       PUSH  X                  (0099) 	push	x
0461: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
0463: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
0465: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
0466: 50 03    MOV   A,0x3              (0104)     mov     A, >LoadConfigTBL_dsm_sateilte_Bank0
0468: 57 4B    MOV   X,0x4B             (0105)     mov     X, <LoadConfigTBL_dsm_sateilte_Bank0
046A: 7C 04 7B LCALL 0x047B             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
046D: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
046F: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
0470: 50 03    MOV   A,0x3              (0111)     mov     A, >LoadConfigTBL_dsm_sateilte_Bank1
0472: 57 82    MOV   X,0x82             (0112)     mov     X, <LoadConfigTBL_dsm_sateilte_Bank1
0474: 7C 04 7B LCALL 0x047B             (0113)     lcall   LoadConfig              ; Load the bank 1 values
0477: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
0479: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
047A: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
047B: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
047D: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
047E: 08       PUSH  A                  (0143)     push    A
047F: 4F       MOV   X,SP               (0144)     mov     X, SP
0480: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
0483: D0 04    JNC   0x0488             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0485: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
0488: 18       POP   A                  (0149)     pop     A
0489: 20       POP   X                  (0150)     pop     X
048A: 70 EF    AND   F,0xEF             
048C: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
048F: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
0490: 08       PUSH  A                  (0156)     push    A
0491: 28       ROMX                     (0157)     romx                            ; Load register address from table
0492: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
0494: A0 1F    JZ    0x04B4             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
0496: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
0497: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
049A: A0 03    JZ    0x049E             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
049C: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
049E: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
04A0: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
04A1: 20       POP   X                  (0167)     pop     X
04A2: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
04A3: 09 00    ADC   A,0x0              (0169)     adc     A, 0
04A5: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
04A6: 08       PUSH  A                  (0171)     push    A
04A7: 28       ROMX                     (0172)     romx                            ; load config data from the table
04A8: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
04A9: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
04AB: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
04AD: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
04AE: 20       POP   X                  (0177)     pop     X
04AF: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
04B0: 09 00    ADC   A,0x0              (0179)     adc     A, 0
04B2: 8F D7    JMP   0x048A             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
04B4: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
04B6: 70 3F    AND   F,0x3F             
04B8: 71 C0    OR    F,0xC0             
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
04BA: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_0_Data_SHADE:
                                        (0192) Port_0_Data_SHADE:	BLK	1
                                        (0193) _Port_1_Data_SHADE:
                                        (0194) Port_1_Data_SHADE:	BLK	1
                                        (0195) _Port_3_Data_SHADE:
                                        (0196) Port_3_Data_SHADE:	BLK	1
                                        (0197) 
FILE: lib\tx8sw_1.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;  FILENAME: TX8SW_1.asm
04CB: 62 D0 00 MOV   REG[0xD0],0x0      (0003) ;;
04CE: 2E 08 02 OR    [ser_c+8],0x2      
04D1: 51 08    MOV   A,[ser_c+8]        
04D3: 60 04    MOV   REG[0x4],A         (0004) ;;  Version: 1.30, Updated on 2015/3/4 at 22:27:54
04D5: 41 07 FD AND   REG[0x7],0xFD      (0005) ;;  Generated by PSoC Designer 5.4.3191
04D8: 71 10    OR    F,0x10             
                                        (0006) ;;
04DA: 43 04 02 OR    REG[0x4],0x2       (0007) ;;  DESCRIPTION: Routines for Firmware Serial Transmitter
04DD: 41 05 FD AND   REG[0x5],0xFD      (0008) ;;
04E0: 70 EF    AND   F,0xEF             
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "TX8SW_1.inc"
                                        (0017) 
                                        (0018) export   TX8SW_1_Start
                                        (0019) export  _TX8SW_1_Start
                                        (0020) export   TX8SW_1_Stop
                                        (0021) export  _TX8SW_1_Stop
                                        (0022) export   TX8SW_1_SendData
                                        (0023) export  _TX8SW_1_SendData
                                        (0024) 
                                        (0025) ;-----------------------------------------------
                                        (0026) ;  High Level TX functions
                                        (0027) ;-----------------------------------------------
                                        (0028) export  TX8SW_1_PutSHexByte
                                        (0029) export _TX8SW_1_PutSHexByte
                                        (0030) export  TX8SW_1_PutSHexInt
                                        (0031) export _TX8SW_1_PutSHexInt
                                        (0032) export  TX8SW_1_PutChar
                                        (0033) export _TX8SW_1_PutChar
                                        (0034) export  TX8SW_1_CPutString
                                        (0035) export _TX8SW_1_CPutString
                                        (0036) export  TX8SW_1_PutString
                                        (0037) export _TX8SW_1_PutString
                                        (0038) export  TX8SW_1_Write
                                        (0039) export _TX8SW_1_Write
                                        (0040) export  TX8SW_1_CWrite
                                        (0041) export _TX8SW_1_CWrite
                                        (0042) export  TX8SW_1_PutCRLF
                                        (0043) export _TX8SW_1_PutCRLF
                                        (0044) 
                                        (0045) ;-----------------------------------------------
                                        (0046) AREA InterruptRAM (RAM, REL)
                                        (0047)   TX8SW_1_bData:    blk  1
                                        (0048)   TX8SW_1_bParity:  blk  1
                                        (0049) ;-----------------------------------------------
                                        (0050) 
                                        (0051) AREA UserModules (ROM, REL)
                                        (0052) 
                                        (0053) .LITERAL
                                        (0054)   Digits:    DS    "0123456789ABCDEF"
                                        (0055) .ENDLITERAL
                                        (0056) 
                                        (0057) .SECTION
                                        (0058) ;-----------------------------------------------------------------------------
                                        (0059) ;  FUNCTION NAME: TX8SW_1_Start(void)
                                        (0060) ;
                                        (0061) ;  DESCRIPTION:
                                        (0062) ;     Sets the output pin into high logical level
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS: none
                                        (0067) ;
                                        (0068) ;  RETURNS:  none
                                        (0069) ;
                                        (0070) ;  SIDE EFFECTS:
                                        (0071) ;    The A and X registers may be modified by this or future implementations
                                        (0072) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0073) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0074) ;    responsibility to preserve their values across calls to fastcall16
                                        (0075) ;    functions.
                                        (0076) ;-----------------------------------------------------------------------------
                                        (0077)  TX8SW_1_Start:
                                        (0078) _TX8SW_1_Start:
                                        (0079)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0080) 
                                        (0081)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0082)    
                                        (0083)    TX8SW_1_Start_M      ; Set the output pin into Strong DM and into high logical level
                                        (0084) 
                                        (0085)    RAM_EPILOGUE RAM_USE_CLASS_4
04E2: 7F       RET                      (0086)    ret
04E3: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0087) .ENDSECTION
                                        (0088) 
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: TX8SW_1_Stop
                                        (0092) ;
                                        (0093) ;  DESCRIPTION:
                                        (0094) ;     This function was added for compatibility reason
                                        (0095) ;
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:  none
                                        (0099) ;
                                        (0100) ;  RETURNS:  none
                                        (0101) ;
                                        (0102) ;  SIDE EFFECTS:
                                        (0103) ;    The A and X registers may be modified by this or future implementations
                                        (0104) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0105) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0106) ;    responsibility to preserve their values across calls to fastcall16
                                        (0107) ;    functions.
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109)  TX8SW_1_Stop:
                                        (0110) _TX8SW_1_Stop:
                                        (0111)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0112) 
                                        (0113)    TX8SW_1_Stop_M      ; Set the output pin into HiZ-analog DM
                                        (0114) 
                                        (0115)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0116)    ret
                                        (0117) .ENDSECTION
                                        (0118) 
                                        (0119) 
                                        (0120) .SECTION
                                        (0121) ;-----------------------------------------------------------------------------
                                        (0122) ;  FUNCTION NAME: TX8SW_1_PutChar
                                        (0123) ;  FUNCTION NAME: TX8SW_1_SendData
                                        (0124) ;
                                        (0125) ;  DESCRIPTION:
                                        (0126) ;     Sends one byte via TX pin.
                                        (0127) ;
                                        (0128) ;  ARGUMENTS:
                                        (0129) ;     A  => (BYTE) Data/char to transmit
                                        (0130) ;
                                        (0131) ;  RETURNS:
                                        (0132) ;
                                        (0133) ;  SIDE EFFECTS:
                                        (0134) ;    The A and X registers may be modified by this or future implementations
                                        (0135) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0136) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0137) ;    responsibility to preserve their values across calls to fastcall16
                                        (0138) ;    functions.
                                        (0139) ;-----------------------------------------------------------------------------
                                        (0140)  TX8SW_1_PutChar:
                                        (0141) _TX8SW_1_PutChar:
                                        (0142)  TX8SW_1_SendData:
                                        (0143) _TX8SW_1_SendData:
                                        (0144) 
                                        (0145)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)     RAM_SETPAGE_CUR >TX8SW_1_bData
                                        (0147) 
04E6: 53 00    MOV   [ser_c],A          (0148)     mov     [TX8SW_1_bData], A
04E8: 71 10    OR    F,0x10             
                                        (0149) IF (TX8SW_1_PARITY)
                                        (0150)   IF (TX8SW_1_DATA_BITS & TX8SW_1_DATA_BITS_8)
                                        (0151) 
                                        (0152)     IF (TX8SW_1_PARITY & TX8SW_1_PARITY_ODD)
                                        (0153)     mov     [TX8SW_1_bParity], 1
                                        (0154)     ELSE
                                        (0155)     mov     [TX8SW_1_bParity], 0
                                        (0156)     ENDIF
                                        (0157) 
                                        (0158)     mov     X, 8
                                        (0159) .P0:
                                        (0160)     rlc     A
                                        (0161)     jnc     .P1
                                        (0162)     xor     [TX8SW_1_bParity], 1
                                        (0163) .P1:
                                        (0164)     dec     X
                                        (0165)     jnz     .P0
                                        (0166)   ELSE
                                        (0167)     IF (TX8SW_1_PARITY & TX8SW_1_PARITY_ODD)
                                        (0168)     or      [TX8SW_1_bData], 0x80
                                        (0169)     ELSE
                                        (0170)     and     [TX8SW_1_bData], ~0x80
                                        (0171)     ENDIF
                                        (0172)     mov     X, 8
                                        (0173) .P0:
                                        (0174)     rlc     A
                                        (0175)     jnc     .P1
                                        (0176)     xor     [TX8SW_1_bData], 0x80
                                        (0177) .P1:
                                        (0178)     dec     X
                                        (0179)     jnz     .P0
                                        (0180)   ENDIF
                                        (0181) ENDIF
                                        (0182) 
                                        (0183)     M8C_SetBank1
04EA: 5D E0    MOV   A,REG[0xE0]        (0184)     mov     A, reg[OSC_CR0]            ; Get the System Oscillator control register
04EC: 08       PUSH  A                  (0185)     push    A                          ; and save it on the stack
04ED: 21 F8    AND   A,0xF8             (0186)     and     A, ~OSC_CR0_CPU            ; Clear the CPU clock selects
04EF: 29 00    OR    A,0x0              (0187)     or      A, TX8SW_1_OSC_CR0         ; Set CPU clock according to required baudrate
04F1: 70 FE    AND   F,0xFE             
                                        (0188) 
                                        (0189)     M8C_DisableGInt
04F3: 60 E0    MOV   REG[0xE0],A        (0190)     mov     reg[OSC_CR0], A            ; set CPU clock
04F5: 70 EF    AND   F,0xEF             
                                        (0191)     M8C_SetBank0
                                        (0192) 
                                        (0193) 
04F7: 57 0B    MOV   X,0xB              (0194)     mov     X, TX8SW_1_DELAY           ; some delay
                                        (0195) .delay: 
04F9: 79       DEC   X                  (0196)     dec     X
04FA: DF FE    JNC   0x04F9             (0197)     jnc     .delay 
                                        (0198) 
04FC: 51 08    MOV   A,[ser_c+8]        (0199)     mov      A, [Port_1_Data_SHADE]
                                        (0200) 
                                        (0201) ;-- Send data
                                        (0202) ;----------------------------------------------------
                                        (0203) IF (TX8SW_1_CYCL & TX8SW_1_CYCL_26)
                                        (0204) Send_26:                               ; send at 26 cycles per bit
                                        (0205) ;--- send start bit
04FE: 21 FD    AND   A,0xFD             (0206)     and     A, ~TX8SW_1_PinMask
0500: 60 04    MOV   REG[0x4],A         (0207)     mov     reg[TX8SW_1_PortDR], A     ; 5
0502: 6E 00    RRC   [ser_c]            
0504: C0 05    JC    0x050A             
0506: 21 FD    AND   A,0xFD             
0508: 80 05    JMP   0x050E             
050A: 29 02    OR    A,0x2              
050C: 80 01    JMP   0x050E             
050E: 60 04    MOV   REG[0x4],A         
0510: 6E 00    RRC   [ser_c]            
0512: C0 05    JC    0x0518             
0514: 21 FD    AND   A,0xFD             
0516: 80 05    JMP   0x051C             
0518: 29 02    OR    A,0x2              
051A: 80 01    JMP   0x051C             
051C: 60 04    MOV   REG[0x4],A         
051E: 6E 00    RRC   [ser_c]            
0520: C0 05    JC    0x0526             
0522: 21 FD    AND   A,0xFD             
0524: 80 05    JMP   0x052A             
0526: 29 02    OR    A,0x2              
0528: 80 01    JMP   0x052A             
052A: 60 04    MOV   REG[0x4],A         
052C: 6E 00    RRC   [ser_c]            
052E: C0 05    JC    0x0534             
0530: 21 FD    AND   A,0xFD             
0532: 80 05    JMP   0x0538             
0534: 29 02    OR    A,0x2              
0536: 80 01    JMP   0x0538             
0538: 60 04    MOV   REG[0x4],A         
053A: 6E 00    RRC   [ser_c]            
053C: C0 05    JC    0x0542             
053E: 21 FD    AND   A,0xFD             
0540: 80 05    JMP   0x0546             
0542: 29 02    OR    A,0x2              
0544: 80 01    JMP   0x0546             
0546: 60 04    MOV   REG[0x4],A         
0548: 6E 00    RRC   [ser_c]            
054A: C0 05    JC    0x0550             
054C: 21 FD    AND   A,0xFD             
054E: 80 05    JMP   0x0554             
0550: 29 02    OR    A,0x2              
0552: 80 01    JMP   0x0554             
0554: 60 04    MOV   REG[0x4],A         
0556: 6E 00    RRC   [ser_c]            
0558: C0 05    JC    0x055E             
055A: 21 FD    AND   A,0xFD             
055C: 80 05    JMP   0x0562             
055E: 29 02    OR    A,0x2              
0560: 80 01    JMP   0x0562             
0562: 60 04    MOV   REG[0x4],A         
0564: 6E 00    RRC   [ser_c]            
0566: C0 05    JC    0x056C             
0568: 21 FD    AND   A,0xFD             
056A: 80 05    JMP   0x0570             
056C: 29 02    OR    A,0x2              
056E: 80 01    JMP   0x0570             
0570: 60 04    MOV   REG[0x4],A         
                                        (0208) 
                                        (0209)     TX8SW_1_SendBit                    ; send all data bits
                                        (0210)     TX8SW_1_SendBit
                                        (0211)     TX8SW_1_SendBit
                                        (0212)     TX8SW_1_SendBit
                                        (0213)     TX8SW_1_SendBit
                                        (0214)     TX8SW_1_SendBit
                                        (0215)     TX8SW_1_SendBit
                                        (0216) 
                                        (0217) IF (TX8SW_1_SEND_8)
                                        (0218)     TX8SW_1_SendBit
                                        (0219) ENDIF
                                        (0220) 
                                        (0221) IF (TX8SW_1_SEND_9)
                                        (0222)     rrc     [TX8SW_1_bParity]          ; 7
                                        (0223)     jc      . + 6                      ; 5
                                        (0224)     and     A, ~TX8SW_1_PinMask        ; 4
                                        (0225)     jmp     . + 6                      ; 5
                                        (0226)     or      A, TX8SW_1_PinMask         ; 4
                                        (0227)     jmp     . + 2                      ; 5
                                        (0228)     mov     reg[TX8SW_1_PortDR], A     ; 5
                                        (0229) ENDIF
                                        (0230) 
0572: 47 00 00 TST   [ser_c],0x0        (0231)     tst     [0],0                      ; 8
0575: 49 01 00 TST   REG[0x1],0x0       (0232)     tst     reg[1],0                   ; 9
                                        (0233) 
                                        (0234) ;--- send stop bit(s)
0578: 29 02    OR    A,0x2              (0235)     or      A, TX8SW_1_PinMask         ; 4
057A: 60 04    MOV   REG[0x4],A         (0236)     mov     reg[TX8SW_1_PortDR], A     ; 5
                                        (0237) 
                                        (0238) IF (TX8SW_1_SEND_2_STOP)
                                        (0239)     mov     X, 4                       ; 4
                                        (0240) ELSE
057C: 57 01    MOV   X,0x1              (0241)     mov     X, 1                       ; 4
                                        (0242) ENDIF
                                        (0243) .L0:
057E: 79       DEC   X                  (0244)     dec     X                          ; 4
057F: BF FE    JNZ   0x057E             (0245)     jnz     .L0                        ; 5
                                        (0246) ENDIF
                                        (0247) 
                                        (0248) ;----------------------------------------------------
                                        (0249) IF (TX8SW_1_CYCL & TX8SW_1_CYCL_39)
                                        (0250) Send_39:                               ; send at 39 cycles per bit
                                        (0251) ;--- send start bit
                                        (0252)     and     A, ~TX8SW_1_PinMask
                                        (0253)     mov     reg[TX8SW_1_PortDR], A     ; 5
                                        (0254) IF (TX8SW_1_SEND_8)
                                        (0255)     mov     X, 8                       ; 4
                                        (0256) ELSE
                                        (0257)     mov     X, 7
                                        (0258) ENDIF
                                        (0259)     jmp    .L1                         ; 5
                                        (0260) 
                                        (0261) .L1:
                                        (0262)     nop                                ; 4
                                        (0263)     TX8SW_1_SendBit                    ; 26
                                        (0264)     dec    X                           ; 4
                                        (0265)     jnz    .L1                         ; 5
                                        (0266) 
                                        (0267) 
                                        (0268) IF (TX8SW_1_SEND_9)
                                        (0269)     rrc     [TX8SW_1_bParity]          ; 7   (26)
                                        (0270)     jc      . + 6                      ; 5
                                        (0271)     and     A, ~TX8SW_1_PinMask        ; 4
                                        (0272)     jmp     . + 6                      ; 5
                                        (0273)     or      A, TX8SW_1_PinMask         ; 4
                                        (0274)     jmp     . + 2                      ; 5
                                        (0275)     mov     reg[TX8SW_1_PortDR], A     ; 5
                                        (0276) 
                                        (0277)     nop                                ; 4
                                        (0278)     dec     X                          ; 4
                                        (0279)     jmp    .+2                         ; 5
                                        (0280) ENDIF
                                        (0281) 
                                        (0282)     rrc     [TX8SW_1_bParity]          ; 7
                                        (0283)     rrc     [TX8SW_1_bParity]          ; 7
                                        (0284)     rrc     [TX8SW_1_bParity]          ; 7
                                        (0285) 
                                        (0286) ;--- send stop bit(s)
                                        (0287)     or      A, TX8SW_1_PinMask         ; 4
                                        (0288)     mov     reg[TX8SW_1_PortDR], A     ; 5
                                        (0289) 
                                        (0290) IF (TX8SW_1_SEND_2_STOP)
                                        (0291)     mov     X, 7                       ; 4
                                        (0292) ELSE
                                        (0293)     mov     X, 3                       ; 4
                                        (0294) ENDIF
                                        (0295) .L0:
                                        (0296)     dec     X                          ; 4
                                        (0297)     jnz     .L0                        ; 5
                                        (0298) ENDIF
                                        (0299) 
                                        (0300) ;----------------------------------------------------
                                        (0301) IF (TX8SW_1_CYCL & TX8SW_1_CYCL_78)
                                        (0302) Send_78:                                ; send at 78 cycles per bit
                                        (0303) ;--- send start bit
                                        (0304)     and     A, ~TX8SW_1_PinMask
                                        (0305)     mov     reg[TX8SW_1_PortDR], A     ; 5
                                        (0306) IF (TX8SW_1_SEND_8)
                                        (0307)     mov     X, 8                       ; 4
                                        (0308) ELSE
                                        (0309)     mov     X, 7
                                        (0310) ENDIF
                                        (0311)     jmp    .L1                         ; 5
                                        (0312) 
                                        (0313) .L1:
                                        (0314)     swap    A, X                       ; 5
                                        (0315)     swap    A, X                       ; 5
                                        (0316)     swap    A, X                       ; 5
                                        (0317)     swap    A, X                       ; 5
                                        (0318)     swap    A, X                       ; 5
                                        (0319)     swap    A, X                       ; 5
                                        (0320)     tst     reg[1],0                   ; 9
                                        (0321)     nop                                ; 4
                                        (0322)     TX8SW_1_SendBit                    ; 26
                                        (0323)     dec    X                           ; 4
                                        (0324)     jnz    .L1                         ; 5
                                        (0325) 
                                        (0326) IF (TX8SW_1_SEND_9)
                                        (0327)     mov     X, 3                       ; 4
                                        (0328) .L2:
                                        (0329)     nop                                ; 4
                                        (0330)     dec     X                          ; 4
                                        (0331)     jnz     .L2                        ; 5
                                        (0332) 
                                        (0333)     rrc     [TX8SW_1_bParity]          ; 7   (26)
                                        (0334)     jc      . + 6                      ; 5
                                        (0335)     and     A, ~TX8SW_1_PinMask        ; 4
                                        (0336)     jmp     . + 6                      ; 5
                                        (0337)     or      A, TX8SW_1_PinMask         ; 4
                                        (0338)     jmp     . + 2                      ; 5
                                        (0339)     mov     reg[TX8SW_1_PortDR], A     ; 5
                                        (0340) 
                                        (0341)     tst     reg[1],0                   ; 9
                                        (0342) ENDIF
                                        (0343)     mov     X, 3                       ; 4
                                        (0344) .L3:
                                        (0345)     rrc     [TX8SW_1_bData]            ; 7
                                        (0346)     dec     X                          ; 4
                                        (0347)     jnz     .L3                        ; 5
                                        (0348) 
                                        (0349)     nop                                ; 4
                                        (0350)     nop                                ; 4
                                        (0351) 
                                        (0352) ;--- send stop bit(s)
                                        (0353)     or      A, TX8SW_1_PinMask         ; 4
                                        (0354)     mov     reg[TX8SW_1_PortDR], A     ; 5
                                        (0355) 
                                        (0356) IF (TX8SW_1_SEND_2_STOP)
                                        (0357)     mov     X, 16                      ; 4
                                        (0358) ELSE
                                        (0359)     mov     X, 7                       ; 4
                                        (0360) ENDIF
                                        (0361) .L0:
                                        (0362)     dec     X                          ; 4
                                        (0363)     jnz     .L0                        ; 5
                                        (0364) ENDIF
                                        (0365) ;----------------------------------------------------
                                        (0366) 
0581: 18       POP   A                  (0367)     pop     A                          ; 5
0582: 71 10    OR    F,0x10             
                                        (0368)     M8C_SetBank1                       ; 4
0584: 60 E0    MOV   REG[0xE0],A        (0369)     mov     reg[OSC_CR0], A            ; Restore CPU Clock
0586: 70 EF    AND   F,0xEF             
0588: 71 01    OR    F,0x1              
                                        (0370) 
                                        (0371)     M8C_SetBank0
                                        (0372)     M8C_EnableGInt
                                        (0373) 
                                        (0374)     RAM_EPILOGUE RAM_USE_CLASS_4
058A: 7F       RET                      (0375)     ret
                                        (0376) 
                                        (0377) .ENDSECTION
                                        (0378) 
                                        (0379) .SECTION
                                        (0380) ;-----------------------------------------------------------------------------
                                        (0381) ;  FUNCTION NAME: TX8SW_1_PutSHexByte
                                        (0382) ;
                                        (0383) ;  DESCRIPTION:
                                        (0384) ;     Send a byte in Hex representation (two characters) via TX pin
                                        (0385) ;
                                        (0386) ;  ARGUMENTS:
                                        (0387) ;     A  => (BYTE) Data/char to be sent
                                        (0388) ;
                                        (0389) ;  RETURNS:
                                        (0390) ;     none.
                                        (0391) ;
                                        (0392) ;  SIDE EFFECTS:
                                        (0393) ;    The A and X registers may be modified by this or future implementations
                                        (0394) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0395) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0396) ;    responsibility to preserve their values across calls to fastcall16
                                        (0397) ;    functions.
                                        (0398) ;-----------------------------------------------------------------------------
                                        (0399)  TX8SW_1_PutSHexByte:
                                        (0400) _TX8SW_1_PutSHexByte:
058B: 08       PUSH  A                  (0401)     push   A
058C: 67       ASR   A                  (0402)     asr    A
058D: 67       ASR   A                  (0403)     asr    A
058E: 67       ASR   A                  (0404)     asr    A
058F: 67       ASR   A                  (0405)     asr    A
0590: 21 0F    AND   A,0xF              (0406)     and    A, 0x0F
0592: FF 27    INDEX 0x04BB             (0407)     index  Digits
0594: 9F 4D    CALL  _TX8SW_1_PutChar|_TX8SW_1_Stop|_TX8SW_1_SendData|TX8SW_1_PutChar|TX8SW_1_SendData(0408)     call   TX8SW_1_PutChar
0596: 18       POP   A                  (0409)     pop    A
0597: 21 0F    AND   A,0xF              (0410)     and    A, 0x0F
0599: FF 20    INDEX 0x04BB             (0411)     index  Digits
059B: 9F 46    CALL  _TX8SW_1_PutChar|_TX8SW_1_Stop|_TX8SW_1_SendData|TX8SW_1_PutChar|TX8SW_1_SendData(0412)     call   TX8SW_1_PutChar
059D: 7F       RET                      (0413)     ret
                                        (0414) .ENDSECTION
                                        (0415) 
                                        (0416) .SECTION
                                        (0417) ;-----------------------------------------------------------------------------
                                        (0418) ;  FUNCTION NAME: TX8SW_1_PutSHexInt
                                        (0419) ;
                                        (0420) ;  DESCRIPTION:
                                        (0421) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0422) ;
                                        (0423) ;  ARGUMENTS:
                                        (0424) ;     Pointer to string
                                        (0425) ;     A  => LSB of Int
                                        (0426) ;     X  => MSB of Int
                                        (0427) ;
                                        (0428) ;  RETURNS:
                                        (0429) ;     none.
                                        (0430) ;
                                        (0431) ;  SIDE EFFECTS:
                                        (0432) ;    The A and X registers may be modified by this or future implementations
                                        (0433) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0434) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0435) ;    responsibility to preserve their values across calls to fastcall16
                                        (0436) ;    functions.
                                        (0437) ;
                                        (0438)  TX8SW_1_PutSHexInt:
                                        (0439) _TX8SW_1_PutSHexInt:
                                        (0440)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0441)     push A
                                        (0442)     mov  A, X
                                        (0443)     call  TX8SW_1_PutSHexByte          ; Print MSB
                                        (0444)     pop   A                            ; Move LSB into position
                                        (0445)     call  TX8SW_1_PutSHexByte          ; Print LSB
                                        (0446)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0447)     ret
                                        (0448) .ENDSECTION
                                        (0449) 
                                        (0450) .SECTION
                                        (0451) ;-----------------------------------------------------------------------------
                                        (0452) ;  FUNCTION NAME: TX8SW_1_CPutString
                                        (0453) ;
                                        (0454) ;  DESCRIPTION:
                                        (0455) ;     Send String out through UART TX port.
                                        (0456) ;
                                        (0457) ;
                                        (0458) ;  ARGUMENTS:
                                        (0459) ;     Pointer to String
                                        (0460) ;     A has MSB of string address
                                        (0461) ;     X has LSB of string address
                                        (0462) ;
                                        (0463) ;  RETURNS:
                                        (0464) ;     none
                                        (0465) ;
                                        (0466) ;  SIDE EFFECTS:
                                        (0467) ;    The A and X registers may be modified by this or future implementations
                                        (0468) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0469) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0470) ;    responsibility to preserve their values across calls to fastcall16
                                        (0471) ;    functions.
                                        (0472) ;-----------------------------------------------------------------------------
                                        (0473)  TX8SW_1_CPutString:
                                        (0474) _TX8SW_1_CPutString:
                                        (0475)    RAM_PROLOGUE RAM_USE_CLASS_1
059E: 08       PUSH  A                  (0476)    push  A                             ; Store ROM pointer
059F: 10       PUSH  X                  (0477)    push  X
05A0: 28       ROMX                     (0478)    romx                                ; Get character from ROM
05A1: A0 0B    JZ    0x05AD             (0479)    jz    .End_CPutString
05A3: 9F 3E    CALL  _TX8SW_1_PutChar|_TX8SW_1_Stop|_TX8SW_1_SendData|TX8SW_1_PutChar|TX8SW_1_SendData(0480)    call  TX8SW_1_PutChar               ; Print character
05A5: 20       POP   X                  (0481)    pop   X
05A6: 18       POP   A                  (0482)    pop   A
05A7: 75       INC   X                  (0483)    inc   X                             ; Inc LSB of pointer
05A8: DF F5    JNC   _TX8SW_1_CPutString|_TX8SW_1_PutSHexInt|TX8SW_1_CPutString(0484)    jnc   TX8SW_1_CPutString            ; Check for carry
05AA: 74       INC   A                  (0485)    inc   A                             ; Inc MSB of pointer
05AB: 8F F2    JMP   _TX8SW_1_CPutString|_TX8SW_1_PutSHexInt|TX8SW_1_CPutString(0486)    jmp   TX8SW_1_CPutString
                                        (0487) 
                                        (0488) 
                                        (0489) .End_CPutString:
05AD: 38 FE    ADD   SP,0xFE            (0490)    add   SP, -2
                                        (0491)    RAM_EPILOGUE RAM_USE_CLASS_1
05AF: 7F       RET                      (0492)    ret
05B0: 70 BF    AND   F,0xBF             
05B2: 60 D3    MOV   REG[0xD3],A        
                                        (0493) .ENDSECTION
                                        (0494) 
                                        (0495) .SECTION
                                        (0496) ;-----------------------------------------------------------------------------
                                        (0497) ;  FUNCTION NAME: TX8SW_1_PutString
                                        (0498) ;
                                        (0499) ;  DESCRIPTION:
                                        (0500) ;     Send String out through UART TX port.
                                        (0501) ;
                                        (0502) ;
                                        (0503) ;  ARGUMENTS:
                                        (0504) ;     Pointer to String
                                        (0505) ;     A has MSB of string address
                                        (0506) ;     X has LSB of string address
                                        (0507) ;
                                        (0508) ;  RETURNS:
                                        (0509) ;     none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16
                                        (0516) ;    functions.
                                        (0517) ;
                                        (0518) ;    Currently only the page pointer registers listed below are modified:
                                        (0519) ;          IDX_PP
                                        (0520) ;-----------------------------------------------------------------------------
                                        (0521)  TX8SW_1_PutString:
                                        (0522) _TX8SW_1_PutString:
                                        (0523)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0524)    RAM_SETPAGE_IDX A
                                        (0525) .PutStringLoop:
05B4: 52 00    MOV   A,[X+0]            (0526)    mov   A,[X]                         ; Get value pointed to by X
05B6: A0 08    JZ    0x05BF             (0527)    jz    End_PutString                 ; Check for end of string
05B8: 10       PUSH  X                  (0528)    push  X
05B9: 9F 28    CALL  _TX8SW_1_PutChar|_TX8SW_1_Stop|_TX8SW_1_SendData|TX8SW_1_PutChar|TX8SW_1_SendData(0529)    call  TX8SW_1_PutChar               ; Send character to Tx port
05BB: 20       POP   X                  (0530)    pop   X
05BC: 75       INC   X                  (0531)    inc   X                             ; Advance pointer to next character
05BD: 8F F6    JMP   0x05B4             (0532)    jmp   .PutStringLoop                ; Get next character
05BF: 70 3F    AND   F,0x3F             
05C1: 71 C0    OR    F,0xC0             
                                        (0533) 
                                        (0534) End_PutString:
                                        (0535)    RAM_EPILOGUE RAM_USE_CLASS_3
05C3: 7F       RET                      (0536)    ret
                                        (0537) .ENDSECTION
                                        (0538) 
                                        (0539) 
                                        (0540) .SECTION
                                        (0541) ;-----------------------------------------------------------------------------
                                        (0542) ;  FUNCTION NAME: TX8SW_1_PutCRLF
                                        (0543) ;
                                        (0544) ;  DESCRIPTION:
                                        (0545) ;     Send a CR and LF
                                        (0546) ;
                                        (0547) ;  ARGUMENTS:
                                        (0548) ;     none.
                                        (0549) ;
                                        (0550) ;  RETURNS:
                                        (0551) ;     none.
                                        (0552) ;
                                        (0553) ;  SIDE EFFECTS:
                                        (0554) ;    The A and X registers may be modified by this or future implementations
                                        (0555) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0556) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0557) ;    responsibility to preserve their values across calls to fastcall16
                                        (0558) ;    functions.
                                        (0559) ;-----------------------------------------------------------------------------
                                        (0560) _TX8SW_1_PutCRLF:
                                        (0561)  TX8SW_1_PutCRLF:
                                        (0562)     mov    A, 0x0D                        ; Send CR
                                        (0563)     call   TX8SW_1_PutChar
                                        (0564)     mov    A, 0x0A                        ; Send LF
                                        (0565)     call   TX8SW_1_PutChar
                                        (0566)     ret
                                        (0567) .ENDSECTION
                                        (0568) 
                                        (0569) .SECTION
                                        (0570) ;-----------------------------------------------------------------------------
                                        (0571) ;  FUNCTION NAME: TX8SW_1_Write
                                        (0572) ;
                                        (0573) ;  DESCRIPTION:
                                        (0574) ;     Send String of length X to serial port
                                        (0575) ;
                                        (0576) ;
                                        (0577) ;  ARGUMENTS:
                                        (0578) ;     Pointer to String
                                        (0579) ;     [SP-5] Count of characters to send
                                        (0580) ;     [SP-4] has MSB of string address
                                        (0581) ;     [SP-3] has LSB of string address
                                        (0582) ;
                                        (0583) ;  RETURNS:
                                        (0584) ;     none
                                        (0585) ;
                                        (0586) ;  SIDE EFFECTS:
                                        (0587) ;    The A and X registers may be modified by this or future implementations
                                        (0588) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0589) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0590) ;    responsibility to preserve their values across calls to fastcall16
                                        (0591) ;    functions.
                                        (0592) ;
                                        (0593) ;    Currently only the page pointer registers listed below are modified:
                                        (0594) ;          IDX_PP
                                        (0595) ;-----------------------------------------------------------------------------
                                        (0596) CNT_LEN:    equ -5                         ; Length of data to send
                                        (0597) STR_MSB:    equ -4                         ; MSB pointer of string
                                        (0598) STR_LSB:    equ -3                         ; LSB pointer of string
                                        (0599) 
                                        (0600)  TX8SW_1_Write:
                                        (0601) _TX8SW_1_Write:
                                        (0602)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0603)    RAM_SETPAGE_IDX2STK
                                        (0604)    mov   X, SP
                                        (0605) 
                                        (0606) .NextByteLoop:
                                        (0607)    mov   A,[X+CNT_LEN]                     ; Get length of string to send
                                        (0608)    jz    .End_Write
                                        (0609)    dec   [X+CNT_LEN]                       ; Decrement counter
                                        (0610) 
                                        (0611)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0612)    mov   A, [X+STR_MSB]                    ; Load pointer to char to send
                                        (0613)    ENDIF
                                        (0614) 
                                        (0615)    mov   X, [X+STR_LSB]                    ; Get character to send
                                        (0616)    RAM_SETPAGE_IDX A                       ; switch index pages
                                        (0617)    mov   A, [X]
                                        (0618)    call    TX8SW_1_PutChar             ; Send character to UART
                                        (0619)    mov   X, SP
                                        (0620)    RAM_SETPAGE_IDX2STK
                                        (0621)    inc   [X+STR_LSB]
                                        (0622)    jmp   .NextByteLoop
                                        (0623) 
                                        (0624) .End_Write:
                                        (0625)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0626)    ret
                                        (0627) 
                                        (0628) .ENDSECTION
                                        (0629) .SECTION
                                        (0630) ;-----------------------------------------------------------------------------
                                        (0631) ;  FUNCTION NAME: TX8SW_1_CWrite
                                        (0632) ;
                                        (0633) ;  DESCRIPTION:
                                        (0634) ;     Send String of length X to serial port
                                        (0635) ;
                                        (0636) ;  ARGUMENTS:
                                        (0637) ;     Pointer to String
                                        (0638) ;     [SP-6] MSB of Count of character to send
                                        (0639) ;     [SP-5] LSB of Count of character to send
                                        (0640) ;     [SP-4] has MSB of string address
                                        (0641) ;     [SP-3] has LSB of string address
                                        (0642) ;
                                        (0643) ;  RETURNS:
                                        (0644) ;     none
                                        (0645) ;
                                        (0646) ;  SIDE EFFECTS:
                                        (0647) ;    The A and X registers may be modified by this or future implementations
                                        (0648) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0649) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0650) ;    responsibility to preserve their values across calls to fastcall16
                                        (0651) ;    functions.
                                        (0652) ;-----------------------------------------------------------------------------
                                        (0653) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0654) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0655) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0656) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0657) 
                                        (0658)  TX8SW_1_CWrite:
                                        (0659) _TX8SW_1_CWrite:
                                        (0660)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0661)    mov   X,SP
                                        (0662) 
                                        (0663) .CW_Loop:
                                        (0664)                                              ; Check for zero counter
                                        (0665)    cmp   [X+CLEN_MSB],0x00
                                        (0666)    jnz   .CW_WRITEIT
                                        (0667)    cmp   [X+CLEN_LSB],0x00
                                        (0668)    jz    .End_CWrite                         ; Leave if done
                                        (0669) 
                                        (0670) .CW_WRITEIT:                                 ; Save pointers
                                        (0671)    push  X
                                        (0672)    mov   A,[X+CSTR_MSB]
                                        (0673)    mov   X,[X+CSTR_LSB]
                                        (0674)    romx                                     ; Get character from ROM
                                        (0675)    call  TX8SW_1_PutChar
                                        (0676)    pop   X
                                        (0677) 
                                        (0678)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
                                        (0679)    adc   [X+CSTR_MSB],0
                                        (0680) 
                                        (0681)                                             ; Dec the counter
                                        (0682)    sub   [X+CLEN_LSB],0x01
                                        (0683)    sbb   [X+CLEN_MSB],0x00
                                        (0684) 
                                        (0685)    jmp   .CW_Loop
                                        (0686) 
                                        (0687) .End_CWrite:
                                        (0688)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0689)    ret
                                        (0690) .ENDSECTION
FILE: lib\spim_1int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SPIM_1INT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:
                                        (0008) ;;    Interrupt handler routine for SPIM user module instance: SPIM_1.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "SPIM_1.inc"
                                        (0017) 
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) export  _SPIM_1_ISR
                                        (0023) 
                                        (0024) 
                                        (0025) AREA InterruptRAM (RAM,REL,CON)
                                        (0026) 
                                        (0027) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0028) ;---------------------------------------------------
                                        (0029) ; Insert your custom declarations below this banner
                                        (0030) ;---------------------------------------------------
                                        (0031) 
                                        (0032) ;------------------------
                                        (0033) ; Includes
                                        (0034) ;------------------------
                                        (0035) 
                                        (0036) 	
                                        (0037) ;------------------------
                                        (0038) ;  Constant Definitions
                                        (0039) ;------------------------
                                        (0040) 
                                        (0041) 
                                        (0042) ;------------------------
                                        (0043) ; Variable Allocation
                                        (0044) ;------------------------
                                        (0045) 
                                        (0046) 
                                        (0047) ;---------------------------------------------------
                                        (0048) ; Insert your custom declarations above this banner
                                        (0049) ;---------------------------------------------------
                                        (0050) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0051) 
                                        (0052) 
                                        (0053) AREA UserModules (ROM, REL)
                                        (0054) 
                                        (0055) ;-----------------------------------------------------------------------------
                                        (0056) ;  FUNCTION NAME: _SPIM_1_ISR
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0059) ;
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;
                                        (0062) 
                                        (0063) _SPIM_1_ISR:
                                        (0064) 
                                        (0065)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0066)    ;---------------------------------------------------
                                        (0067)    ; Insert your custom assembly code below this banner
                                        (0068)    ;---------------------------------------------------
                                        (0069)    ;   NOTE: interrupt service routines must preserve
                                        (0070)    ;   the values of the A and X CPU registers.
                                        (0071)    
                                        (0072)    ;---------------------------------------------------
                                        (0073)    ; Insert your custom assembly code above this banner
                                        (0074)    ;---------------------------------------------------
                                        (0075)    
                                        (0076)    ;---------------------------------------------------
                                        (0077)    ; Insert a lcall to a C function below this banner
                                        (0078)    ; and un-comment the lines between these banners
                                        (0079)    ;---------------------------------------------------
                                        (0080)    
                                        (0081)    ;PRESERVE_CPU_CONTEXT
                                        (0082)    ;lcall _My_C_Function
                                        (0083)    ;RESTORE_CPU_CONTEXT
                                        (0084)    
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ; Insert a lcall to a C function above this banner
                                        (0087)    ; and un-comment the lines between these banners
                                        (0088)    ;---------------------------------------------------
                                        (0089)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0090) 
05C4: 7E       RETI                     (0091)    reti
                                        (0092) 
                                        (0093) 
                                        (0094) ; end of file SPIM_1INT.asm
FILE: lib\spim_1.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SPIM_1.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: SPIM User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "SPIM_1.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export   SPIM_1_EnableInt
                                        (0030) export  _SPIM_1_EnableInt
                                        (0031) export   SPIM_1_DisableInt
                                        (0032) export  _SPIM_1_DisableInt
                                        (0033) export   SPIM_1_Start
                                        (0034) export  _SPIM_1_Start
                                        (0035) export   SPIM_1_Stop
                                        (0036) export  _SPIM_1_Stop
                                        (0037) export   SPIM_1_SendTxData
                                        (0038) export  _SPIM_1_SendTxData
                                        (0039) export   SPIM_1_bReadRxData
                                        (0040) export  _SPIM_1_bReadRxData
                                        (0041) export   SPIM_1_bReadStatus
                                        (0042) export  _SPIM_1_bReadStatus
                                        (0043) 
                                        (0044) // These globals will be removed in a future release
                                        (0045) // Do not use
                                        (0046) export   bSPIM_1_ReadRxData
                                        (0047) export  _bSPIM_1_ReadRxData
                                        (0048) export   bSPIM_1_ReadStatus
                                        (0049) export  _bSPIM_1_ReadStatus
                                        (0050) 
                                        (0051) ;-----------------------------------------------
                                        (0052) ;  Constant Definitions
                                        (0053) ;-----------------------------------------------
                                        (0054) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                        (0055) 
                                        (0056) 
                                        (0057) area UserModules (ROM, REL)
                                        (0058) 
                                        (0059) .SECTION
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;  FUNCTION NAME: SPIM_1_EnableInt
                                        (0062) ;
                                        (0063) ;  DESCRIPTION:
                                        (0064) ;     Enables the SPIM interrupt by setting the interrupt enable mask
                                        (0065) ;     bit associated with this User Module.
                                        (0066) ;
                                        (0067) ;     NOTE:  Remember to enable the global interrupt by calling the
                                        (0068) ;           M8C global macro: M8C_EnableGInt
                                        (0069) ;
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:  none
                                        (0073) ;
                                        (0074) ;  RETURNS:  none
                                        (0075) ;
                                        (0076) ;  SIDE EFFECTS: 
                                        (0077) ;    The A and X registers may be modified by this or future implementations
                                        (0078) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0079) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0080) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0081) ;    functions.
                                        (0082) ;
                                        (0083) ;  THEORY of OPERATION or PROCEDURE:
                                        (0084) ;     Sets the specific user module interrupt enable mask bit.
                                        (0085) ;
                                        (0086)  SPIM_1_EnableInt:
                                        (0087) _SPIM_1_EnableInt:
                                        (0088)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0089)    M8C_EnableIntMask SPIM_1_INT_REG, SPIM_1_bINT_MASK
                                        (0090)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0091)    ret
                                        (0092) 
                                        (0093) .ENDSECTION
                                        (0094) 
                                        (0095) .SECTION
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;  FUNCTION NAME: SPIM_1_DisableInt
                                        (0098) ;
                                        (0099) ;  DESCRIPTION:
                                        (0100) ;     Disables this SPIM's interrupt by clearing the interrupt enable mask bit
                                        (0101) ;     associated with this User Module.
                                        (0102) ;
                                        (0103) ;-----------------------------------------------------------------------------
                                        (0104) ;
                                        (0105) ;  ARGUMENTS:  none
                                        (0106) ;
                                        (0107) ;  RETURNS:  none
                                        (0108) ;
                                        (0109) ;  SIDE EFFECTS: 
                                        (0110) ;    The A and X registers may be modified by this or future implementations
                                        (0111) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0112) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0113) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0114) ;    functions.
                                        (0115) ;
                                        (0116) ;  THEORY of OPERATION or PROCEDURE:
                                        (0117) ;     Clears the specific user module interrupt enable mask bit.
                                        (0118) ;
                                        (0119)  SPIM_1_DisableInt:
                                        (0120) _SPIM_1_DisableInt:
                                        (0121)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0122)    M8C_DisableIntMask SPIM_1_INT_REG, SPIM_1_bINT_MASK
                                        (0123)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0124)    ret
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: SPIM_1_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit, SPI mode, and LSB/MSB first configuration of the SPIM
                                        (0134) ;     user module.
                                        (0135) ;
                                        (0136) ;     Transmission will begin transmitting when a byte is written into the TX buffer
                                        (0137) ;     using the SPIM_1_SendTxData function.
                                        (0138) ;
                                        (0139) ;-----------------------------------------------------------------------------
                                        (0140) ;
                                        (0141) ;  ARGUMENTS:
                                        (0142) ;     BYTE bConfiguration - Consists of SPI Mode and LSB/MSB first bit.
                                        (0143) ;           Use defined masks - masks can be OR'd together.
                                        (0144) ;     PASSED in Accumulator.
                                        (0145) ;
                                        (0146) ;  RETURNS:  none
                                        (0147) ;
                                        (0148) ;  SIDE EFFECTS: 
                                        (0149) ;    The A and X registers may be modified by this or future implementations
                                        (0150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0153) ;    functions.
                                        (0154) ;
                                        (0155) ;  THEORY of OPERATION or PROCEDURE:
                                        (0156) ;     1) Set all Slave Select outputs high
                                        (0157) ;     2) Set the specified SPI configuration bits in the Control register.
                                        (0158) ;
                                        (0159)  SPIM_1_Start:
                                        (0160) _SPIM_1_Start:
                                        (0161)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0162)    ; setup the SPIM configuration setting
05C5: 29 01    OR    A,0x1              (0163)    or    A, bfCONTROL_REG_START_BIT
05C7: 60 2B    MOV   REG[0x2B],A        (0164)    mov   REG[SPIM_1_CONTROL_REG], A
                                        (0165)    RAM_EPILOGUE RAM_USE_CLASS_1
05C9: 7F       RET                      (0166)    ret
                                        (0167) 
                                        (0168) .ENDSECTION
                                        (0169) 
                                        (0170) .SECTION
                                        (0171) ;-----------------------------------------------------------------------------
                                        (0172) ;  FUNCTION NAME: SPIM_1_Stop
                                        (0173) ;
                                        (0174) ;  DESCRIPTION:
                                        (0175) ;     Disables SPIM operation.
                                        (0176) ;
                                        (0177) ;-----------------------------------------------------------------------------
                                        (0178) ;
                                        (0179) ;  ARGUMENTS:  none
                                        (0180) ;
                                        (0181) ;  RETURNS:  none
                                        (0182) ;
                                        (0183) ;  SIDE EFFECTS: 
                                        (0184) ;    The A and X registers may be modified by this or future implementations
                                        (0185) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0186) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0187) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0188) ;    functions.
                                        (0189) ;
                                        (0190) ;  THEORY of OPERATION or PROCEDURE:
                                        (0191) ;     Clear the start bit in the Control register.
                                        (0192) ;
                                        (0193)  SPIM_1_Stop:
                                        (0194) _SPIM_1_Stop:
                                        (0195)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0196)    ; clear the SPIM stop bits
                                        (0197)    and   REG[SPIM_1_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0198)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0199)    ret
                                        (0200) 
                                        (0201) .ENDSECTION
                                        (0202) 
                                        (0203) .SECTION
                                        (0204) ;-----------------------------------------------------------------------------
                                        (0205) ;  FUNCTION NAME: SPIM_1_SendTxData
                                        (0206) ;
                                        (0207) ;  DESCRIPTION:
                                        (0208) ;     Initiates an SPI data transfer.
                                        (0209) ;
                                        (0210) ;-----------------------------------------------------------------------------
                                        (0211) ;
                                        (0212) ;  ARGUMENTS:
                                        (0213) ;     BYTE  bTxData - data to transmit.
                                        (0214) ;        Passed in Accumulator.
                                        (0215) ;
                                        (0216) ;  RETURNS:  none
                                        (0217) ;
                                        (0218) ;  SIDE EFFECTS: 
                                        (0219) ;    The A and X registers may be modified by this or future implementations
                                        (0220) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0221) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0222) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0223) ;    functions.
                                        (0224) ;
                                        (0225) ;  THEORY of OPERATION or PROCEDURE:
                                        (0226) ;     Writes data to the TX buffer register.
                                        (0227) ;
                                        (0228)  SPIM_1_SendTxData:
                                        (0229) _SPIM_1_SendTxData:
                                        (0230)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0231)    ; Transmit the data!
05CA: 60 29    MOV   REG[0x29],A        (0232)    mov REG[SPIM_1_TX_BUFFER_REG], A
                                        (0233)    RAM_EPILOGUE RAM_USE_CLASS_1
05CC: 7F       RET                      (0234)    ret
                                        (0235) 
                                        (0236) .ENDSECTION
                                        (0237) 
                                        (0238) .SECTION
                                        (0239) ;-----------------------------------------------------------------------------
                                        (0240) ;  FUNCTION NAME: SPIM_1_bReadRxData
                                        (0241) ;
                                        (0242) ;  DESCRIPTION:
                                        (0243) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0244) ;     sure data is valid.
                                        (0245) ;
                                        (0246) ;-----------------------------------------------------------------------------
                                        (0247) ;
                                        (0248) ;  ARGUMENTS:  none
                                        (0249) ;
                                        (0250) ;  RETURNS:
                                        (0251) ;     bRxData - returned in A.
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS: 
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260) ;  THEORY of OPERATION or PROCEDURE:
                                        (0261) ;
                                        (0262)  SPIM_1_bReadRxData:
                                        (0263) _SPIM_1_bReadRxData:
                                        (0264)  bSPIM_1_ReadRxData:
                                        (0265) _bSPIM_1_ReadRxData:
                                        (0266)    RAM_PROLOGUE RAM_USE_CLASS_1
05CD: 5D 2A    MOV   A,REG[0x2A]        (0267)    mov A, REG[SPIM_1_RX_BUFFER_REG]
                                        (0268)    RAM_EPILOGUE RAM_USE_CLASS_1   
05CF: 7F       RET                      (0269)    ret
                                        (0270) 
                                        (0271) 
                                        (0272) .ENDSECTION
                                        (0273) 
                                        (0274) .SECTION
                                        (0275) ;-----------------------------------------------------------------------------
                                        (0276) ;  FUNCTION NAME: SPIM_1_ReadStatus
                                        (0277) ;
                                        (0278) ;  DESCRIPTION:
                                        (0279) ;     Reads the SPIM Status bits in the Control/Status register.
                                        (0280) ;
                                        (0281) ;-----------------------------------------------------------------------------
                                        (0282) ;
                                        (0283) ;  ARGUMENTS:  none
                                        (0284) ;
                                        (0285) ;  RETURNS:
                                        (0286) ;     BYTE  bStatus - transmit status data.  Use the defined bit masks.
                                        (0287) ;        Returned in Accumulator.
                                        (0288) ;
                                        (0289) ;  SIDE EFFECTS: 
                                        (0290) ;    The A and X registers may be modified by this or future implementations
                                        (0291) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0292) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0293) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0294) ;    functions.
                                        (0295) ;
                                        (0296) ;  THEORY of OPERATION or PROCEDURE:
                                        (0297) ;     Read the status and control register.
                                        (0298) ;
                                        (0299)  SPIM_1_bReadStatus:
                                        (0300) _SPIM_1_bReadStatus:
                                        (0301)  bSPIM_1_ReadStatus:
                                        (0302) _bSPIM_1_ReadStatus:
                                        (0303)    RAM_PROLOGUE RAM_USE_CLASS_1
05D0: 5D 2B    MOV   A,REG[0x2B]        (0304)    mov A,  REG[SPIM_1_CONTROL_REG]
                                        (0305)    RAM_EPILOGUE RAM_USE_CLASS_1   
05D2: 7F       RET                      (0306)    ret
                                        (0307) 
                                        (0308) .ENDSECTION
                                        (0309) 
                                        (0310) ; End of File SPIM_1.asm
FILE: lib\sleeptimer_1int.asm           (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   SleepTimer_1INT.asm
                                        (0004) ;;  Version: 1.0, Updated on 2015/3/4 at 22:26:59
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SleepTimer Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "SleepTimer_1.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "m8c.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export  _SleepTimer_1_ISR
                                        (0021) 
                                        (0022) 
                                        (0023) export  SleepTimer_1_fTick
                                        (0024) export _SleepTimer_1_fTick
                                        (0025) export  SleepTimer_1_bTimerValue
                                        (0026) export _SleepTimer_1_bTimerValue
                                        (0027) export  SleepTimer_1_bCountDown
                                        (0028) export _SleepTimer_1_bCountDown
                                        (0029) export  SleepTimer_1_TickCount
                                        (0030) export _SleepTimer_1_TickCount
                                        (0031) 
                                        (0032) ;-----------------------------------------------
                                        (0033) ; Variable Allocation
                                        (0034) ;-----------------------------------------------
                                        (0035) AREA InterruptRAM (RAM, REL, CON)
                                        (0036) 
                                        (0037)  SleepTimer_1_fTick:
                                        (0038) _SleepTimer_1_fTick:        BLK  1
                                        (0039) 
                                        (0040)  SleepTimer_1_bTimerValue:
                                        (0041) _SleepTimer_1_bTimerValue:  BLK  1
                                        (0042) 
                                        (0043)  SleepTimer_1_bCountDown:
                                        (0044) _SleepTimer_1_bCountDown:   BLK  1
                                        (0045) 
                                        (0046)  SleepTimer_1_TickCount:
                                        (0047) _SleepTimer_1_TickCount:    BLK  SleepTimer_1_TICK_CNTR_SIZE
                                        (0048) 
                                        (0049) 
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _SleepTimer_1_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;      interrupt handler for instance SleepTimer_1.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _SleepTimer_1_ISR:
                                        (0090) 
05D3: 2E 02 01 OR    [ser_c+2],0x1      (0091)    or   [SleepTimer_1_fTick],0x01           ; Set tick flag
                                        (0092)  
                                        (0093)                                                 ; Decrement CountDown (Sync counter)
05D6: 47 04 FF TST   [ser_c+4],0xFF     (0094)    tst  [SleepTimer_1_bCountDown],0xFF
05D9: A0 03    JZ    0x05DD             (0095)    jz   .DoTimer
05DB: 7A 04    DEC   [ser_c+4]          (0096)    dec  [SleepTimer_1_bCountDown]
                                        (0097) 
                                        (0098) .DoTimer:                                       ; Decrement TimerValue, if required
05DD: 47 03 FF TST   [ser_c+3],0xFF     (0099)    tst  [SleepTimer_1_bTimerValue],0xFF
05E0: A0 03    JZ    0x05E4             (0100)    jz   .IncBigCounter
05E2: 7A 03    DEC   [ser_c+3]          (0101)    dec  [SleepTimer_1_bTimerValue]
                                        (0102) 
                                        (0103) .IncBigCounter:                                 ; Increment big tick counter
                                        (0104) IF (SleepTimer_1_TICK_CNTR_SIZE & 0x04)
                                        (0105)    inc  [SleepTimer_1_TickCount+3]
                                        (0106)    jnc  SleepTimer_1_SLEEP_ISR_END
                                        (0107) 
                                        (0108)    inc  [SleepTimer_1_TickCount+2]
                                        (0109)    jnc  SleepTimer_1_SLEEP_ISR_END
                                        (0110) ENDIF
                                        (0111) 
                                        (0112) IF (SleepTimer_1_TICK_CNTR_SIZE & (0x04|0x02))
05E4: 76 06    INC   [ser_c+6]          (0113)    inc  [SleepTimer_1_TickCount+1]
05E6: D0 03    JNC   0x05EA             (0114)    jnc  SleepTimer_1_SLEEP_ISR_END
                                        (0115) ENDIF
                                        (0116) 
05E8: 76 05    INC   [ser_c+5]          (0117)    inc  [SleepTimer_1_TickCount+0]
                                        (0118) 
                                        (0119) SleepTimer_1_SLEEP_ISR_END:
                                        (0120) 
                                        (0121)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0122)    ;---------------------------------------------------
                                        (0123)    ; Insert your custom assembly code below this banner
                                        (0124)    ;---------------------------------------------------
                                        (0125)    ;   NOTE: interrupt service routines must preserve
                                        (0126)    ;   the values of the A and X CPU registers.
                                        (0127)    
                                        (0128)    ;---------------------------------------------------
                                        (0129)    ; Insert your custom assembly code above this banner
                                        (0130)    ;---------------------------------------------------
                                        (0131)    
                                        (0132)    ;---------------------------------------------------
                                        (0133)    ; Insert a lcall to a C function below this banner
                                        (0134)    ; and un-comment the lines between these banners
                                        (0135)    ;---------------------------------------------------
                                        (0136)    
                                        (0137)    ;PRESERVE_CPU_CONTEXT
05EA: 7D 15 FA LJMP  _Sleep_Timer_Interrupt(0138)    ljmp _Sleep_Timer_Interrupt
                                        (0139)    ;RESTORE_CPU_CONTEXT
                                        (0140)    
                                        (0141)    ;---------------------------------------------------
                                        (0142)    ; Insert a lcall to a C function above this banner
                                        (0143)    ; and un-comment the lines between these banners
                                        (0144)    ;---------------------------------------------------
                                        (0145)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0146) 
05ED: 7E       RETI                     (0147)    reti
                                        (0148) 
                                        (0149) ; end of file SleepTimer_1INT.asm
                                        (0150) 
FILE: lib\sleeptimer_1.asm              (0001) ;;*****************************************************************************
05EE: 43 E0 40 OR    REG[0xE0],0x40     (0002) ;;*****************************************************************************
                                        (0003) ;;  Filename:   SleepTimer_1.asm
                                        (0004) ;;  Version: 1.0, Updated on 2015/3/4 at 22:26:59
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SleepTimer User Module software implementation file for the
                                        (0008) ;;                22/24/27/29xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "SleepTimer_1.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name reference for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  SleepTimer_1_EnableInt
                                        (0041) export _SleepTimer_1_EnableInt
                                        (0042) export  SleepTimer_1_DisableInt
                                        (0043) export _SleepTimer_1_DisableInt
                                        (0044) 
                                        (0045) export  SleepTimer_1_Start
                                        (0046) export _SleepTimer_1_Start
                                        (0047) export  SleepTimer_1_Stop
                                        (0048) export _SleepTimer_1_Stop
                                        (0049) 
                                        (0050) export  SleepTimer_1_TickWait
                                        (0051) export _SleepTimer_1_TickWait
                                        (0052) 
                                        (0053) export  SleepTimer_1_SyncWait
                                        (0054) export _SleepTimer_1_SyncWait
                                        (0055) 
                                        (0056) export  SleepTimer_1_SetInterval
                                        (0057) export _SleepTimer_1_SetInterval
                                        (0058) 	
                                        (0059) export  SleepTimer_1_bGetTickCntr
                                        (0060) export _SleepTimer_1_bGetTickCntr
                                        (0061) 
                                        (0062) export  SleepTimer_1_SetTimer
                                        (0063) export _SleepTimer_1_SetTimer
                                        (0064) 
                                        (0065) export  SleepTimer_1_bGetTimer
                                        (0066) export _SleepTimer_1_bGetTimer
                                        (0067) 
                                        (0068) IF(SleepTimer_1_TICK_CNTR_SIZE & (4|2))
                                        (0069) export  SleepTimer_1_iGetTickCntr
                                        (0070) export _SleepTimer_1_iGetTickCntr
                                        (0071) ENDIF
                                        (0072) 
                                        (0073) IF(SleepTimer_1_TICK_CNTR_SIZE & 4)
                                        (0074) export  SleepTimer_1_lGetTickCntr
                                        (0075) export _SleepTimer_1_lGetTickCntr
                                        (0076) ENDIF
                                        (0077) 
                                        (0078) 
                                        (0079) area text (ROM,REL)
                                        (0080) 
                                        (0081) ;-----------------------------------------------
                                        (0082) ;  EQUATES
                                        (0083) ;-----------------------------------------------
                                        (0084) 
                                        (0085) ; Counter LSB Offset if 4 byte tick counter
                                        (0086) IF(SleepTimer_1_TICK_CNTR_SIZE & 4)
                                        (0087) ST_LSB_OFFSET:   equ  3
                                        (0088) ENDIF
                                        (0089) 
                                        (0090) ; Counter LSB Offset if 2 byte tick counter
                                        (0091) IF(SleepTimer_1_TICK_CNTR_SIZE & 2)
                                        (0092) ST_LSB_OFFSET:   equ  1
                                        (0093) ENDIF
                                        (0094) 
                                        (0095) ; Counter LSB Offset if 1 byte tick counter
                                        (0096) IF(SleepTimer_1_TICK_CNTR_SIZE & 1)
                                        (0097) ST_LSB_OFFSET:   equ  0
                                        (0098) ENDIF
                                        (0099) 
                                        (0100) 
                                        (0101) area UserModules (ROM, REL, CON)
                                        (0102) 
                                        (0103) ;=============================================================================
                                        (0104) ;=============================================================================
                                        (0105) ;
                                        (0106) ;     Low-Level Commands
                                        (0107) ;
                                        (0108) ;=============================================================================
                                        (0109) ;=============================================================================
                                        (0110) 
                                        (0111) .SECTION
                                        (0112) ;-----------------------------------------------------------------------------
                                        (0113) ;  FUNCTION NAME: SleepTimer_1_EnableInt
                                        (0114) ;
                                        (0115) ;  DESCRIPTION:
                                        (0116) ;     Enables SleepTimer interrupts.
                                        (0117) ;-----------------------------------------------------------------------------
                                        (0118) ;
                                        (0119) ;  ARGUMENTS:
                                        (0120) ;     none.
                                        (0121) ;
                                        (0122) ;  RETURNS:
                                        (0123) ;     none.
                                        (0124) ;
                                        (0125) ;  SIDE EFFECTS:
                                        (0126) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0127) ;
                                        (0128) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0129) ;
                                        (0130)  SleepTimer_1_EnableInt:
                                        (0131) _SleepTimer_1_EnableInt:
                                        (0132)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0133)    M8C_EnableIntMask SleepTimer_1_INT_REG, SleepTimer_1_INT_MASK
                                        (0134)    RAM_EPILOGUE RAM_USE_CLASS_1
05F1: 7F       RET                      (0135)    ret
05F2: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0136) .ENDSECTION
                                        (0137) 
                                        (0138)     
                                        (0139) .SECTION
                                        (0140) ;-----------------------------------------------------------------------------
                                        (0141) ;  FUNCTION NAME: SleepTimer_1_DisableInt
                                        (0142) ;
                                        (0143) ;  DESCRIPTION:
                                        (0144) ;     Disables the sleep timer. 
                                        (0145) ;
                                        (0146) ;-----------------------------------------------------------------------------
                                        (0147) ;
                                        (0148) ;  ARGUMENTS:
                                        (0149) ;     none.
                                        (0150) ;
                                        (0151) ;  RETURNS:
                                        (0152) ;     none.
                                        (0153) ;
                                        (0154) ;  SIDE EFFECTS:
                                        (0155) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0156) ;
                                        (0157) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0158) ;
                                        (0159)  SleepTimer_1_DisableInt:
                                        (0160) _SleepTimer_1_DisableInt:
                                        (0161)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0162)    M8C_DisableIntMask SleepTimer_1_INT_REG, SleepTimer_1_INT_MASK
                                        (0163)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0164)    ret
                                        (0165) .ENDSECTION
                                        (0166) 
                                        (0167) 
                                        (0168) .SECTION
                                        (0169) ;-----------------------------------------------------------------------------
                                        (0170) ;  FUNCTION NAME: SleepTimer_1_Start()
                                        (0171) ;
                                        (0172) ;  DESCRIPTION:
                                        (0173) ;     Clears all the variables.  
                                        (0174) ;-----------------------------------------------------------------------------
                                        (0175) ;
                                        (0176) ;  ARGUMENTS:
                                        (0177) ;      none
                                        (0178) ;
                                        (0179) ;  RETURNS:
                                        (0180) ;     none.
                                        (0181) ;
                                        (0182) ;  SIDE EFFECTS;    
                                        (0183) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0184) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0185) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0186) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0187) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0188) ;          
                                        (0189) ;    Page Pointer Registers Modified: 
                                        (0190) ;          CUR_PP
                                        (0191) ;
                                        (0192) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0193) ;
                                        (0194)  SleepTimer_1_Start:
                                        (0195) _SleepTimer_1_Start:
                                        (0196)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0197)    RAM_SETPAGE_CUR >SleepTimer_1_fTick      
05F5: 50 00    MOV   A,0x0              (0198)    mov  A,0
05F7: 53 02    MOV   [ser_c+2],A        (0199)    mov  [SleepTimer_1_fTick],A
05F9: 53 03    MOV   [ser_c+3],A        (0200)    mov  [SleepTimer_1_bTimerValue],A
05FB: 53 04    MOV   [ser_c+4],A        (0201)    mov  [SleepTimer_1_bCountDown],A
05FD: 53 06    MOV   [ser_c+6],A        (0202)    mov  [SleepTimer_1_TickCount + ST_LSB_OFFSET],A        ; Clear TickCount[0:7]
                                        (0203) IF(SleepTimer_1_TICK_CNTR_SIZE & (4|2))
05FF: 53 05    MOV   [ser_c+5],A        (0204)    mov  [SleepTimer_1_TickCount + ST_LSB_OFFSET - 1],A    ; Clear TickCount[8:15]
                                        (0205) ENDIF
                                        (0206) 
                                        (0207) 
                                        (0208) IF(SleepTimer_1_TICK_CNTR_SIZE & 4)
                                        (0209)    mov   [SleepTimer_1_TickCount + ST_LSB_OFFSET - 2],A    ; Clear TickCount[16:31]
                                        (0210)    mov   [SleepTimer_1_TickCount + ST_LSB_OFFSET - 3],A    
                                        (0211) ENDIF
                                        (0212) 
                                        (0213) 
                                        (0214)    RAM_EPILOGUE RAM_USE_CLASS_4
0601: 7F       RET                      (0215)    ret
0602: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0216) .ENDSECTION
                                        (0217) 
                                        (0218) 
                                        (0219) .SECTION
                                        (0220) ;-----------------------------------------------------------------------------
                                        (0221) ;  FUNCTION NAME: SleepTimer_1_Stop
                                        (0222) ;
                                        (0223) ;  DESCRIPTION:
                                        (0224) ;   This function does nothing at this time.  It is only here as a place 
                                        (0225) ;   holder.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;
                                        (0228) ;  ARGUMENTS:
                                        (0229) ;     none.
                                        (0230) ;
                                        (0231) ;  RETURNS:
                                        (0232) ;     none.
                                        (0233) ;
                                        (0234) ;  SIDE EFFECTS:
                                        (0235) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0236) ;
                                        (0237) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0238) ;
                                        (0239)  SleepTimer_1_Stop:
                                        (0240) _SleepTimer_1_Stop:
                                        (0241)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0242)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0243)    ret
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: SleepTimer_1_SetInterval
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Sets sleep timer interval
                                        (0252) ;
                                        (0253) ;-----------------------------------------------------------------------------
                                        (0254) ;
                                        (0255) ;  ARGUMENTS:
                                        (0256) ;     A <= Timer setting
                                        (0257) ;
                                        (0258) ;  RETURNS:
                                        (0259) ;     none.
                                        (0260) ;
                                        (0261) ;  SIDE EFFECTS:
                                        (0262) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0263) ;
                                        (0264) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0265) ;
                                        (0266)  SleepTimer_1_SetInterval:
                                        (0267) _SleepTimer_1_SetInterval:
                                        (0268)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0269)    and  A,SleepTimer_1_CLOCK_MASK               ; Mask off invalid data
                                        (0270)    mov  X, SP
                                        (0271)    push A
                                        (0272)    M8C_SetBank1
                                        (0273)    mov  A, reg[OSC_CR0]                  ; Get current timer value
                                        (0274)    and  A,~SleepTimer_1_CLOCK_MASK   ; Zero out old timer value
                                        (0275)    or   A, [X]                           ; Set new timer values
                                        (0276)    mov  reg[OSC_CR0],A                   ; Write it
                                        (0277)    M8C_SetBank0
                                        (0278)    pop  A
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0280)    ret
                                        (0281) .ENDSECTION
                                        (0282) 
                                        (0283) 
                                        (0284) .SECTION
                                        (0285) ;-----------------------------------------------------------------------------
                                        (0286) ;  FUNCTION NAME: SleepTimer_1_TickWait(BYTE bTicks)
                                        (0287) ;
                                        (0288) ;  DESCRIPTION:
                                        (0289) ;     Wait X Ticks and return
                                        (0290) ;
                                        (0291) ;-----------------------------------------------------------------------------
                                        (0292) ;
                                        (0293) ;  ARGUMENTS:
                                        (0294) ;     A <= Count down time
                                        (0295) ;
                                        (0296) ;  RETURNS:
                                        (0297) ;     none.
                                        (0298) ;
                                        (0299) ;  SIDE EFFECTS;    
                                        (0300) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0301) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0302) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0303) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0304) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0305) ;          
                                        (0306) ;    Page Pointer Registers Modified: 
                                        (0307) ;          CUR_PP
                                        (0308) ;
                                        (0309) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0310) ;
                                        (0311)  SleepTimer_1_TickWait:
                                        (0312) _SleepTimer_1_TickWait:
                                        (0313)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0314)    RAM_SETPAGE_CUR >SleepTimer_1_fTick      
0605: 55 02 00 MOV   [ser_c+2],0x0      (0315)    mov   [SleepTimer_1_fTick],0x00          ; Clear tick flag
                                        (0316) 
                                        (0317) .WaitTick:
0608: 47 02 FF TST   [ser_c+2],0xFF     (0318)    tst   [SleepTimer_1_fTick],0xFF          ; Check for tick 
060B: AF FC    JZ    0x0608             (0319)    jz    .WaitTick
060D: 55 02 00 MOV   [ser_c+2],0x0      (0320)    mov   [SleepTimer_1_fTick],0x00          ; Clear tick flag
0610: 78       DEC   A                  (0321)    dec   A                                      ; Dec the timer variable
0611: BF F6    JNZ   0x0608             (0322)    jnz   .WaitTick                              ; Loop until we count down to zero
                                        (0323) 
                                        (0324)    RAM_EPILOGUE RAM_USE_CLASS_4
0613: 7F       RET                      (0325)    ret
                                        (0326) .ENDSECTION
                                        (0327) 
                                        (0328) 
                                        (0329) .SECTION
                                        (0330) ;-----------------------------------------------------------------------------
                                        (0331) ;  FUNCTION NAME: SleepTimer_1_SyncWait(BYTE bCounts, BYTE fMode)
                                        (0332) ;
                                        (0333) ;  DESCRIPTION:
                                        (0334) ;     This function resets the SyncWait timer.  If fMode = 0, the timer
                                        (0335) ;     is set to the new value then exits the function immediatly.  If fMode
                                        (0336) ;     is set to 1, the firmware waits for the timer to expire before the
                                        (0337) ;     timer is reset and and exits.
                                        (0338) ;
                                        (0339) ;-----------------------------------------------------------------------------
                                        (0340) ;
                                        (0341) ;  ARGUMENTS:
                                        (0342) ;     A <= tCounts to wait
                                        (0343) ;     X <= fMode    fMode = 0  Just reload the value, do not wait
                                        (0344) ;                   fMode = 1  Wait for last value to count down to zero
                                        (0345) ;                              then reload.
                                        (0346) ;
                                        (0347) ;  RETURNS:
                                        (0348) ;     none.
                                        (0349) ;
                                        (0350) ;  SIDE EFFECTS;    
                                        (0351) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0352) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0353) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0354) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0355) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0356) ;          
                                        (0357) ;    Page Pointer Registers Modified: 
                                        (0358) ;          CUR_PP
                                        (0359) ;
                                        (0360) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0361) ;
                                        (0362)  SleepTimer_1_SyncWait:
                                        (0363) _SleepTimer_1_SyncWait:
                                        (0364)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0365)    RAM_SETPAGE_CUR >SleepTimer_1_bCountDown
                                        (0366)    swap  A,X
                                        (0367)    AND   A,SleepTimer_1_FORCE_RELOAD
                                        (0368)    jnz   .ReloadIt
                                        (0369) 
                                        (0370) .WaitLoop:
                                        (0371)    tst   [SleepTimer_1_bCountDown],0xFF
                                        (0372)    jnz   .WaitLoop
                                        (0373) 
                                        (0374) 
                                        (0375) .ReloadIt:
                                        (0376)    swap  A,X
                                        (0377)    mov   [SleepTimer_1_bCountDown],A 
                                        (0378) 
                                        (0379)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0380)    ret
                                        (0381) .ENDSECTION
                                        (0382) 
                                        (0383) 
                                        (0384) 
                                        (0385) .SECTION
                                        (0386) ;-----------------------------------------------------------------------------
                                        (0387) ;  FUNCTION NAME: SleepTimer_1_bGetTickCntr
                                        (0388) ;
                                        (0389) ;  DESCRIPTION:
                                        (0390) ;     Returns the LSB of the tick Counter
                                        (0391) ;
                                        (0392) ;-----------------------------------------------------------------------------
                                        (0393) ;
                                        (0394) ;  ARGUMENTS:
                                        (0395) ;     none
                                        (0396) ;
                                        (0397) ;  RETURNS:
                                        (0398) ;     LSB of lTickCount
                                        (0399) ;
                                        (0400) ;  SIDE EFFECTS;    
                                        (0401) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0402) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0403) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0404) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0405) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0406) ;          
                                        (0407) ;    Page Pointer Registers Modified: 
                                        (0408) ;          CUR_PP
                                        (0409) ;
                                        (0410) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0411) ;
                                        (0412)  SleepTimer_1_bGetTickCntr:
                                        (0413) _SleepTimer_1_bGetTickCntr:
                                        (0414)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0415)    RAM_SETPAGE_CUR >SleepTimer_1_TickCount
                                        (0416)    mov   A,[SleepTimer_1_TickCount + ST_LSB_OFFSET]
                                        (0417)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0418)    ret
                                        (0419) .ENDSECTION
                                        (0420) 
                                        (0421) .SECTION
                                        (0422) ;-----------------------------------------------------------------------------
                                        (0423) ;  FUNCTION NAME: SleepTimer_1_SetTimer
                                        (0424) ;
                                        (0425) ;  DESCRIPTION:
                                        (0426) ;     Set timer with parameter in A
                                        (0427) ;
                                        (0428) ;-----------------------------------------------------------------------------
                                        (0429) ;
                                        (0430) ;  ARGUMENTS:
                                        (0431) ;     A => Value used to set Timer value
                                        (0432) ;
                                        (0433) ;  RETURNS:
                                        (0434) ;     None
                                        (0435) ;
                                        (0436) ;  SIDE EFFECTS;    
                                        (0437) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0438) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0439) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0440) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0441) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0442) ;          
                                        (0443) ;    Page Pointer Registers Modified: 
                                        (0444) ;          CUR_PP
                                        (0445) ;
                                        (0446) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0447) ;
                                        (0448)  SleepTimer_1_SetTimer:
                                        (0449) _SleepTimer_1_SetTimer:
                                        (0450)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0451)    RAM_SETPAGE_CUR >SleepTimer_1_TickCount
                                        (0452)    mov   [SleepTimer_1_bTimerValue],A
                                        (0453)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0454)    ret
                                        (0455) .ENDSECTION
                                        (0456) 
                                        (0457) .SECTION
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;  FUNCTION NAME: SleepTimer_1_bGetTimer
                                        (0460) ;
                                        (0461) ;  DESCRIPTION:
                                        (0462) ;     Returns timer value in A
                                        (0463) ;
                                        (0464) ;-----------------------------------------------------------------------------
                                        (0465) ;
                                        (0466) ;  ARGUMENTS:
                                        (0467) ;     None
                                        (0468) ;
                                        (0469) ;  RETURNS:
                                        (0470) ;     Return timer value in A
                                        (0471) ;
                                        (0472) ;  SIDE EFFECTS;    
                                        (0473) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0474) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0475) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0476) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0477) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0478) ;          
                                        (0479) ;    Page Pointer Registers Modified: 
                                        (0480) ;          CUR_PP
                                        (0481) ;
                                        (0482) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0483) ;
                                        (0484)  SleepTimer_1_bGetTimer:
                                        (0485) _SleepTimer_1_bGetTimer:
                                        (0486)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0487)    RAM_SETPAGE_CUR >SleepTimer_1_TickCount
                                        (0488)    mov   A,[SleepTimer_1_bTimerValue]
                                        (0489)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0490)    ret
                                        (0491) .ENDSECTION
                                        (0492) 
                                        (0493) IF(SleepTimer_1_TICK_CNTR_SIZE & (4|2))
                                        (0494) .SECTION
                                        (0495) ;-----------------------------------------------------------------------------
                                        (0496) ;  FUNCTION NAME: SleepTimer_1_iGetTickCntr
                                        (0497) ;
                                        (0498) ;  DESCRIPTION:
                                        (0499) ;     Returns the least significant 16 bits.
                                        (0500) ;
                                        (0501) ;-----------------------------------------------------------------------------
                                        (0502) ;
                                        (0503) ;  ARGUMENTS:
                                        (0504) ;     none
                                        (0505) ;
                                        (0506) ;  RETURNS:
                                        (0507) ;     (int)TickCount in A and X  
                                        (0508) ;     X  <= MSB
                                        (0509) ;     A  <= LSB
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS;    
                                        (0512) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0513) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0514) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0515) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0516) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0517) ;          
                                        (0518) ;    Page Pointer Registers Modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0522) ;
                                        (0523)  SleepTimer_1_iGetTickCntr:
                                        (0524) _SleepTimer_1_iGetTickCntr:
                                        (0525)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0526)    RAM_SETPAGE_CUR >SleepTimer_1_TickCount
                                        (0527)    ; Disable interrupt here
                                        (0528)    M8C_DisableIntMask SleepTimer_1_INT_REG, SleepTimer_1_INT_MASK
                                        (0529)    mov   A,[SleepTimer_1_TickCount + ST_LSB_OFFSET]    ; Place LSB in A
                                        (0530)    mov   X,[SleepTimer_1_TickCount + ST_LSB_OFFSET - 1]    ; Place MSB in X
                                        (0531)    M8C_EnableIntMask SleepTimer_1_INT_REG, SleepTimer_1_INT_MASK
                                        (0532)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0533)    ret
                                        (0534) .ENDSECTION
                                        (0535) ENDIF
                                        (0536) 
                                        (0537) IF(SleepTimer_1_TICK_CNTR_SIZE & 4)
                                        (0538) .SECTION
                                        (0539) ;-----------------------------------------------------------------------------
                                        (0540) ;  FUNCTION NAME: SleepTimer_1_lGetTickCntr
                                        (0541) ;
                                        (0542) ;  DESCRIPTION:
                                        (0543) ;     Returns a pointer to TickCount
                                        (0544) ;
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;
                                        (0547) ;  ARGUMENTS:
                                        (0548) ;     [A:X] => Pointer to 32 bit tick counter (X=LSB, A=MSB)
                                        (0549) ;
                                        (0550) ;  RETURNS:
                                        (0551) ;     Pointer to lTickCount
                                        (0552) ;
                                        (0553) ;  SIDE EFFECTS;    
                                        (0554) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0555) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0556) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0557) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0558) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0559) ;          
                                        (0560) ;    Page Pointer Registers Modified: 
                                        (0561) ;          CUR_PP
                                        (0562) ;
                                        (0563) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0564) ;
                                        (0565)  SleepTimer_1_lGetTickCntr:
                                        (0566) _SleepTimer_1_lGetTickCntr:
                                        (0567)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0568)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0569)    ; Disable interrupt here
                                        (0570)    M8C_DisableIntMask SleepTimer_1_INT_REG, SleepTimer_1_INT_MASK
                                        (0571)    RAM_SETPAGE_CUR >SleepTimer_1_TickCount
                                        (0572)    RAM_SETPAGE_IDX A
                                        (0573)    push  A
                                        (0574)    mov   A,[SleepTimer_1_TickCount + 0]
                                        (0575)    mov   [X + 0],A
                                        (0576)    mov   A,[SleepTimer_1_TickCount + 1]
                                        (0577)    mov   [X + 1],A
                                        (0578)    mov   A,[SleepTimer_1_TickCount + 2]
                                        (0579)    mov   [X + 2],A
                                        (0580)    mov   A,[SleepTimer_1_TickCount + 3]
                                        (0581)    mov   [X + 3],A
                                        (0582)    pop   A
                                        (0583)    
                                        (0584)    M8C_EnableIntMask SleepTimer_1_INT_REG, SleepTimer_1_INT_MASK
                                        (0585)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0586)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0587)    ret
                                        (0588) .ENDSECTION
                                        (0589) ENDIF
                                        (0590) 
                                        (0591) 
                                        (0592) 
                                        (0593) 
                                        (0594) ; End of File SleepTimer_1.asm
FILE: lib\rx8_1int.asm                  (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: RX8_1INT.asm
                                        (0004) ;;   Version: 3.50, Updated on 2015/3/4 at 22:26:55
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: RX8 Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "RX8_1.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _RX8_1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) IF (RX8_1_RXBUF_ENABLE)
                                        (0025) export  RX8_1_aRxBuffer
                                        (0026) export _RX8_1_aRxBuffer
                                        (0027) export  RX8_1_bRxCnt
                                        (0028) export _RX8_1_bRxCnt
                                        (0029) export  RX8_1_fStatus
                                        (0030) export _RX8_1_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) 
                                        (0038) IF (RX8_1_RXBUF_ENABLE)
                                        (0039) AREA InterruptRAM(RAM,REL,CON)
                                        (0040)  RX8_1_fStatus:
                                        (0041) _RX8_1_fStatus:      BLK  1
                                        (0042)  RX8_1_bRxCnt:
                                        (0043) _RX8_1_bRxCnt:       BLK  1
                                        (0044) AREA RX8_1_RAM(RAM,REL,CON)
                                        (0045)  RX8_1_aRxBuffer:    
                                        (0046) _RX8_1_aRxBuffer:    BLK RX8_1_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) 
                                        (0050) AREA InterruptRAM(RAM,REL,CON)
                                        (0051) 
                                        (0052) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0053) ;---------------------------------------------------
                                        (0054) ; Insert your custom declarations below this banner
                                        (0055) ;---------------------------------------------------
                                        (0056) 
                                        (0057) ;------------------------
                                        (0058) ; Includes
                                        (0059) ;------------------------
                                        (0060) 
                                        (0061) 	
                                        (0062) ;------------------------
                                        (0063) ;  Constant Definitions
                                        (0064) ;------------------------
                                        (0065) 
                                        (0066) 
                                        (0067) ;------------------------
                                        (0068) ; Variable Allocation
                                        (0069) ;------------------------
                                        (0070) 
                                        (0071) 
                                        (0072) ;---------------------------------------------------
                                        (0073) ; Insert your custom declarations above this banner
                                        (0074) ;---------------------------------------------------
                                        (0075) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0076) 
                                        (0077) 
                                        (0078) AREA UserModules (ROM, REL)
                                        (0079) 
                                        (0080) ;-----------------------------------------------------------------------------
                                        (0081) ;  FUNCTION NAME: _RX8_1_ISR
                                        (0082) ;
                                        (0083) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0084) ;
                                        (0085) ;-----------------------------------------------------------------------------
                                        (0086) ;
                                        (0087) 
                                        (0088) _RX8_1_ISR:
                                        (0089) 
                                        (0090)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
0614: 7D 14 3B LJMP  _RX8_1_Interrupt   (0107)    ljmp _RX8_1_Interrupt
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0115) 
                                        (0116)  IF (RX8_1_RXBUF_ENABLE)
                                        (0117)    push A
                                        (0118)    push X
                                        (0119) 
                                        (0120)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0121)       REG_PRESERVE IDX_PP                                  ; Save the IDX_PP register	
                                        (0122)    ENDIF
                                        (0123) 
                                        (0124)    mov  X,[RX8_1_bRxCnt]                                   ; Load X with byte counter
                                        (0125)    mov  A,REG[RX8_1_CONTROL_REG]                           ; Read the control register
                                        (0126)    push A                                                  ; Store copy for later test
                                        (0127)                                                            ; IF real RX interrupt
                                        (0128)    and  A,RX8_1_RX_REG_FULL                                ; Did really really get an IRQ
                                        (0129)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
                                        (0130)    pop  A                                                  ; Restore stack
                                        (0131)    jmp  .RESTORE_IDX_PP
                                        (0132) 
                                        (0133) .UARTRX_ReadRx:
                                        (0134) 
                                        (0135)    pop  A                                                  ; Restore status flags
                                        (0136)                                                            ; IF there is no error, get data
                                        (0137)                                                            ; Check for parity or framing error
                                        (0138)    and  A,RX8_1_RX_ERROR
                                        (0139)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0140) 
                                        (0141)    or   [RX8_1_fStatus],A                                  ; Set error flags (parity,framing,overrun) bits
                                        (0142) 
                                        (0143)    tst  REG[RX8_1_RX_BUFFER_REG], 0x00                     ; Read the data buffer to clear it.
                                        (0144) 
                                        (0145)    and  A,RX8_1_RX_FRAMING_ERROR                           ; Check for framing error special case
                                        (0146)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0147) 
                                        (0148)                                                            ; Disable and re-enable RX to reset after
                                        (0149)                                                            ; framing error.
                                        (0150)    and   REG[RX8_1_CONTROL_REG], ~RX8_1_RX_ENABLE          ; Disable RX
                                        (0151)    or    REG[RX8_1_CONTROL_REG],  RX8_1_RX_ENABLE          ; Enable RX
                                        (0152)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0153) 
                                        (0154) 
                                        (0155) .UARTRX_NO_ERROR:
                                        (0156)    mov  A,REG[RX8_1_RX_BUFFER_REG ]                        ; Read the data buffer
                                        (0157) 
                                        (0158)                                                            ; IF buffer not full
                                        (0159)    tst  [RX8_1_fStatus],RX8_1_RX_BUF_CMDTERM               ; Check for buffer full
                                        (0160)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0161) 
                                        (0162)    cmp  A,RX8_1_CMD_TERM                                   ; Check for End of command
                                        (0163)    jnz  .UARTRX_CHK_CTLCHAR
                                        (0164)    or   [RX8_1_fStatus],RX8_1_RX_BUF_CMDTERM               ; Set command ready bit
                                        (0165) 
                                        (0166)    RAM_SETPAGE_IDX >RX8_1_aRxBuffer
                                        (0167)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0168)    mov  [X + RX8_1_aRxBuffer],00h                          ; Zero out last data
                                        (0169)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0170)    jmp  .RESTORE_IDX_PP
                                        (0171) 
                                        (0172) .UARTRX_CHK_CTLCHAR:                                       ; Ignore charaters below this value
                                        (0173)                                                            ; If ignore char is set to 0x00, do not
                                        (0174)                                                            ; ignore any characters.
                                        (0175) IF(RX8_1_RX_IGNORE_BELOW)
                                        (0176)    cmp  A,RX8_1_RX_IGNORE_BELOW
                                        (0177)    jc   .RESTORE_IDX_PP
                                        (0178) ENDIF
                                        (0179) 
                                        (0180) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0181)    cmp  [RX8_1_bRxCnt],(RX8_1_RX_BUFFER_SIZE - 1)
                                        (0182)    jc   .UARTRX_ISR_GETDATA
                                        (0183)    or   [RX8_1_fStatus],RX8_1_RX_BUF_OVERRUN               ; Set error flags (parity,framing,overrun) bits
                                        (0184) 
                                        (0185)    RAM_SETPAGE_IDX >RX8_1_aRxBuffer             ;   using idexed address mode
                                        (0186)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0187)    mov  [X + RX8_1_aRxBuffer],00h                          ; Zero out last data
                                        (0188)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0189)    jmp  .RESTORE_IDX_PP
                                        (0190) 
                                        (0191)                                                            ; IF input data == "CR", then end of command
                                        (0192) .UARTRX_ISR_GETDATA:
                                        (0193)    inc  X                                                  ; Inc the pointer
                                        (0194)    mov  [RX8_1_bRxCnt],X                                   ; Restore the pointer
                                        (0195)    dec  X                                                  ; Mov X to its original value
                                        (0196) 
                                        (0197)    RAM_SETPAGE_IDX >RX8_1_aRxBuffer             ;   using idexed address mode
                                        (0198)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0199)    mov  [X+RX8_1_aRxBuffer],A                              ; store data in array
                                        (0200)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0201) 
                                        (0202) 
                                        (0203) .RESTORE_IDX_PP:
                                        (0204)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0205)       REG_RESTORE IDX_PP
                                        (0206)    ENDIF
                                        (0207) 
                                        (0208) .END_UARTRX_ISR:
                                        (0209)    pop  X
                                        (0210)    pop  A
                                        (0211) 
                                        (0212) ENDIF
                                        (0213) 
                                        (0214) RX8_1_RX_ISR_END:
0617: 7E       RETI                     (0215)    reti
                                        (0216) 
                                        (0217) 
                                        (0218) ; end of file RX8_1INT.asm
FILE: lib\rx8_1.asm                     (0001) ;;*****************************************************************************
0618: 43 E1 08 OR    REG[0xE1],0x8      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: RX8_1.asm
                                        (0004) ;;   Version: 3.50, Updated on 2015/3/4 at 22:26:55
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: RX8 User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;-----------------------------------------------
                                        (0023) ; include instance specific register definitions
                                        (0024) ;-----------------------------------------------
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "RX8_1.inc"
                                        (0028) 
                                        (0029) 
                                        (0030) ;-----------------------------------------------
                                        (0031) ;  Global Symbols
                                        (0032) ;-----------------------------------------------
                                        (0033) export   RX8_1_EnableInt
                                        (0034) export  _RX8_1_EnableInt
                                        (0035) export   RX8_1_DisableInt
                                        (0036) export  _RX8_1_DisableInt
                                        (0037) export   RX8_1_Start
                                        (0038) export  _RX8_1_Start
                                        (0039) export   RX8_1_Stop
                                        (0040) export  _RX8_1_Stop
                                        (0041) export   RX8_1_bReadRxData
                                        (0042) export  _RX8_1_bReadRxData
                                        (0043) export   RX8_1_bReadRxStatus
                                        (0044) export  _RX8_1_bReadRxStatus
                                        (0045) 
                                        (0046) ; Old function name convension, do not use.
                                        (0047) ; These will be removed in a future release.
                                        (0048) export  bRX8_1_ReadRxData
                                        (0049) export _bRX8_1_ReadRxData
                                        (0050) export  bRX8_1_ReadRxStatus
                                        (0051) export _bRX8_1_ReadRxStatus
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ; High Level RX functions
                                        (0055) ;-----------------------------------------------
                                        (0056) 
                                        (0057) export  RX8_1_cGetChar
                                        (0058) export _RX8_1_cGetChar
                                        (0059) export  RX8_1_cReadChar
                                        (0060) export _RX8_1_cReadChar
                                        (0061) export  RX8_1_iReadChar
                                        (0062) export _RX8_1_iReadChar
                                        (0063) 
                                        (0064) IF (RX8_1_RXBUF_ENABLE)
                                        (0065) export  RX8_1_CmdReset
                                        (0066) export _RX8_1_CmdReset
                                        (0067) export  RX8_1_bCmdCheck
                                        (0068) export _RX8_1_bCmdCheck
                                        (0069) export  RX8_1_bCmdLength
                                        (0070) export _RX8_1_bCmdLength
                                        (0071) export  RX8_1_bErrCheck
                                        (0072) export _RX8_1_bErrCheck
                                        (0073) 
                                        (0074) export  RX8_1_szGetParam
                                        (0075) export _RX8_1_szGetParam
                                        (0076) export  RX8_1_szGetRestOfParams
                                        (0077) export _RX8_1_szGetRestOfParams
                                        (0078) 
                                        (0079) ;-----------------------------------------------
                                        (0080) ;  Variables
                                        (0081) ;-----------------------------------------------
                                        (0082) 
                                        (0083) AREA RX8_1_RAM(RAM,REL,CON)
                                        (0084)  ptrParam:   			BLK  1
                                        (0085) 
                                        (0086) ENDIF
                                        (0087) ;-----------------------------------------------
                                        (0088) ;  EQUATES
                                        (0089) ;-----------------------------------------------
                                        (0090) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                        (0091) 
                                        (0092) area UserModules (ROM, REL)
                                        (0093) 
                                        (0094) .SECTION
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;  FUNCTION NAME: RX8_1_EnableInt
                                        (0097) ;
                                        (0098) ;  DESCRIPTION:
                                        (0099) ;     Enables this receiver's interrupt by setting the interrupt enable mask
                                        (0100) ;     bit associated with this User Module. Remember to call the global interrupt
                                        (0101) ;     enable function by using the macro: M8C_EnableGInt.
                                        (0102) ;
                                        (0103) ;-----------------------------------------------------------------------------
                                        (0104) ;
                                        (0105) ;  ARGUMENTS: none
                                        (0106) ;
                                        (0107) ;  RETURNS: none
                                        (0108) ;
                                        (0109) ;  SIDE EFFECTS:
                                        (0110) ;    The A and X registers may be modified by this or future implementations
                                        (0111) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0112) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0113) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0114) ;    functions.
                                        (0115) ;
                                        (0116)  RX8_1_EnableInt:
                                        (0117) _RX8_1_EnableInt:
                                        (0118)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0119)    M8C_EnableIntMask RX8_1_INT_REG, RX8_1_bINT_MASK
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_1
061B: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) .SECTION
                                        (0125) ;-----------------------------------------------------------------------------
                                        (0126) ;  FUNCTION NAME: RX8_1_DisableInt
                                        (0127) ;
                                        (0128) ;  DESCRIPTION:
                                        (0129) ;     Disables this RX8's interrupt by clearing the interrupt enable mask bit
                                        (0130) ;     associated with this User Module.
                                        (0131) ;
                                        (0132) ;-----------------------------------------------------------------------------
                                        (0133) ;
                                        (0134) ;  ARGUMENTS:  none
                                        (0135) ;
                                        (0136) ;  RETURNS:  none
                                        (0137) ;
                                        (0138) ;  SIDE EFFECTS:
                                        (0139) ;    The A and X registers may be modified by this or future implementations
                                        (0140) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0141) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0142) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0143) ;    functions.
                                        (0144) ;
                                        (0145)  RX8_1_DisableInt:
                                        (0146) _RX8_1_DisableInt:
                                        (0147)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0148)    M8C_DisableIntMask RX8_1_INT_REG, RX8_1_bINT_MASK
                                        (0149)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0150)    ret
                                        (0151) .ENDSECTION
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: RX8_1_Start(BYTE bParity)
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;    Sets the start bit and parity in the Control register of this user module.
                                        (0159) ;
                                        (0160) ;-----------------------------------------------------------------------------
                                        (0161) ;
                                        (0162) ;  ARGUMENTS:
                                        (0163) ;    BYTE bParity - parity of received data.  Use defined masks.
                                        (0164) ;    passed in A register.
                                        (0165) ;
                                        (0166) ;  RETURNS: none
                                        (0167) ;
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  RX8_1_Start:
                                        (0176) _RX8_1_Start:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
061C: 29 01    OR    A,0x1              (0178)    or    A, bfCONTROL_REG_START_BIT
061E: 60 2F    MOV   REG[0x2F],A        (0179)    mov   REG[RX8_1_CONTROL_REG], A
                                        (0180)    RAM_EPILOGUE RAM_USE_CLASS_1
0620: 7F       RET                      (0181)    ret
                                        (0182) .ENDSECTION
                                        (0183) 
                                        (0184) .SECTION
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;  FUNCTION NAME: RX8_1_Stop
                                        (0187) ;
                                        (0188) ;  DESCRIPTION:
                                        (0189) ;     Disables RX8 operation.
                                        (0190) ;
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: none
                                        (0194) ;
                                        (0195) ;  RETURNS: none
                                        (0196) ;
                                        (0197) ;  SIDE EFFECTS:
                                        (0198) ;    The A and X registers may be modified by this or future implementations
                                        (0199) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0200) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0201) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0202) ;    functions.
                                        (0203) ;
                                        (0204)  RX8_1_Stop:
                                        (0205) _RX8_1_Stop:
                                        (0206)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)    and   REG[RX8_1_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0208)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0209)    ret
                                        (0210) .ENDSECTION
                                        (0211) 
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: RX8_1_bReadRxData
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0218) ;     sure data is valid.
                                        (0219) ;
                                        (0220) ;-----------------------------------------------------------------------------
                                        (0221) ;
                                        (0222) ;  ARGUMENTS:  none
                                        (0223) ;
                                        (0224) ;  RETURNS:
                                        (0225) ;    bRxData - returned in A.
                                        (0226) ;
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  RX8_1_bReadRxData:
                                        (0235) _RX8_1_bReadRxData:
                                        (0236)  bRX8_1_ReadRxData:
                                        (0237) _bRX8_1_ReadRxData:
                                        (0238)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0239)    mov A, REG[RX8_1_RX_BUFFER_REG]
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0241)    ret
                                        (0242) .ENDSECTION
                                        (0243) 
                                        (0244) .SECTION
                                        (0245) ;-----------------------------------------------------------------------------
                                        (0246) ;  FUNCTION NAME: RX8_1_bReadRxStatus
                                        (0247) ;
                                        (0248) ;  DESCRIPTION:
                                        (0249) ;    Reads the RX Status bits in the Control/Status register.
                                        (0250) ;
                                        (0251) ;-----------------------------------------------------------------------------
                                        (0252) ;
                                        (0253) ;  ARGUMENTS:  none
                                        (0254) ;
                                        (0255) ;  RETURNS:
                                        (0256) ;     BYTE  bRXStatus - transmit status data.  Use the following defined bits
                                        (0257) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0258) ;
                                        (0259) ;  SIDE EFFECTS:
                                        (0260) ;    The A and X registers may be modified by this or future implementations
                                        (0261) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0262) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0263) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0264) ;    functions.
                                        (0265) ;
                                        (0266)  RX8_1_bReadRxStatus:
                                        (0267) _RX8_1_bReadRxStatus:
                                        (0268)  bRX8_1_ReadRxStatus:
                                        (0269) _bRX8_1_ReadRxStatus:
                                        (0270)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0271)    mov A,  REG[RX8_1_CONTROL_REG]
                                        (0272)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0273)    ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) ;-----------------------------------------------
                                        (0277) ; High Level RX functions
                                        (0278) ;-----------------------------------------------
                                        (0279) 
                                        (0280) .SECTION
                                        (0281) ;-----------------------------------------------------------------------------
                                        (0282) ;  FUNCTION NAME: RX8_1_cGetChar
                                        (0283) ;
                                        (0284) ;  DESCRIPTION:
                                        (0285) ;     Read character from UART RX port.
                                        (0286) ;
                                        (0287) ;
                                        (0288) ;  ARGUMENTS:
                                        (0289) ;      none
                                        (0290) ;
                                        (0291) ;  RETURNS:
                                        (0292) ;     char that is returned from UART
                                        (0293) ;
                                        (0294) ;  SIDE EFFECTS:
                                        (0295) ;    The A and X registers may be modified by this or future implementations
                                        (0296) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0297) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0298) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0299) ;    functions.
                                        (0300) ;    
                                        (0301) ;    Program flow will stay in this function until a character is received.
                                        (0302) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0303) ;    the delay between characters is less than the watchdog timeout.
                                        (0304) ;
                                        (0305)  RX8_1_cGetChar:
                                        (0306) _RX8_1_cGetChar:
                                        (0307)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0308) 
                                        (0309) .getChar_Loop:
0621: 49 2F 08 TST   REG[0x2F],0x8      (0310)    tst REG[RX8_1_CONTROL_REG],RX8_1_RX_REG_FULL  ; Check if a character is ready
0624: AF FC    JZ    RX8_1_cGetChar|bRX8_1_ReadRxStatus|bRX8_1_ReadRxData|_bRX8_1_ReadRxData|_RX8_1_Stop|_RX8_1_bReadRxStatus|_RX8_1_bReadRxData|_bRX8_1_ReadRxStatus|_RX8_1_cGetChar(0311)    jz  .getChar_Loop                                        ; If not loop
                                        (0312) 
0626: 5D 2E    MOV   A,REG[0x2E]        (0313)    mov A, REG[RX8_1_RX_BUFFER_REG]               ; Get character
                                        (0314)    RAM_EPILOGUE RAM_USE_CLASS_1
0628: 7F       RET                      (0315)    ret
                                        (0316) .ENDSECTION
                                        (0317) 
                                        (0318) .SECTION
                                        (0319) ;-----------------------------------------------------------------------------
                                        (0320) ;  FUNCTION NAME: RX8_1_cReadChar
                                        (0321) ;
                                        (0322) ;  DESCRIPTION:
                                        (0323) ;     Read character from UART RX port.
                                        (0324) ;
                                        (0325) ;  ARGUMENTS:
                                        (0326) ;      none
                                        (0327) ;
                                        (0328) ;  RETURNS:
                                        (0329) ;     char that is returned from UART
                                        (0330) ;
                                        (0331) ;  SIDE EFFECTS:
                                        (0332) ;    The A and X registers may be modified by this or future implementations
                                        (0333) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0334) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0335) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0336) ;    functions.
                                        (0337) ;
                                        (0338) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0339) ;    implies a valid character or an error condition occured.
                                        (0340) ;
                                        (0341)  RX8_1_cReadChar:
                                        (0342) _RX8_1_cReadChar:
                                        (0343)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0344) 
                                        (0345)    mov  A,REG[RX8_1_CONTROL_REG]                           ; Get Status of RX
                                        (0346)    push A
                                        (0347)    and  A,RX8_1_RX_COMPLETE                                ; Check if a character is ready
                                        (0348)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
                                        (0349)    pop  A
                                        (0350)    jmp  .RX_NO_VALID_CHAR
                                        (0351) 
                                        (0352) .RX_DATA_RDY:
                                        (0353)    mov  A,REG[RX8_1_RX_BUFFER_REG]                         ; Read data first, then
                                        (0354)    swap A,X                                                ; determine if data is valid
                                        (0355) 
                                        (0356)    pop  A                                                  ; Check for errors
                                        (0357)    and  A,(RX8_1_RX_PARITY_ERROR | RX8_1_RX_FRAMING_ERROR)
                                        (0358)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
                                        (0359)    swap A,X                                                ; Put data in A and exit
                                        (0360)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0361)    ret
                                        (0362) 
                                        (0363) .RX_NO_VALID_CHAR:
                                        (0364)    mov A,0x00                                              ; Zero out character
                                        (0365) 
                                        (0366)  End_RX8_1_cReadChar:
                                        (0367)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0368)    ret
                                        (0369) .ENDSECTION
                                        (0370) 																			
                                        (0371) .SECTION
                                        (0372) ;-----------------------------------------------------------------------------
                                        (0373) ;  FUNCTION NAME: RX8_1_iReadChar
                                        (0374) ;
                                        (0375) ; WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0376) ; to just set a value in the upper byte if error conditions exists.
                                        (0377) ;
                                        (0378) ;  DESCRIPTION:
                                        (0379) ;     Read character from UART RX port.
                                        (0380) ;
                                        (0381) ;  ARGUMENTS:
                                        (0382) ;      none
                                        (0383) ;
                                        (0384) ;  RETURNS:
                                        (0385) ;     An integer value is returned.  A negative value inplies and error
                                        (0386) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0387) ;
                                        (0388) ;     Error Codes:
                                        (0389) ;        0x80CC    Parity Error
                                        (0390) ;        0x40CC    Overrun Error
                                        (0391) ;        0x20CC    Framing Error
                                        (0392) ;        0x01CC    No Data available
                                        (0393) ;
                                        (0394) ;  SIDE EFFECTS:
                                        (0395) ;    The A and X registers may be modified by this or future implementations
                                        (0396) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0397) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0398) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0399) ;    functions.
                                        (0400) ;
                                        (0401)  RX8_1_iReadChar:
                                        (0402) _RX8_1_iReadChar:
                                        (0403)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0404) 
                                        (0405)    mov  A,REG[RX8_1_CONTROL_REG]                           ; Get Status of RX
                                        (0406)                                                            ; Mask only errors and data ready
                                        (0407)    and  A,(RX8_1_RX_ERROR|RX8_1_RX_REG_FULL)
                                        (0408)    push A
                                        (0409)    and  A,RX8_1_RX_COMPLETE                                ; Check if a character is ready
                                        (0410)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
                                        (0411)    pop  A
                                        (0412)    or   A,RX8_1_RX_NO_DATA                                 ; Add no data flag
                                        (0413)    swap A,X
                                        (0414)    jmp  End_RX8_1_iReadChar
                                        (0415) 
                                        (0416) .RX_GET_DATA:
                                        (0417)    pop  A
                                        (0418)    and  A,RX8_1_RX_ERROR
                                        (0419)    swap A,X
                                        (0420)    mov  A,REG[RX8_1_RX_BUFFER_REG]                         ; Read data first, then
                                        (0421)                                                            ; determine if data is valid
                                        (0422) 
                                        (0423)  End_RX8_1_iReadChar:
                                        (0424)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0425)    ret
                                        (0426) .ENDSECTION
                                        (0427) 
                                        (0428) 
                                        (0429) 
                                        (0430) IF (RX8_1_RXBUF_ENABLE)
                                        (0431) .SECTION
                                        (0432) ;-----------------------------------------------------------------------------
                                        (0433) ;-----------------------------------------------------------------------------
                                        (0434) ;
                                        (0435) ;     Command Buffer commands
                                        (0436) ;
                                        (0437) ;-----------------------------------------------------------------------------
                                        (0438) ;-----------------------------------------------------------------------------
                                        (0439) 
                                        (0440) ;-----------------------------------------------------------------------------
                                        (0441) ;  FUNCTION NAME: RX8_1_CmdReset
                                        (0442) ;
                                        (0443) ;  DESCRIPTION:
                                        (0444) ;     Reset command string and status flags
                                        (0445) ;
                                        (0446) ;  ARGUMENTS:
                                        (0447) ;     none.
                                        (0448) ;
                                        (0449) ;  RETURNS:
                                        (0450) ;     none.
                                        (0451) ;
                                        (0452) ;  SIDE EFFECTS:
                                        (0453) ;    The A and X registers may be modified by this or future implementations
                                        (0454) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0455) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0456) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0457) ;    functions.
                                        (0458) ;          
                                        (0459) ;    Currently only the page pointer registers listed below are modified: 
                                        (0460) ;          CUR_PP
                                        (0461) ;
                                        (0462) ;  THEORY of OPERATION or PROCEDURE:
                                        (0463) ;     Clear the command buffer, command counter, and flag.
                                        (0464) ;
                                        (0465)  RX8_1_CmdReset:
                                        (0466) _RX8_1_CmdReset:
                                        (0467)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0468)    RAM_SETPAGE_CUR >RX8_1_aRxBuffer
                                        (0469)    mov [RX8_1_aRxBuffer], 0x00
                                        (0470)    RAM_SETPAGE_CUR >ptrParam
                                        (0471)    mov [ptrParam],0x00
                                        (0472)    RAM_SETPAGE_CUR >RX8_1_bRxCnt
                                        (0473)    mov [RX8_1_bRxCnt], 0x00
                                        (0474)    and [RX8_1_fStatus], 0x00
                                        (0475)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0476)    ret
                                        (0477) .ENDSECTION
                                        (0478) 
                                        (0479) .SECTION
                                        (0480) ;-----------------------------------------------------------------------------
                                        (0481) ;  FUNCTION NAME: RX8_1_bCmdCheck
                                        (0482) ;
                                        (0483) ;  DESCRIPTION:
                                        (0484) ;     Check to see if valid command in buffer.
                                        (0485) ;
                                        (0486) ;  ARGUMENTS:
                                        (0487) ;     none.
                                        (0488) ;
                                        (0489) ;  RETURNS:
                                        (0490) ;     BYTE  fStatus - Status of command receive buffer.
                                        (0491) ;                     Returns non-zero value in A if command is valid.
                                        (0492) ;
                                        (0493) ;  SIDE EFFECTS:
                                        (0494) ;    The A and X registers may be modified by this or future implementations
                                        (0495) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0496) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0497) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0498) ;    functions.
                                        (0499) ;          
                                        (0500) ;    Currently only the page pointer registers listed below are modified: 
                                        (0501) ;          CUR_PP
                                        (0502) ;
                                        (0503) ;  THEORY of OPERATION or PROCEDURE:
                                        (0504) ;     Read the status and control register.
                                        (0505) ;
                                        (0506)  RX8_1_bCmdCheck:
                                        (0507) _RX8_1_bCmdCheck:
                                        (0508)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0509)    RAM_SETPAGE_CUR >RX8_1_fStatus
                                        (0510)    mov A,  [RX8_1_fStatus]
                                        (0511)    and A, RX8_1_RX_BUF_CMDTERM                   ; Mask off Command status
                                        (0512)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0513)    ret
                                        (0514) .ENDSECTION
                                        (0515) 
                                        (0516) .SECTION
                                        (0517) ;-----------------------------------------------------------------------------
                                        (0518) ;  FUNCTION NAME: RX8_1_bErrCheck
                                        (0519) ;
                                        (0520) ;  DESCRIPTION:
                                        (0521) ;     Check to see if an error has occured since last CmdReset
                                        (0522) ;
                                        (0523) ;  ARGUMENTS:
                                        (0524) ;     none.
                                        (0525) ;
                                        (0526) ;  RETURNS:
                                        (0527) ;     BYTE  fStatus - Status of command receive buffer.
                                        (0528) ;                     Returns non-zero value in A if command is valid.
                                        (0529) ;           0x80 => Parity Error
                                        (0530) ;           0x40 => OverRun Error
                                        (0531) ;           0x20 => Framing Error
                                        (0532) ;           0x10 => Software Buffer OverRun
                                        (0533) ;
                                        (0534) ;  SIDE EFFECTS:
                                        (0535) ;    The A and X registers may be modified by this or future implementations
                                        (0536) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0537) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0538) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0539) ;    functions.
                                        (0540) ;          
                                        (0541) ;    Currently only the page pointer registers listed below are modified: 
                                        (0542) ;          CUR_PP
                                        (0543) ;
                                        (0544) ;     Error Status is clear when read.
                                        (0545) ;
                                        (0546) ;  THEORY of OPERATION or PROCEDURE:
                                        (0547) ;     Read RX buffer error status and clear status
                                        (0548) ;
                                        (0549)  RX8_1_bErrCheck:
                                        (0550) _RX8_1_bErrCheck:
                                        (0551)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0552)    RAM_SETPAGE_CUR >RX8_1_fStatus
                                        (0553)    mov A,  [RX8_1_fStatus]
                                        (0554)    and A, RX8_1_RX_BUF_ERROR                     ; Mask off Error status
                                        (0555)    and [RX8_1_fStatus], ~RX8_1_RX_BUF_ERROR
                                        (0556)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0557)    ret
                                        (0558) .ENDSECTION
                                        (0559) 
                                        (0560) .SECTION
                                        (0561) ;-----------------------------------------------------------------------------
                                        (0562) ;  FUNCTION NAME: RX8_1_bCmdLength
                                        (0563) ;
                                        (0564) ;  DESCRIPTION:
                                        (0565) ;     Get length of command string
                                        (0566) ;
                                        (0567) ;  ARGUMENTS:
                                        (0568) ;     none.
                                        (0569) ;
                                        (0570) ;  RETURNS:
                                        (0571) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (0572) ;
                                        (0573) ;  SIDE EFFECTS:
                                        (0574) ;    The A and X registers may be modified by this or future implementations
                                        (0575) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0576) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0577) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0578) ;    functions.
                                        (0579) ;          
                                        (0580) ;    Currently only the page pointer registers listed below are modified: 
                                        (0581) ;          CUR_PP
                                        (0582) ;
                                        (0583)  RX8_1_bCmdLength:
                                        (0584) _RX8_1_bCmdLength:
                                        (0585)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0586)    RAM_SETPAGE_CUR >RX8_1_bRxCnt
                                        (0587)    mov A,  [RX8_1_bRxCnt]
                                        (0588)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0589)    ret
                                        (0590) .ENDSECTION
                                        (0591) 
                                        (0592) .SECTION
                                        (0593) ;-----------------------------------------------------------------------------
                                        (0594) ;  FUNCTION NAME: RX8_1_szGetParam
                                        (0595) ;
                                        (0596) ;  DESCRIPTION:
                                        (0597) ;      Return next parameter from UART Rx buffer
                                        (0598) ;
                                        (0599) ;
                                        (0600) ;  ARGUMENTS:  none
                                        (0601) ;
                                        (0602) ;  RETURNS:
                                        (0603) ;     A => MSB of parameter address
                                        (0604) ;     X => LSB of parameter address
                                        (0605) ;
                                        (0606) ;  SIDE EFFECTS:
                                        (0607) ;    The A and X registers may be modified by this or future implementations
                                        (0608) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0609) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0610) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0611) ;    functions.
                                        (0612) ;          
                                        (0613) ;    Currently only the page pointer registers listed below are modified:
                                        (0614) ;          CUR_PP
                                        (0615) ;          IDX_PP
                                        (0616) ;
                                        (0617) ;     The receive string is modified by placing Null characters at the end
                                        (0618) ;     of each parameter as they are recovered.
                                        (0619) ;
                                        (0620) ;  THEORY OF OPERATION:
                                        (0621) ;     This function is a stateful generator of addresses to the "parameters"
                                        (0622) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (0623) ;     each lexically distinct element into a null-terminated string by replacing
                                        (0624) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (0625) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (0626) ;     offset. The generator is initialized by a call to the function
                                        (0627) ;     RX8_1_CmdReset which resets the entire buffer to the 'empty'
                                        (0628) ;     state. Typically this function, RX8_1_szGetParam, is
                                        (0629) ;     not called until the buffer has been loaded with an entire command
                                        (0630) ;     (See RX8_1_bCmdCheck).
                                        (0631) ;
                                        (0632) ;     Note, there is no special distinction between the "command" and the 
                                        (0633) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (0634) ;     character of the "command"---is also, for the purposes of this function,
                                        (0635) ;     the first "parameter" to which it returns an address.
                                        (0636) ;
                                        (0637) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (0638) ;     is determined at configuration time by a user module parameter.
                                        (0639) ;
                                        (0640)  RX8_1_szGetParam:
                                        (0641) _RX8_1_szGetParam:
                                        (0642)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0643)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0644)    RAM_SETPAGE_CUR >ptrParam
                                        (0645)    RAM_SETPAGE_IDX >RX8_1_aRxBuffer
                                        (0646) 
                                        (0647)    mov  A, <RX8_1_aRxBuffer                 ; Get address to receive buffer
                                        (0648)    add  A, [ptrParam]                      ; Add string offset
                                        (0649)    mov  X,A
                                        (0650) 
                                        (0651)    mov  A,[X]                              ; Get character pointed by X
                                        (0652)    jnz  .CheckForDelim                     ; Check for Null character
                                        (0653)    push X                                  ; Save LSB of current pointer
                                        (0654)    jmp  .End_GetNextParam
                                        (0655) 
                                        (0656)                                             ; Check for delimiter and keep looping until
                                        (0657)                                             ; all leading delimiters have been found.
                                        (0658) .CheckForDelim:
                                        (0659)     cmp  A,RX8_1_DELIMITER                  ; Check if we have a delimiter
                                        (0660)     jnz  .ParamStartFound
                                        (0661)     inc  X                                  ; Increment both current pointer and
                                        (0662)     inc  [ptrParam]                         ; stored pointer.
                                        (0663)     mov  A,[X]                              ; Get character pointed by X
                                        (0664)     cmp  [ptrParam],(RX8_1_RX_BUFFER_SIZE -1)  ; Check if we are at the end of buffer
                                        (0665)     jnz  .CheckForDelim
                                        (0666)                                             ; End of string found
                                        (0667) .EndOfString:
                                        (0668)     push X                                  ; Save ptr
                                        (0669) .TerminateString:
                                        (0670)     mov  [X],0x00                           ; Make sure string is zero
                                        (0671)     jmp  .End_GetNextParam
                                        (0672) 
                                        (0673) .ParamStartFound:
                                        (0674)     push X                                  ; Beginning of parameter found, save pointer
                                        (0675) 
                                        (0676) .ParamLoop:
                                        (0677)                                             ; Now loop until end of parameter found.
                                        (0678)     inc  X                                  ; Advance pointers.
                                        (0679)     inc  [ptrParam]
                                        (0680)     cmp  [ptrParam],(RX8_1_RX_BUFFER_SIZE -1)  ; Check if we are at the end of buffer
                                        (0681)     jz   .TerminateString
                                        (0682)     mov  A,[X]                              ; Get next character
                                        (0683)     jz   .End_GetNextParam
                                        (0684)     cmp  A,RX8_1_DELIMITER                  ; Check if we have a delimiter
                                        (0685)     jnz  .ParamLoop                         ; Still no delimiter, loop again
                                        (0686) 
                                        (0687)     mov  [X],0x00                           ; Replace delimiter with null for end of substring
                                        (0688)     inc  [ptrParam]
                                        (0689)     cmp  [ptrParam],(RX8_1_RX_BUFFER_SIZE -1)  ; Check if we are at the end of buffer
                                        (0690)     jnz  .End_GetNextParam                  ; If not end of string leave
                                        (0691)     mov  [ptrParam],(RX8_1_RX_BUFFER_SIZE -1)  ; Reset pointer to end of string.
                                        (0692) 
                                        (0693) 
                                        (0694) .End_GetNextParam:
                                        (0695)    pop  X
                                        (0696)    push X
                                        (0697)    cmp  [X],0x00
                                        (0698)    jnz  .NotNullString
                                        (0699)    pop  X
                                        (0700)    mov  X,0x00
                                        (0701)    mov  A,X
                                        (0702)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0703)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0704)    ret
                                        (0705) 
                                        (0706) .NotNullString:
                                        (0707)    pop  X
                                        (0708)    mov  A,>RX8_1_aRxBuffer                     ; Return pointer
                                        (0709)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0710)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0711)    ret
                                        (0712) .ENDSECTION
                                        (0713) 
                                        (0714) .SECTION
                                        (0715) ;-----------------------------------------------------------------------------
                                        (0716) ;  FUNCTION NAME: RX8_1_szGetRestOfParams
                                        (0717) ;
                                        (0718) ;  DESCRIPTION:
                                        (0719) ;      Return the rest of the UART RX buffer
                                        (0720) ;
                                        (0721) ;
                                        (0722) ;  ARGUMENTS:  none
                                        (0723) ;
                                        (0724) ;  RETURNS:
                                        (0725) ;     A => MSB of parameter
                                        (0726) ;     X => LSB of parameter
                                        (0727) ;
                                        (0728) ;  SIDE EFFECTS:
                                        (0729) ;    The A and X registers may be modified by this or future implementations
                                        (0730) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0731) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0732) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0733) ;    functions.
                                        (0734) ;          
                                        (0735) ;    Currently only the page pointer registers listed below are modified: 
                                        (0736) ;          CUR_PP
                                        (0737) ;
                                        (0738)  RX8_1_szGetRestOfParams:
                                        (0739) _RX8_1_szGetRestOfParams:
                                        (0740)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0741)    RAM_SETPAGE_CUR >ptrParam
                                        (0742) 
                                        (0743)     mov  A, <RX8_1_aRxBuffer                ; Get address to receive buffer
                                        (0744)     add  A, [ptrParam]                      ; Add string offset
                                        (0745)     mov  X,A
                                        (0746)     mov  A,>RX8_1_aRxBuffer                 ; Return pointer
                                        (0747) 
                                        (0748)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0749)     ret
                                        (0750) .ENDSECTION
                                        (0751) 
                                        (0752) ENDIF
                                        (0753) ; End of File RX8_1.asm
FILE: lib\rst.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   RST.asm
                                        (0004) ;;  Version: 2.00, Updated on 2015/3/4 at 22:26:37
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "RST.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _RST_Start
                                        (0027) export  RST_Start
                                        (0028) 
                                        (0029) export _RST_Stop
                                        (0030) export  RST_Stop
                                        (0031) 
                                        (0032) export _RST_On
                                        (0033) export  RST_On
                                        (0034) 
                                        (0035) export _RST_Off
                                        (0036) export  RST_Off
                                        (0037) 
                                        (0038) export _RST_Switch
                                        (0039) export  RST_Switch
                                        (0040) 
                                        (0041) export _RST_Invert
                                        (0042) export  RST_Invert
                                        (0043) 
                                        (0044) export _RST_GetState
                                        (0045) export  RST_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: RST_Start(void)
                                        (0054) ;  FUNCTION NAME: RST_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: RST_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _RST_On:
                                        (0079)  RST_On:
0629: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
062B: 80 03    JMP   _RST_Switch        (0081)    jmp  RST_Switch 
                                        (0082) 
                                        (0083) _RST_Start:
                                        (0084)  RST_Start:
                                        (0085) _RST_Stop:
                                        (0086)  RST_Stop:
                                        (0087) _RST_Off:
                                        (0088)  RST_Off:
062D: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
062F: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0090) 
                                        (0091) _RST_Switch:
                                        (0092)  RST_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0096) 
0632: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
0634: A0 06    JZ    0x063B             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(1)                                            ; Active High Digit Drive
0636: 2E 07 10 OR    [ser_c+7],0x10     (0102)    or   [Port_0_Data_SHADE],RST_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
                                        (0104)    and  [Port_0_Data_SHADE],~RST_PinMask
                                        (0105) ENDIF
0639: 80 04    JMP   0x063E             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(1)                      ; Active High Digit Drive
063B: 26 07 EF AND   [ser_c+7],0xEF     (0110)    and  [Port_0_Data_SHADE],~RST_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
                                        (0112)    or   [Port_0_Data_SHADE],RST_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
063E: 51 07    MOV   A,[ser_c+7]        (0116)    mov  A,[Port_0_Data_SHADE]
0640: 60 00    MOV   REG[0x0],A         (0117)    mov  reg[RST_PortDR],A
0642: 70 3F    AND   F,0x3F             
0644: 71 C0    OR    F,0xC0             
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
0646: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: RST_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _RST_Invert:
                                        (0144)  RST_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0148) 
                                        (0149)    xor  [Port_0_Data_SHADE],RST_PinMask
                                        (0150)    mov  A,[Port_0_Data_SHADE]
                                        (0151)    mov  reg[RST_PortDR],A
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: RST_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _RST_GetState:
                                        (0177)  RST_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0181) 
                                        (0182)    mov   A,[Port_0_Data_SHADE]         ; Get shade value
                                        (0183) IF(1)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
                                        (0188)    and   A,RST_PinMask                 ; Mask off the trash
                                        (0189)    jz    .End_LED_GS                   ; If zero, we're done
                                        (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0195)    ret
                                        (0196) .ENDSECTION
FILE: lib\led_1.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED_1.asm
                                        (0004) ;;  Version: 2.00, Updated on 2015/3/4 at 22:26:37
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "LED_1.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _LED_1_Start
                                        (0027) export  LED_1_Start
                                        (0028) 
                                        (0029) export _LED_1_Stop
                                        (0030) export  LED_1_Stop
                                        (0031) 
                                        (0032) export _LED_1_On
                                        (0033) export  LED_1_On
                                        (0034) 
                                        (0035) export _LED_1_Off
                                        (0036) export  LED_1_Off
                                        (0037) 
                                        (0038) export _LED_1_Switch
                                        (0039) export  LED_1_Switch
                                        (0040) 
                                        (0041) export _LED_1_Invert
                                        (0042) export  LED_1_Invert
                                        (0043) 
                                        (0044) export _LED_1_GetState
                                        (0045) export  LED_1_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: LED_1_Start(void)
                                        (0054) ;  FUNCTION NAME: LED_1_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: LED_1_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _LED_1_On:
                                        (0079)  LED_1_On:
                                        (0080)    mov  A,0x01
                                        (0081)    jmp  LED_1_Switch 
                                        (0082) 
                                        (0083) _LED_1_Start:
                                        (0084)  LED_1_Start:
                                        (0085) _LED_1_Stop:
                                        (0086)  LED_1_Stop:
                                        (0087) _LED_1_Off:
                                        (0088)  LED_1_Off:
0647: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
0649: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0090) 
                                        (0091) _LED_1_Switch:
                                        (0092)  LED_1_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_3_Data_SHADE
                                        (0096) 
064C: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
064E: A0 06    JZ    0x0655             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(0)                                            ; Active High Digit Drive
                                        (0102)    or   [Port_3_Data_SHADE],LED_1_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
0650: 26 09 FE AND   [ser_c+9],0xFE     (0104)    and  [Port_3_Data_SHADE],~LED_1_PinMask
                                        (0105) ENDIF
0653: 80 04    JMP   0x0658             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(0)                      ; Active High Digit Drive
                                        (0110)    and  [Port_3_Data_SHADE],~LED_1_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
0655: 2E 09 01 OR    [ser_c+9],0x1      (0112)    or   [Port_3_Data_SHADE],LED_1_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
0658: 51 09    MOV   A,[ser_c+9]        (0116)    mov  A,[Port_3_Data_SHADE]
065A: 60 0C    MOV   REG[0xC],A         (0117)    mov  reg[LED_1_PortDR],A
065C: 70 3F    AND   F,0x3F             
065E: 71 C0    OR    F,0xC0             
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
0660: 7F       RET                      (0121)    ret
0661: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: LED_1_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _LED_1_Invert:
                                        (0144)  LED_1_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_3_Data_SHADE
                                        (0148) 
0664: 36 09 01 XOR   [ser_c+9],0x1      (0149)    xor  [Port_3_Data_SHADE],LED_1_PinMask
0667: 51 09    MOV   A,[ser_c+9]        (0150)    mov  A,[Port_3_Data_SHADE]
0669: 60 0C    MOV   REG[0xC],A         (0151)    mov  reg[LED_1_PortDR],A
066B: 70 3F    AND   F,0x3F             
066D: 71 C0    OR    F,0xC0             
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
066F: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: LED_1_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _LED_1_GetState:
                                        (0177)  LED_1_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_3_Data_SHADE
                                        (0181) 
                                        (0182)    mov   A,[Port_3_Data_SHADE]         ; Get shade value
                                        (0183) IF(0)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
                                        (0188)    and   A,LED_1_PinMask               ; Mask off the trash
                                        (0189)    jz    .End_LED_GS                   ; If zero, we're done
                                        (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0195)    ret
                                        (0196) .ENDSECTION
FILE: lib\cs_pin.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   CS_PIN.asm
                                        (0004) ;;  Version: 2.00, Updated on 2015/3/4 at 22:26:37
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "CS_PIN.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _CS_PIN_Start
                                        (0027) export  CS_PIN_Start
                                        (0028) 
                                        (0029) export _CS_PIN_Stop
                                        (0030) export  CS_PIN_Stop
                                        (0031) 
                                        (0032) export _CS_PIN_On
                                        (0033) export  CS_PIN_On
                                        (0034) 
                                        (0035) export _CS_PIN_Off
                                        (0036) export  CS_PIN_Off
                                        (0037) 
                                        (0038) export _CS_PIN_Switch
                                        (0039) export  CS_PIN_Switch
                                        (0040) 
                                        (0041) export _CS_PIN_Invert
                                        (0042) export  CS_PIN_Invert
                                        (0043) 
                                        (0044) export _CS_PIN_GetState
                                        (0045) export  CS_PIN_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: CS_PIN_Start(void)
                                        (0054) ;  FUNCTION NAME: CS_PIN_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: CS_PIN_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _CS_PIN_On:
                                        (0079)  CS_PIN_On:
0670: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
0672: 80 03    JMP   _CS_PIN_Switch     (0081)    jmp  CS_PIN_Switch 
                                        (0082) 
                                        (0083) _CS_PIN_Start:
                                        (0084)  CS_PIN_Start:
                                        (0085) _CS_PIN_Stop:
                                        (0086)  CS_PIN_Stop:
                                        (0087) _CS_PIN_Off:
                                        (0088)  CS_PIN_Off:
0674: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
0676: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0090) 
                                        (0091) _CS_PIN_Switch:
                                        (0092)  CS_PIN_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0096) 
0679: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
067B: A0 06    JZ    0x0682             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(1)                                            ; Active High Digit Drive
067D: 2E 07 80 OR    [ser_c+7],0x80     (0102)    or   [Port_0_Data_SHADE],CS_PIN_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
                                        (0104)    and  [Port_0_Data_SHADE],~CS_PIN_PinMask
                                        (0105) ENDIF
0680: 80 04    JMP   0x0685             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(1)                      ; Active High Digit Drive
0682: 26 07 7F AND   [ser_c+7],0x7F     (0110)    and  [Port_0_Data_SHADE],~CS_PIN_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
                                        (0112)    or   [Port_0_Data_SHADE],CS_PIN_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
0685: 51 07    MOV   A,[ser_c+7]        (0116)    mov  A,[Port_0_Data_SHADE]
0687: 60 00    MOV   REG[0x0],A         (0117)    mov  reg[CS_PIN_PortDR],A
0689: 70 3F    AND   F,0x3F             
068B: 71 C0    OR    F,0xC0             
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
068D: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: CS_PIN_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _CS_PIN_Invert:
                                        (0144)  CS_PIN_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0148) 
                                        (0149)    xor  [Port_0_Data_SHADE],CS_PIN_PinMask
                                        (0150)    mov  A,[Port_0_Data_SHADE]
                                        (0151)    mov  reg[CS_PIN_PortDR],A
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: CS_PIN_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _CS_PIN_GetState:
                                        (0177)  CS_PIN_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0181) 
                                        (0182)    mov   A,[Port_0_Data_SHADE]         ; Get shade value
                                        (0183) IF(1)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
                                        (0188)    and   A,CS_PIN_PinMask              ; Mask off the trash
                                        (0189)    jz    .End_LED_GS                   ; If zero, we're done
                                        (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0195)    ret
                                        (0196) .ENDSECTION
FILE: lib\counter16_1int.asm            (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Counter16_1INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:23:43
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Counter16_1.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Counter16_1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Counter16_1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Counter16_1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
068E: 7D 16 7F LJMP  _Counter16_1_Interrupt(0081)    ljmp _Counter16_1_Interrupt
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0691: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file Counter16_1INT.asm
FILE: lib\counter16_1.asm               (0001) ;;*****************************************************************************
0692: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Counter16_1.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:23:43
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Counter16_1.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Counter16_1_EnableInt
                                        (0030) export _Counter16_1_EnableInt
                                        (0031) export  Counter16_1_DisableInt
                                        (0032) export _Counter16_1_DisableInt
                                        (0033) export  Counter16_1_Start
                                        (0034) export _Counter16_1_Start
                                        (0035) export  Counter16_1_Stop
                                        (0036) export _Counter16_1_Stop
                                        (0037) export  Counter16_1_WritePeriod
                                        (0038) export _Counter16_1_WritePeriod
                                        (0039) export  Counter16_1_WriteCompareValue
                                        (0040) export _Counter16_1_WriteCompareValue
                                        (0041) export  Counter16_1_wReadCompareValue
                                        (0042) export _Counter16_1_wReadCompareValue
                                        (0043) export  Counter16_1_wReadCounter
                                        (0044) export _Counter16_1_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wCounter16_1_ReadCompareValue  ; deprecated
                                        (0049) export _wCounter16_1_ReadCompareValue  ; deprecated
                                        (0050) export  wCounter16_1_ReadCounter       ; deprecated
                                        (0051) export _wCounter16_1_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ;  Constant Definitions
                                        (0055) ;-----------------------------------------------
                                        (0056) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0057) 
                                        (0058) 
                                        (0059) AREA UserModules (ROM, REL)
                                        (0060) 
                                        (0061) .SECTION
                                        (0062) ;-----------------------------------------------------------------------------
                                        (0063) ;  FUNCTION NAME: Counter16_1_EnableInt
                                        (0064) ;
                                        (0065) ;  DESCRIPTION:
                                        (0066) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                        (0067) ;     associated with this User Module. This function has no effect until and
                                        (0068) ;     unless the global interrupts are enabled (for example by using the
                                        (0069) ;     macro M8C_EnableGInt).
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:    None.
                                        (0073) ;  RETURNS:      Nothing.
                                        (0074) ;  SIDE EFFECTS: 
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  Counter16_1_EnableInt:
                                        (0082) _Counter16_1_EnableInt:
                                        (0083)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0084)    Counter16_1_EnableInt_M
                                        (0085)    RAM_EPILOGUE RAM_USE_CLASS_1
0695: 7F       RET                      (0086)    ret
0696: 43 23 01 OR    REG[0x23],0x1      
                                        (0087) 
                                        (0088) .ENDSECTION
                                        (0089) 
                                        (0090) .SECTION
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;  FUNCTION NAME: Counter16_1_DisableInt
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;     Disables this counter's interrupt by clearing the interrupt enable
                                        (0096) ;     mask bit associated with this User Module.
                                        (0097) ;-----------------------------------------------------------------------------
                                        (0098) ;
                                        (0099) ;  ARGUMENTS:    None
                                        (0100) ;  RETURNS:      Nothing
                                        (0101) ;  SIDE EFFECTS: 
                                        (0102) ;    The A and X registers may be modified by this or future implementations
                                        (0103) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0104) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0105) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0106) ;    functions.
                                        (0107) ;
                                        (0108)  Counter16_1_DisableInt:
                                        (0109) _Counter16_1_DisableInt:
                                        (0110)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0111)    Counter16_1_DisableInt_M
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0113)    ret
                                        (0114) 
                                        (0115) 
                                        (0116) .ENDSECTION
                                        (0117) 
                                        (0118) .SECTION
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) ;  FUNCTION NAME: Counter16_1_Start
                                        (0121) ;
                                        (0122) ;  DESCRIPTION:
                                        (0123) ;     Sets the start bit in the Control register of this user module.  The
                                        (0124) ;     counter will begin counting on the next input clock as soon as the
                                        (0125) ;     enable input is asserted high.
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;
                                        (0128) ;  ARGUMENTS:    None
                                        (0129) ;  RETURNS:      Nothing
                                        (0130) ;  SIDE EFFECTS: 
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  Counter16_1_Start:
                                        (0138) _Counter16_1_Start:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0140)    Counter16_1_Start_M
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
0699: 7F       RET                      (0142)    ret
069A: 41 23 FE AND   REG[0x23],0xFE     
                                        (0143) 
                                        (0144) 
                                        (0145) .ENDSECTION
                                        (0146) 
                                        (0147) .SECTION
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;  FUNCTION NAME: Counter16_1_Stop
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;     Disables counter operation by clearing the start bit in the Control
                                        (0153) ;     register of the LSB block.
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:    None
                                        (0157) ;  RETURNS:      Nothing
                                        (0158) ;  SIDE EFFECTS: 
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;
                                        (0165)  Counter16_1_Stop:
                                        (0166) _Counter16_1_Stop:
                                        (0167)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0168)    Counter16_1_Stop_M
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_1
069D: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) 
                                        (0173) .ENDSECTION
                                        (0174) 
                                        (0175) .SECTION
                                        (0176) ;-----------------------------------------------------------------------------
                                        (0177) ;  FUNCTION NAME: Counter16_1_WritePeriod
                                        (0178) ;
                                        (0179) ;  DESCRIPTION:
                                        (0180) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0184) ;  RETURNS:   Nothing
                                        (0185) ;  SIDE EFFECTS:
                                        (0186) ;    If the counter user module is stopped, then this value will also be
                                        (0187) ;    latched into the Count registers (DR0).
                                        (0188) ;     
                                        (0189) ;    The A and X registers may be modified by this or future implementations
                                        (0190) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0191) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0192) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0193) ;    functions.
                                        (0194) ;
                                        (0195)  Counter16_1_WritePeriod:
                                        (0196) _Counter16_1_WritePeriod:
                                        (0197)    RAM_PROLOGUE RAM_USE_CLASS_1
069E: 60 21    MOV   REG[0x21],A        (0198)    mov   reg[Counter16_1_PERIOD_LSB_REG], A
06A0: 5B       MOV   A,X                (0199)    mov   A, X
06A1: 60 25    MOV   REG[0x25],A        (0200)    mov   reg[Counter16_1_PERIOD_MSB_REG], A
                                        (0201)    RAM_EPILOGUE RAM_USE_CLASS_1
06A3: 7F       RET                      (0202)    ret
                                        (0203) 
                                        (0204) 
                                        (0205) .ENDSECTION
                                        (0206) 
                                        (0207) .SECTION
                                        (0208) ;-----------------------------------------------------------------------------
                                        (0209) ;  FUNCTION NAME: Counter16_1_WriteCompareValue
                                        (0210) ;
                                        (0211) ;  DESCRIPTION:
                                        (0212) ;     Writes compare value into the Compare register (DR2).
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;
                                        (0215) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0216) ;  RETURNS:      Nothing
                                        (0217) ;  SIDE EFFECTS: 
                                        (0218) ;    The A and X registers may be modified by this or future implementations
                                        (0219) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0220) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0221) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0222) ;    functions.
                                        (0223) ;
                                        (0224)  Counter16_1_WriteCompareValue:
                                        (0225) _Counter16_1_WriteCompareValue:
                                        (0226)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0227)    mov   reg[Counter16_1_COMPARE_LSB_REG], A
                                        (0228)    mov   A, X
                                        (0229)    mov   reg[Counter16_1_COMPARE_MSB_REG], A
                                        (0230)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0231)    ret
                                        (0232) 
                                        (0233) 
                                        (0234) .ENDSECTION
                                        (0235) 
                                        (0236) .SECTION
                                        (0237) ;-----------------------------------------------------------------------------
                                        (0238) ;  FUNCTION NAME: Counter16_1_wReadCompareValue
                                        (0239) ;
                                        (0240) ;  DESCRIPTION:
                                        (0241) ;     Reads the Compare registers.
                                        (0242) ;-----------------------------------------------------------------------------
                                        (0243) ;
                                        (0244) ;  ARGUMENTS:    None
                                        (0245) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0246) ;  SIDE EFFECTS: 
                                        (0247) ;    The A and X registers may be modified by this or future implementations
                                        (0248) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0249) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0250) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0251) ;    functions.
                                        (0252) ;
                                        (0253)  Counter16_1_wReadCompareValue:
                                        (0254) _Counter16_1_wReadCompareValue:
                                        (0255)  wCounter16_1_ReadCompareValue:                  ; this name deprecated
                                        (0256) _wCounter16_1_ReadCompareValue:                  ; this name deprecated
                                        (0257)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0258)    mov   A, reg[Counter16_1_COMPARE_MSB_REG]
                                        (0259)    mov   X, A
                                        (0260)    mov   A, reg[Counter16_1_COMPARE_LSB_REG]
                                        (0261)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0262)    ret
                                        (0263) 
                                        (0264) 
                                        (0265) .ENDSECTION
                                        (0266) 
                                        (0267) .SECTION
                                        (0268) ;-----------------------------------------------------------------------------
                                        (0269) ;  FUNCTION NAME: Counter16_1_wReadCounter
                                        (0270) ;
                                        (0271) ;  DESCRIPTION:
                                        (0272) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0273) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0274) ;     from the Count to the Compare registers by holding the clock low in
                                        (0275) ;     the MSB PSoC block.
                                        (0276) ;-----------------------------------------------------------------------------
                                        (0277) ;
                                        (0278) ;  ARGUMENTS: None
                                        (0279) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0280) ;  SIDE EFFECTS:
                                        (0281) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0282) ;     2) The A and X registers may be modified by this or future implementations
                                        (0283) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0284) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0285) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0286) ;        functions.
                                        (0287) ;
                                        (0288)  Counter16_1_wReadCounter:
                                        (0289) _Counter16_1_wReadCounter:
                                        (0290)  wCounter16_1_ReadCounter:                       ; this name deprecated
                                        (0291) _wCounter16_1_ReadCounter:                       ; this name deprecated
                                        (0292) 
                                        (0293)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0294)    bOrigControlReg:        EQU   2                  ; Frame offset to temp CR0     store
                                        (0295)    bOrigClockSetting:      EQU   3                  ; Frame offset to temp Input   store
                                        (0296)    wCounter:               EQU   4                  ; Frame offset to temp Count   store
                                        (0297)    STACK_FRAME_SIZE:       EQU   6                  ; max stack frame size is 6 bytes
                                        (0298) 
                                        (0299)    RAM_PROLOGUE RAM_USE_CLASS_2
06A4: 4F       MOV   X,SP               (0300)    mov   X, SP                                      ; X <-  stack frame pointer
06A5: 5D 26    MOV   A,REG[0x26]        (0301)    mov   A, reg[Counter16_1_COMPARE_MSB_REG]     ; Save the Compare register on the stack
06A7: 08       PUSH  A                  (0302)    push  A                                          ;
06A8: 5D 22    MOV   A,REG[0x22]        (0303)    mov   A, reg[Counter16_1_COMPARE_LSB_REG]     ;
06AA: 08       PUSH  A                  (0304)    push  A                                          ;   -stack frame now 2 bytes-
06AB: 5D 23    MOV   A,REG[0x23]        (0305)    mov   A, reg[Counter16_1_CONTROL_LSB_REG]     ; Save CR0 (running or stopped state)
06AD: 08       PUSH  A                  (0306)    push  A                                          ;   -stack frame now 3 bytes-
06AE: 41 23 FE AND   REG[0x23],0xFE     
06B1: 71 10    OR    F,0x10             
                                        (0307)    Counter16_1_Stop_M                            ; Disable (stop) the Counter if running
                                        (0308)    M8C_SetBank1                                     ;
06B3: 5D 21    MOV   A,REG[0x21]        (0309)    mov   A, reg[Counter16_1_INPUT_LSB_REG]       ; save the LSB clock input setting
06B5: 08       PUSH  A                  (0310)    push  A                                          ;   on the stack (now 4 bytes) and ...
                                        (0311)                                                     ;   hold the clock low:
06B6: 62 21 00 MOV   REG[0x21],0x0      (0312)    mov   reg[Counter16_1_INPUT_LSB_REG], INPUT_REG_NULL
06B9: 70 EF    AND   F,0xEF             
                                        (0313)    M8C_SetBank0                                     ; Extract the Count via DR2 register
06BB: 5D 24    MOV   A,REG[0x24]        (0314)    mov   A, reg[Counter16_1_COUNTER_MSB_REG]     ; DR2 <- DR0 (in the MSB block)
06BD: 5D 26    MOV   A,REG[0x26]        (0315)    mov   A, reg[Counter16_1_COMPARE_MSB_REG]     ; Stash the Count MSB on the stack
06BF: 08       PUSH  A                  (0316)    push  A                                          ;   -stack frame is now 5 bytes
06C0: 5D 20    MOV   A,REG[0x20]        (0317)    mov   A, reg[Counter16_1_COUNTER_LSB_REG]     ; DR2 <- DR0 (in the LSB block)
06C2: 5D 22    MOV   A,REG[0x22]        (0318)    mov   A, reg[Counter16_1_COMPARE_LSB_REG]     ; Stash the Count LSB on the stack
06C4: 08       PUSH  A                  (0319)    push  A                                          ;   -stack frame is now 6 bytes-
06C5: 52 00    MOV   A,[X+0]            (0320)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
06C7: 60 26    MOV   REG[0x26],A        (0321)    mov   reg[Counter16_1_COMPARE_MSB_REG], A     ;
06C9: 52 01    MOV   A,[X+1]            (0322)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
06CB: 60 22    MOV   REG[0x22],A        (0323)    mov   reg[Counter16_1_COMPARE_LSB_REG], A     ;
06CD: 71 10    OR    F,0x10             
                                        (0324)    M8C_SetBank1                                     ; ---Restore the counter operation
06CF: 52 03    MOV   A,[X+3]            (0325)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
06D1: 60 21    MOV   REG[0x21],A        (0326)    mov   reg[Counter16_1_INPUT_LSB_REG], A       ;   and restore it
06D3: 70 EF    AND   F,0xEF             
                                        (0327)    M8C_SetBank0                                     ; Now re-enable (start) the counter
06D5: 52 02    MOV   A,[X+2]            (0328)    mov   A, [X+bOrigControlReg]                     ;   if it was running when
06D7: 60 23    MOV   REG[0x23],A        (0329)    mov   reg[Counter16_1_CONTROL_LSB_REG], A     ;   this function was first called
06D9: 18       POP   A                  (0330)    pop   A                                          ; Setup the return value
06DA: 20       POP   X                  (0331)    pop   X                                          ;
06DB: 38 FC    ADD   SP,0xFC            (0332)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
06DD: 70 3F    AND   F,0x3F             
06DF: 71 C0    OR    F,0xC0             
                                        (0333)    RAM_EPILOGUE RAM_USE_CLASS_2
06E1: 7F       RET                      (0334)    ret
                                        (0335) 
                                        (0336) .ENDSECTION
                                        (0337) 
                                        (0338) ; End of File Counter16_1.asm
FILE: C:\Users\Ralf\DOCUME~1\DSM_SA~1\DSM_SA~1\DSM_SA~1\cyrf6936.c
(0001) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0002) #include "CYRF6936.h"
(0003) #include "delay.h"
(0004) #include "timer.h"
(0005) 
(0006) volatile BOOL CY_irq;
(0007) 
(0008) //called on a GPIO interrupt
(0009) #pragma interrupt_handler GPIO_ISR
(0010) void GPIO_ISR(void )
(0011) {
__UserModules_end|_GPIO_ISR|__text_start|_GPIO_ISR:
    06E2: 71 C0    OR    F,0xC0
    06E4: 08       PUSH  A
    06E5: 5D D0    MOV   A,REG[0xD0]
    06E7: 08       PUSH  A
    06E8: 62 D0 00 MOV   REG[0xD0],0x0
    06EB: 51 3F    MOV   A,[__r0]
    06ED: 08       PUSH  A
(0012) 	if (PRT0DR&IRQPin_MASK) //Check if PPM output pin went high
    06EE: 5D 00    MOV   A,REG[0x0]
    06F0: 53 3F    MOV   [__r0],A
    06F2: 47 3F 40 TST   [__r0],0x40
    06F5: A0 04    JZ    0x06FA
    06F7: 55 6D 01 MOV   [CY_irq],0x1
(0013) 	{
(0014) 		CY_irq=TRUE;
(0015) 	}
    06FA: 62 D0 00 MOV   REG[0xD0],0x0
    06FD: 18       POP   A
    06FE: 53 3F    MOV   [__r0],A
    0700: 18       POP   A
    0701: 60 D0    MOV   REG[0xD0],A
    0703: 18       POP   A
    0704: 7E       RETI  
(0016) }
(0017) 
(0018) //initialize cyrf chip
(0019) BOOL CYRF_Init(void )
(0020) {
_CYRF_Init:
  i                    --> X+0
    0705: 10       PUSH  X
    0706: 4F       MOV   X,SP
    0707: 38 03    ADD   SP,0x3
(0021) 	BYTE i;
(0022) 	RST_Start();
    0709: 10       PUSH  X
    070A: 7C 06 2D LCALL RST_Off|_RST_Start|_RST_Stop|RST_Stop|RST_Start|_RST_Off
(0023) 	CS_PIN_Start();
    070D: 7C 06 74 LCALL _CS_PIN_Start|CS_PIN_Stop|_CS_PIN_Off|_CS_PIN_Stop|CS_PIN_Start|CS_PIN_Off
(0024) 	SPIM_1_Start(SPIM_1_SPIM_MODE_0 | SPIM_1_SPIM_MSB_FIRST);
    0710: 50 00    MOV   A,0x0
    0712: 7C 05 C5 LCALL _SPIM_1_Start|_SPIM_1_EnableInt|_SPIM_1_DisableInt
    0715: 20       POP   X
(0025) 	CYRF_Reset();
    0716: 90 44    CALL  _CYRF_Reset
(0026)     i = 100;
    0718: 56 00 64 MOV   [X+0],0x64
(0027)     CYRF_WriteRegister(CYRF_XACT_CFG, (CYRF_ACK_TO_12x));
    071B: 50 02    MOV   A,0x2
    071D: 08       PUSH  A
    071E: 50 0F    MOV   A,0xF
    0720: 08       PUSH  A
    0721: 90 57    CALL  _CYRF_WriteRegister
    0723: 38 FE    ADD   SP,0xFE
(0028)     Delay50uTimes(10);
    0725: 10       PUSH  X
    0726: 50 0A    MOV   A,0xA
    0728: 7C 0A 3F LCALL _Delay50uTimes
    072B: 20       POP   X
(0029)     do {
(0030)         Delay50uTimes(2);
    072C: 10       PUSH  X
    072D: 50 02    MOV   A,0x2
    072F: 7C 0A 3F LCALL _Delay50uTimes
    0732: 20       POP   X
(0031)         i--;
    0733: 7B 00    DEC   [X+0]
(0032)     }while (CYRF_ReadRegister(CYRF_XACT_CFG) != (CYRF_ACK_TO_12x));
    0735: 50 0F    MOV   A,0xF
    0737: 08       PUSH  A
    0738: 91 B7    CALL  _CYRF_ReadRegister
    073A: 38 FF    ADD   SP,0xFF
    073C: 39 02    CMP   A,0x2
    073E: BF ED    JNZ   0x072C
(0033) 	M8C_EnableIntMask(INT_MSK0,INT_MSK0_GPIO); 
    0740: 43 E0 20 OR    REG[0xE0],0x20
(0034) 	CY_irq=FALSE;;
    0743: 62 D0 00 MOV   REG[0xD0],0x0
    0746: 55 6D 00 MOV   [CY_irq],0x0
(0035) 	return (CYRF_ReadRegister(CYRF_XACT_CFG)==(CYRF_ACK_TO_12x));
    0749: 50 0F    MOV   A,0xF
    074B: 08       PUSH  A
    074C: 91 A3    CALL  _CYRF_ReadRegister
    074E: 38 FF    ADD   SP,0xFF
    0750: 62 D0 00 MOV   REG[0xD0],0x0
    0753: 39 02    CMP   A,0x2
    0755: 7C 19 1A LCALL 0x191A
    0758: 38 FD    ADD   SP,0xFD
    075A: 20       POP   X
    075B: 7F       RET   
(0036) }
(0037) 
(0038) //reset cyrf chip
(0039) void CYRF_Reset(void)
(0040) {
(0041)     RS_HI();
_CYRF_Reset:
    075C: 10       PUSH  X
    075D: 7C 06 29 LCALL _RX8_1_cReadChar|_RST_On|RST_On|_RX8_1_iReadChar
(0042) 	CS_HI();
    0760: 7C 06 70 LCALL LED_1_GetState|_CS_PIN_On|CS_PIN_On
    0763: 20       POP   X
(0043)     Timer_Wait_ms(10);
    0764: 50 0A    MOV   A,0xA
    0766: 08       PUSH  A
    0767: 7C 15 5C LCALL _Timer_Wait_ms
    076A: 38 FF    ADD   SP,0xFF
(0044)     RS_LO();
    076C: 10       PUSH  X
    076D: 7C 06 2D LCALL RST_Off|_RST_Start|_RST_Stop|RST_Stop|RST_Start|_RST_Off
    0770: 20       POP   X
(0045)     Timer_Wait_ms(100);
    0771: 50 64    MOV   A,0x64
    0773: 08       PUSH  A
    0774: 7C 15 5C LCALL _Timer_Wait_ms
    0777: 38 FF    ADD   SP,0xFF
    0779: 7F       RET   
(0046) }
(0047) 
(0048) //write a singel register
(0049) void CYRF_WriteRegister(BYTE reg, BYTE val)
(0050) {
_CYRF_WriteRegister:
  val                  --> X-5
  reg                  --> X-4
    077A: 10       PUSH  X
    077B: 4F       MOV   X,SP
(0051)     CS_LO();
    077C: 10       PUSH  X
    077D: 7C 06 74 LCALL _CS_PIN_Start|CS_PIN_Stop|_CS_PIN_Off|_CS_PIN_Stop|CS_PIN_Start|CS_PIN_Off
    0780: 20       POP   X
(0052) 	//write address
(0053) 	SPIM_1_SendTxData(CYRF_WRITE_BIT | reg);
    0781: 62 D0 00 MOV   REG[0xD0],0x0
    0784: 52 FC    MOV   A,[X-4]
    0786: 29 80    OR    A,0x80
    0788: 10       PUSH  X
    0789: 7C 05 CA LCALL _SPIM_1_SendTxData|_SPIM_1_Stop
    078C: 20       POP   X
(0054) 	//wait for buffer empty
(0055) 	while( ! (SPIM_1_bReadStatus() & SPIM_1_SPIM_TX_BUFFER_EMPTY ) );
    078D: 10       PUSH  X
    078E: 7C 05 D0 LCALL _SPIM_1_bReadStatus|bSPIM_1_ReadStatus|_bSPIM_1_ReadStatus
    0791: 20       POP   X
    0792: 62 D0 00 MOV   REG[0xD0],0x0
    0795: 53 3F    MOV   [__r0],A
    0797: 47 3F 10 TST   [__r0],0x10
    079A: AF F2    JZ    0x078D
(0056)     //write data
(0057) 	SPIM_1_SendTxData(val);
    079C: 10       PUSH  X
    079D: 52 FB    MOV   A,[X-5]
    079F: 7C 05 CA LCALL _SPIM_1_SendTxData|_SPIM_1_Stop
    07A2: 20       POP   X
(0058) 	//wait til done
(0059) 	while( ! (SPIM_1_bReadStatus() & SPIM_1_SPIM_SPI_COMPLETE ) );
    07A3: 10       PUSH  X
    07A4: 7C 05 D0 LCALL _SPIM_1_bReadStatus|bSPIM_1_ReadStatus|_bSPIM_1_ReadStatus
    07A7: 20       POP   X
    07A8: 62 D0 00 MOV   REG[0xD0],0x0
    07AB: 53 3F    MOV   [__r0],A
    07AD: 47 3F 20 TST   [__r0],0x20
    07B0: AF F2    JZ    0x07A3
(0060) 	CS_HI();
    07B2: 10       PUSH  X
    07B3: 7C 06 70 LCALL LED_1_GetState|_CS_PIN_On|CS_PIN_On
    07B6: 20       POP   X
    07B7: 20       POP   X
    07B8: 7F       RET   
(0061) }
(0062) void CYRF_WriteDoubleRegister(BYTE reg, WORD val)
(0063) {
_CYRF_WriteDoubleRegister:
  val                  --> X-6
  reg                  --> X-4
    07B9: 10       PUSH  X
    07BA: 4F       MOV   X,SP
    07BB: 38 02    ADD   SP,0x2
(0064)     CS_LO();
    07BD: 10       PUSH  X
    07BE: 7C 06 74 LCALL _CS_PIN_Start|CS_PIN_Stop|_CS_PIN_Off|_CS_PIN_Stop|CS_PIN_Start|CS_PIN_Off
    07C1: 20       POP   X
(0065) 	//write address
(0066) 	SPIM_1_SendTxData(CYRF_WRITE_BIT |CYRF_INCR_BIT| reg);
    07C2: 62 D0 00 MOV   REG[0xD0],0x0
    07C5: 52 FC    MOV   A,[X-4]
    07C7: 29 C0    OR    A,0xC0
    07C9: 10       PUSH  X
    07CA: 7C 05 CA LCALL _SPIM_1_SendTxData|_SPIM_1_Stop
    07CD: 20       POP   X
(0067) 	//wait for buffer empty
(0068) 	while( ! (SPIM_1_bReadStatus() & SPIM_1_SPIM_TX_BUFFER_EMPTY ) );
    07CE: 10       PUSH  X
    07CF: 7C 05 D0 LCALL _SPIM_1_bReadStatus|bSPIM_1_ReadStatus|_bSPIM_1_ReadStatus
    07D2: 20       POP   X
    07D3: 62 D0 00 MOV   REG[0xD0],0x0
    07D6: 53 3F    MOV   [__r0],A
    07D8: 47 3F 10 TST   [__r0],0x10
    07DB: AF F2    JZ    0x07CE
(0069)     //write data
(0070) 	SPIM_1_SendTxData(val&& 0xff);
    07DD: 3D FA 00 CMP   [X-6],0x0
    07E0: B0 06    JNZ   0x07E7
    07E2: 3D FB 00 CMP   [X-5],0x0
    07E5: A0 09    JZ    0x07EF
    07E7: 56 01 01 MOV   [X+1],0x1
    07EA: 56 00 00 MOV   [X+0],0x0
    07ED: 80 07    JMP   0x07F5
    07EF: 56 01 00 MOV   [X+1],0x0
    07F2: 56 00 00 MOV   [X+0],0x0
    07F5: 62 D0 00 MOV   REG[0xD0],0x0
    07F8: 52 01    MOV   A,[X+1]
    07FA: 10       PUSH  X
    07FB: 7C 05 CA LCALL _SPIM_1_SendTxData|_SPIM_1_Stop
    07FE: 20       POP   X
(0071) 	//wait for buffer empty
(0072) 	while( ! (SPIM_1_bReadStatus() & SPIM_1_SPIM_TX_BUFFER_EMPTY ) );
    07FF: 10       PUSH  X
    0800: 7C 05 D0 LCALL _SPIM_1_bReadStatus|bSPIM_1_ReadStatus|_bSPIM_1_ReadStatus
    0803: 20       POP   X
    0804: 62 D0 00 MOV   REG[0xD0],0x0
    0807: 53 3F    MOV   [__r0],A
    0809: 47 3F 10 TST   [__r0],0x10
    080C: AF F2    JZ    0x07FF
(0073)     //write data
(0074) 	SPIM_1_SendTxData(val>>8);
    080E: 52 FA    MOV   A,[X-6]
    0810: 10       PUSH  X
    0811: 7C 05 CA LCALL _SPIM_1_SendTxData|_SPIM_1_Stop
    0814: 20       POP   X
(0075) 	//wait til done
(0076) 	while( ! (SPIM_1_bReadStatus() & SPIM_1_SPIM_SPI_COMPLETE ) );
    0815: 10       PUSH  X
    0816: 7C 05 D0 LCALL _SPIM_1_bReadStatus|bSPIM_1_ReadStatus|_bSPIM_1_ReadStatus
    0819: 20       POP   X
    081A: 62 D0 00 MOV   REG[0xD0],0x0
    081D: 53 3F    MOV   [__r0],A
    081F: 47 3F 20 TST   [__r0],0x20
    0822: AF F2    JZ    0x0815
(0077) 	CS_HI();
    0824: 10       PUSH  X
    0825: 7C 06 70 LCALL LED_1_GetState|_CS_PIN_On|CS_PIN_On
    0828: 20       POP   X
    0829: 38 FE    ADD   SP,0xFE
    082B: 20       POP   X
    082C: 7F       RET   
(0078) }
(0079) 
(0080) 
(0081) //write a single register cnt times
(0082) void CYRF_WriteRegisterMulti(BYTE reg,BYTE const data[] , BYTE cnt)
(0083) {
_CYRF_WriteRegisterMulti:
  n                    --> X+0
  cnt                  --> X-7
  data                 --> X-6
  reg                  --> X-4
    082D: 10       PUSH  X
    082E: 4F       MOV   X,SP
    082F: 38 01    ADD   SP,0x1
(0084) 	BYTE n;
(0085)     CS_LO();
    0831: 10       PUSH  X
    0832: 7C 06 74 LCALL _CS_PIN_Start|CS_PIN_Stop|_CS_PIN_Off|_CS_PIN_Stop|CS_PIN_Start|CS_PIN_Off
    0835: 20       POP   X
(0086) 	//write address
(0087) 	SPIM_1_SendTxData(CYRF_WRITE_BIT|reg);
    0836: 62 D0 00 MOV   REG[0xD0],0x0
    0839: 52 FC    MOV   A,[X-4]
    083B: 29 80    OR    A,0x80
    083D: 10       PUSH  X
    083E: 7C 05 CA LCALL _SPIM_1_SendTxData|_SPIM_1_Stop
    0841: 20       POP   X
(0088)     for(n = 0; n < cnt; n++)
    0842: 56 00 00 MOV   [X+0],0x0
    0845: 80 1F    JMP   0x0865
(0089)     {
(0090) 		//wait for buffer empty
(0091) 		while( ! (SPIM_1_bReadStatus() & SPIM_1_SPIM_TX_BUFFER_EMPTY ) );
    0847: 10       PUSH  X
    0848: 7C 05 D0 LCALL _SPIM_1_bReadStatus|bSPIM_1_ReadStatus|_bSPIM_1_ReadStatus
    084B: 20       POP   X
    084C: 62 D0 00 MOV   REG[0xD0],0x0
    084F: 53 3F    MOV   [__r0],A
    0851: 47 3F 10 TST   [__r0],0x10
    0854: AF F2    JZ    0x0847
    0856: 7C 19 3D LCALL 0x193D
(0092) 	    //write data
(0093) 		SPIM_1_SendTxData(data[n]);
    0859: 10       PUSH  X
    085A: 58 3E    MOV   X,[__r1]
    085C: 28       ROMX  
    085D: 20       POP   X
    085E: 10       PUSH  X
    085F: 7C 05 CA LCALL _SPIM_1_SendTxData|_SPIM_1_Stop
    0862: 20       POP   X
(0094)     }
    0863: 77 00    INC   [X+0]
    0865: 52 00    MOV   A,[X+0]
    0867: 3B F9    CMP   A,[X-7]
    0869: CF DD    JC    0x0847
(0095) 	while( ! (SPIM_1_bReadStatus() & SPIM_1_SPIM_SPI_COMPLETE ) );
    086B: 10       PUSH  X
    086C: 7C 05 D0 LCALL _SPIM_1_bReadStatus|bSPIM_1_ReadStatus|_bSPIM_1_ReadStatus
    086F: 20       POP   X
    0870: 62 D0 00 MOV   REG[0xD0],0x0
    0873: 53 3F    MOV   [__r0],A
    0875: 47 3F 20 TST   [__r0],0x20
    0878: AF F2    JZ    0x086B
(0096) 	CS_HI();
    087A: 10       PUSH  X
    087B: 7C 06 70 LCALL LED_1_GetState|_CS_PIN_On|CS_PIN_On
    087E: 20       POP   X
    087F: 38 FF    ADD   SP,0xFF
    0881: 20       POP   X
    0882: 7F       RET   
(0097) }
(0098) void CYRF_WriteRegisterMultiD(BYTE reg, BYTE data[], BYTE cnt)
(0099) {
_CYRF_WriteRegisterMultiD:
  n                    --> X+0
  cnt                  --> X-7
  data                 --> X-6
  reg                  --> X-4
    0883: 10       PUSH  X
    0884: 4F       MOV   X,SP
    0885: 38 01    ADD   SP,0x1
(0100) 	BYTE n;
(0101)     CS_LO();
    0887: 10       PUSH  X
    0888: 7C 06 74 LCALL _CS_PIN_Start|CS_PIN_Stop|_CS_PIN_Off|_CS_PIN_Stop|CS_PIN_Start|CS_PIN_Off
    088B: 20       POP   X
(0102) 	//write address
(0103) 	SPIM_1_SendTxData(CYRF_WRITE_BIT|reg);
    088C: 62 D0 00 MOV   REG[0xD0],0x0
    088F: 52 FC    MOV   A,[X-4]
    0891: 29 80    OR    A,0x80
    0893: 10       PUSH  X
    0894: 7C 05 CA LCALL _SPIM_1_SendTxData|_SPIM_1_Stop
    0897: 20       POP   X
(0104)     for(n = 0; n < cnt; n++)
    0898: 56 00 00 MOV   [X+0],0x0
    089B: 80 1E    JMP   0x08BA
(0105)     {
(0106) 		//wait for buffer empty
(0107) 		while( ! (SPIM_1_bReadStatus() & SPIM_1_SPIM_TX_BUFFER_EMPTY ) );
    089D: 10       PUSH  X
    089E: 7C 05 D0 LCALL _SPIM_1_bReadStatus|bSPIM_1_ReadStatus|_bSPIM_1_ReadStatus
    08A1: 20       POP   X
    08A2: 62 D0 00 MOV   REG[0xD0],0x0
    08A5: 53 3F    MOV   [__r0],A
    08A7: 47 3F 10 TST   [__r0],0x10
    08AA: AF F2    JZ    0x089D
    08AC: 7C 19 3D LCALL 0x193D
(0108) 	    //write data
(0109) 		SPIM_1_SendTxData(data[n]);
    08AF: 60 D4    MOV   REG[0xD4],A
    08B1: 3E 3E    MVI   A,[__r1]
    08B3: 10       PUSH  X
    08B4: 7C 05 CA LCALL _SPIM_1_SendTxData|_SPIM_1_Stop
    08B7: 20       POP   X
(0110)     }
    08B8: 77 00    INC   [X+0]
    08BA: 52 00    MOV   A,[X+0]
    08BC: 3B F9    CMP   A,[X-7]
    08BE: CF DE    JC    0x089D
(0111) 	while( ! (SPIM_1_bReadStatus() & SPIM_1_SPIM_SPI_COMPLETE ) );
    08C0: 10       PUSH  X
    08C1: 7C 05 D0 LCALL _SPIM_1_bReadStatus|bSPIM_1_ReadStatus|_bSPIM_1_ReadStatus
    08C4: 20       POP   X
    08C5: 62 D0 00 MOV   REG[0xD0],0x0
    08C8: 53 3F    MOV   [__r0],A
    08CA: 47 3F 20 TST   [__r0],0x20
    08CD: AF F2    JZ    0x08C0
(0112) 	CS_HI();
    08CF: 10       PUSH  X
    08D0: 7C 06 70 LCALL LED_1_GetState|_CS_PIN_On|CS_PIN_On
    08D3: 20       POP   X
    08D4: 38 FF    ADD   SP,0xFF
    08D6: 20       POP   X
    08D7: 7F       RET   
(0113) }
(0114) 
(0115) 
(0116) void CYRF_WriteRegisterInc(BYTE reg,BYTE  data[] , BYTE cnt)
(0117) {
_CYRF_WriteRegisterInc:
  cnt                  --> X-7
  data                 --> X-6
  reg                  --> X-4
    08D8: 10       PUSH  X
    08D9: 4F       MOV   X,SP
(0118) CYRF_WriteRegisterMultiD(CYRF_INCR_BIT| reg,data,cnt);
    08DA: 52 F9    MOV   A,[X-7]
    08DC: 08       PUSH  A
    08DD: 52 FA    MOV   A,[X-6]
    08DF: 08       PUSH  A
    08E0: 52 FB    MOV   A,[X-5]
    08E2: 08       PUSH  A
    08E3: 62 D0 00 MOV   REG[0xD0],0x0
    08E6: 52 FC    MOV   A,[X-4]
    08E8: 29 40    OR    A,0x40
    08EA: 08       PUSH  A
    08EB: 9F 96    CALL  _CYRF_WriteRegisterMultiD
    08ED: 38 FC    ADD   SP,0xFC
    08EF: 20       POP   X
    08F0: 7F       RET   
(0119) }
(0120) 
(0121) //read a singele register 
(0122) BYTE CYRF_ReadRegister(BYTE reg)
(0123) {
_CYRF_ReadRegister:
  data                 --> X+0
  reg                  --> X-4
    08F1: 10       PUSH  X
    08F2: 4F       MOV   X,SP
    08F3: 38 01    ADD   SP,0x1
(0124) BYTE data;
(0125)     CS_LO();
    08F5: 10       PUSH  X
    08F6: 7C 06 74 LCALL _CS_PIN_Start|CS_PIN_Stop|_CS_PIN_Off|_CS_PIN_Stop|CS_PIN_Start|CS_PIN_Off
    08F9: 20       POP   X
(0126)     SPIM_1_SendTxData(reg);
    08FA: 10       PUSH  X
    08FB: 52 FC    MOV   A,[X-4]
    08FD: 7C 05 CA LCALL _SPIM_1_SendTxData|_SPIM_1_Stop
    0900: 20       POP   X
(0127) 	//wait for tx buffer empty
(0128) 	while( ! (SPIM_1_bReadStatus() & SPIM_1_SPIM_TX_BUFFER_EMPTY ) );
    0901: 10       PUSH  X
    0902: 7C 05 D0 LCALL _SPIM_1_bReadStatus|bSPIM_1_ReadStatus|_bSPIM_1_ReadStatus
    0905: 20       POP   X
    0906: 62 D0 00 MOV   REG[0xD0],0x0
    0909: 53 3F    MOV   [__r0],A
    090B: 47 3F 10 TST   [__r0],0x10
    090E: AF F2    JZ    0x0901
(0129) 	//dummy write
(0130) 	SPIM_1_SendTxData(0x00);
    0910: 10       PUSH  X
    0911: 50 00    MOV   A,0x0
    0913: 7C 05 CA LCALL _SPIM_1_SendTxData|_SPIM_1_Stop
    0916: 20       POP   X
(0131) 	//wait for gabage byte read
(0132) 	while( ! (SPIM_1_bReadStatus() & SPIM_1_SPIM_RX_BUFFER_FULL ) );
    0917: 10       PUSH  X
    0918: 7C 05 D0 LCALL _SPIM_1_bReadStatus|bSPIM_1_ReadStatus|_bSPIM_1_ReadStatus
    091B: 20       POP   X
    091C: 62 D0 00 MOV   REG[0xD0],0x0
    091F: 53 3F    MOV   [__r0],A
    0921: 47 3F 08 TST   [__r0],0x8
    0924: AF F2    JZ    0x0917
(0133) 	SPIM_1_bReadRxData();
    0926: 10       PUSH  X
    0927: 7C 05 CD LCALL _SPIM_1_bReadRxData|_bSPIM_1_ReadRxData|SPIM_1_bReadRxData|bSPIM_1_ReadRxData
    092A: 20       POP   X
    092B: 62 D0 00 MOV   REG[0xD0],0x0
(0134) 	//wait for final byte
(0135) 	while( ! (SPIM_1_bReadStatus() & (SPIM_1_SPIM_RX_BUFFER_FULL|SPIM_1_SPIM_SPI_COMPLETE) ) );
    092E: 10       PUSH  X
    092F: 7C 05 D0 LCALL _SPIM_1_bReadStatus|bSPIM_1_ReadStatus|_bSPIM_1_ReadStatus
    0932: 20       POP   X
    0933: 62 D0 00 MOV   REG[0xD0],0x0
    0936: 53 3F    MOV   [__r0],A
    0938: 47 3F 28 TST   [__r0],0x28
    093B: AF F2    JZ    0x092E
(0136) 	data=SPIM_1_bReadRxData();
    093D: 10       PUSH  X
    093E: 7C 05 CD LCALL _SPIM_1_bReadRxData|_bSPIM_1_ReadRxData|SPIM_1_bReadRxData|bSPIM_1_ReadRxData
    0941: 20       POP   X
    0942: 62 D0 00 MOV   REG[0xD0],0x0
    0945: 54 00    MOV   [X+0],A
(0137)     CS_HI();
    0947: 10       PUSH  X
    0948: 7C 06 70 LCALL LED_1_GetState|_CS_PIN_On|CS_PIN_On
    094B: 20       POP   X
(0138) 	return data;
    094C: 52 00    MOV   A,[X+0]
    094E: 62 D0 00 MOV   REG[0xD0],0x0
    0951: 38 FF    ADD   SP,0xFF
    0953: 20       POP   X
    0954: 7F       RET   
(0139) }
(0140) 
(0141) //read a singel register cnt times
(0142) void CYRF_ReadRegisterMulti(BYTE reg, BYTE data[], BYTE cnt)
(0143) {
_CYRF_ReadRegisterMulti:
  n                    --> X+1
  status               --> X+0
  cnt                  --> X-7
  data                 --> X-6
  reg                  --> X-4
    0955: 10       PUSH  X
    0956: 4F       MOV   X,SP
    0957: 38 02    ADD   SP,0x2
(0144) 	BYTE n;
(0145) 	BYTE status;
(0146)     CS_LO();
    0959: 10       PUSH  X
    095A: 7C 06 74 LCALL _CS_PIN_Start|CS_PIN_Stop|_CS_PIN_Off|_CS_PIN_Stop|CS_PIN_Start|CS_PIN_Off
    095D: 20       POP   X
(0147) 	cnt--;
    095E: 7B F9    DEC   [X-7]
(0148) 	//write address
(0149) 	SPIM_1_SendTxData(reg);
    0960: 10       PUSH  X
    0961: 52 FC    MOV   A,[X-4]
    0963: 7C 05 CA LCALL _SPIM_1_SendTxData|_SPIM_1_Stop
    0966: 20       POP   X
(0150) 	//wait for buffer empty
(0151) 	while( ! (status=SPIM_1_bReadStatus() & SPIM_1_SPIM_TX_BUFFER_EMPTY ) );
    0967: 10       PUSH  X
    0968: 7C 05 D0 LCALL _SPIM_1_bReadStatus|bSPIM_1_ReadStatus|_bSPIM_1_ReadStatus
    096B: 20       POP   X
    096C: 62 D0 00 MOV   REG[0xD0],0x0
    096F: 53 3F    MOV   [__r0],A
    0971: 26 3F 10 AND   [__r0],0x10
    0974: 51 3F    MOV   A,[__r0]
    0976: 54 00    MOV   [X+0],A
    0978: 3C 3F 00 CMP   [__r0],0x0
    097B: AF EB    JZ    0x0967
(0152)     //dummy write
(0153) 	SPIM_1_SendTxData(0x00);
    097D: 10       PUSH  X
    097E: 50 00    MOV   A,0x0
    0980: 7C 05 CA LCALL _SPIM_1_SendTxData|_SPIM_1_Stop
    0983: 20       POP   X
(0154) 	//wait for gabage byte read
(0155) 	while( ! (status=SPIM_1_bReadStatus() & SPIM_1_SPIM_RX_BUFFER_FULL ) );
    0984: 10       PUSH  X
    0985: 7C 05 D0 LCALL _SPIM_1_bReadStatus|bSPIM_1_ReadStatus|_bSPIM_1_ReadStatus
    0988: 20       POP   X
    0989: 62 D0 00 MOV   REG[0xD0],0x0
    098C: 53 3F    MOV   [__r0],A
    098E: 26 3F 08 AND   [__r0],0x8
    0991: 51 3F    MOV   A,[__r0]
    0993: 54 00    MOV   [X+0],A
    0995: 3C 3F 00 CMP   [__r0],0x0
    0998: AF EB    JZ    0x0984
(0156) 	SPIM_1_bReadRxData();
    099A: 10       PUSH  X
    099B: 7C 05 CD LCALL _SPIM_1_bReadRxData|_bSPIM_1_ReadRxData|SPIM_1_bReadRxData|bSPIM_1_ReadRxData
    099E: 20       POP   X
    099F: 62 D0 00 MOV   REG[0xD0],0x0
(0157) 	
(0158)     
(0159)     for(n=0;(n<cnt);)
    09A2: 56 01 00 MOV   [X+1],0x0
    09A5: 80 2D    JMP   0x09D3
(0160) 	{
(0161) 		//if buffer empty
(0162) 		status=SPIM_1_bReadStatus();
    09A7: 10       PUSH  X
    09A8: 7C 05 D0 LCALL _SPIM_1_bReadStatus|bSPIM_1_ReadStatus|_bSPIM_1_ReadStatus
    09AB: 20       POP   X
    09AC: 62 D0 00 MOV   REG[0xD0],0x0
    09AF: 54 00    MOV   [X+0],A
(0163) 		if(  (status & SPIM_1_SPIM_TX_BUFFER_EMPTY ) );
    09B1: 48 00 10 TST   [X+0],0x10
    09B4: A0 01    JZ    0x09B6
(0164) 			{
(0165) 		    //dummy write
(0166) 			SPIM_1_SendTxData(0x00);
    09B6: 10       PUSH  X
    09B7: 50 00    MOV   A,0x0
    09B9: 7C 05 CA LCALL _SPIM_1_SendTxData|_SPIM_1_Stop
    09BC: 20       POP   X
(0167) 			}
(0168) 		//if data		
(0169) 		if(  (status & SPIM_1_SPIM_RX_BUFFER_FULL ) );
    09BD: 48 00 08 TST   [X+0],0x8
    09C0: A0 01    JZ    0x09C2
(0170) 		{
(0171) 			data[n]=SPIM_1_bReadRxData();
    09C2: 10       PUSH  X
    09C3: 7C 05 CD LCALL _SPIM_1_bReadRxData|_bSPIM_1_ReadRxData|SPIM_1_bReadRxData|bSPIM_1_ReadRxData
    09C6: 20       POP   X
    09C7: 62 D0 00 MOV   REG[0xD0],0x0
    09CA: 53 3F    MOV   [__r0],A
    09CC: 52 01    MOV   A,[X+1]
    09CE: 7C 19 04 LCALL 0x1904
(0172) 			n++;
    09D1: 77 01    INC   [X+1]
(0173) 		}
(0174)     };
    09D3: 52 01    MOV   A,[X+1]
    09D5: 3B F9    CMP   A,[X-7]
    09D7: CF CF    JC    0x09A7
(0175) 	//wait for final byte
(0176) 	while( ! (SPIM_1_bReadStatus() & (SPIM_1_SPIM_RX_BUFFER_FULL|SPIM_1_SPIM_SPI_COMPLETE) ) );
    09D9: 10       PUSH  X
    09DA: 7C 05 D0 LCALL _SPIM_1_bReadStatus|bSPIM_1_ReadStatus|_bSPIM_1_ReadStatus
    09DD: 20       POP   X
    09DE: 62 D0 00 MOV   REG[0xD0],0x0
    09E1: 53 3F    MOV   [__r0],A
    09E3: 47 3F 28 TST   [__r0],0x28
    09E6: AF F2    JZ    0x09D9
(0177) 	data[cnt]=SPIM_1_bReadRxData();
    09E8: 10       PUSH  X
    09E9: 7C 05 CD LCALL _SPIM_1_bReadRxData|_bSPIM_1_ReadRxData|SPIM_1_bReadRxData|bSPIM_1_ReadRxData
    09EC: 20       POP   X
    09ED: 62 D0 00 MOV   REG[0xD0],0x0
    09F0: 53 3F    MOV   [__r0],A
    09F2: 52 F9    MOV   A,[X-7]
    09F4: 7C 19 04 LCALL 0x1904
(0178) 	CS_HI();
    09F7: 10       PUSH  X
    09F8: 7C 06 70 LCALL LED_1_GetState|_CS_PIN_On|CS_PIN_On
    09FB: 20       POP   X
    09FC: 38 FE    ADD   SP,0xFE
    09FE: 20       POP   X
    09FF: 7F       RET   
(0179) }
(0180) void CYRF_ReadRegisterInc(BYTE reg, BYTE data[], BYTE cnt)
(0181) {
_CYRF_ReadRegisterInc:
  cnt                  --> X-7
  data                 --> X-6
  reg                  --> X-4
    0A00: 10       PUSH  X
    0A01: 4F       MOV   X,SP
(0182) 	CYRF_ReadRegisterMulti(reg|CYRF_INCR_BIT,data,cnt);
    0A02: 52 F9    MOV   A,[X-7]
    0A04: 08       PUSH  A
    0A05: 52 FA    MOV   A,[X-6]
    0A07: 08       PUSH  A
    0A08: 52 FB    MOV   A,[X-5]
    0A0A: 08       PUSH  A
    0A0B: 62 D0 00 MOV   REG[0xD0],0x0
    0A0E: 52 FC    MOV   A,[X-4]
    0A10: 29 40    OR    A,0x40
    0A12: 08       PUSH  A
    0A13: 9F 40    CALL  _CYRF_ReadRegisterMulti
    0A15: 38 FC    ADD   SP,0xFC
    0A17: 20       POP   X
    0A18: 7F       RET   
(0183) }
(0184) 
(0185) 
(0186) //get Mfg ID
(0187) void CYRF_GetMfgData(BYTE data[])
(0188) {
_CYRF_GetMfgData:
  data                 --> X-5
    0A19: 10       PUSH  X
    0A1A: 4F       MOV   X,SP
(0189)     /* Fuses power on */
(0190)     CYRF_WriteRegister(CYRF_MFG_ID, 0xFF);
    0A1B: 50 FF    MOV   A,0xFF
    0A1D: 08       PUSH  A
    0A1E: 50 25    MOV   A,0x25
    0A20: 08       PUSH  A
    0A21: 9D 57    CALL  _CYRF_WriteRegister
    0A23: 38 FE    ADD   SP,0xFE
(0191) 
(0192)     CYRF_ReadRegisterMulti(CYRF_MFG_ID, data, 6);
    0A25: 50 06    MOV   A,0x6
    0A27: 08       PUSH  A
    0A28: 52 FB    MOV   A,[X-5]
    0A2A: 08       PUSH  A
    0A2B: 52 FC    MOV   A,[X-4]
    0A2D: 08       PUSH  A
    0A2E: 50 25    MOV   A,0x25
    0A30: 08       PUSH  A
    0A31: 9F 22    CALL  _CYRF_ReadRegisterMulti
(0193) 
(0194)     /* Fuses power off */
(0195)     CYRF_WriteRegister(CYRF_MFG_ID, 0x00); 
    0A33: 50 00    MOV   A,0x0
    0A35: 08       PUSH  A
    0A36: 50 25    MOV   A,0x25
    0A38: 08       PUSH  A
    0A39: 9D 3F    CALL  _CYRF_WriteRegister
    0A3B: 38 FA    ADD   SP,0xFA
    0A3D: 20       POP   X
    0A3E: 7F       RET   
FILE: .\delay.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: delay.asm
                                        (0004) ;;
                                        (0005) ;;  DESCRIPTION: Delay functions implementation file
                                        (0006) ;;
                                        (0007) ;;-----------------------------------------------------------------------------
                                        (0008) ;;  Copyright (c) Cypress MicroSystems 2002-2006. All Rights Reserved.
                                        (0009) ;;*****************************************************************************
                                        (0010) ;;*****************************************************************************
                                        (0011) 
                                        (0012) ;-----------------------------------------------------------------------------
                                        (0013) ;  Include Files
                                        (0014) ;-----------------------------------------------------------------------------
                                        (0015) include "m8c.inc"
                                        (0016) include "memory.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------------------------------------
                                        (0021) export  Delay50uTimes
                                        (0022) export _Delay50uTimes
                                        (0023) 
                                        (0024) export  Delay50u
                                        (0025) export _Delay50u
                                        (0026) 
                                        (0027) area text(rom)
                                        (0028) 
                                        (0029) 
                                        (0030) .SECTION
                                        (0031) ;-----------------------------------------------------------------------------
                                        (0032) ;  FUNCTION NAME: Delay50uTimes
                                        (0033) ;
                                        (0034) ;  DESCRIPTION:
                                        (0035) ;     Delay increments of 50uSeconds
                                        (0036) ;
                                        (0037) ;-----------------------------------------------------------------------------
                                        (0038) ;
                                        (0039) ;  ARGUMENTS:
                                        (0040) ;     A contains the delay multiplier
                                        (0041) ;
                                        (0042) ;  RETURNS:
                                        (0043) ;
                                        (0044) ;  SIDE EFFECTS:
                                        (0045) ;    The A and X registers may be modified by this or future implementations
                                        (0046) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0047) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0048) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0049) ;    functions.
                                        (0050) ;
                                        (0051) ;
                                        (0052) 
                                        (0053)  Delay50uTimes:
                                        (0054) _Delay50uTimes:
                                        (0055)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0056) 
0A3F: 90 0C    CALL  _Delay50u          (0057)     call  Delay50u
0A41: 78       DEC   A                  (0058) 	dec A
0A42: BF FC    JNZ   _Delay50uTimes     (0059)     jnz   Delay50uTimes
                                        (0060) 
                                        (0061) 	
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_1
0A44: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) .ENDSECTION
                                        (0066) 
                                        (0067) ;-----------------------------------------------------------------------------
                                        (0068) ;  FUNCTION NAME: Delay50u
                                        (0069) ;
                                        (0070) ;  DESCRIPTION:
                                        (0071) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0072) ;     Slower clock frequencies the delay will be;
                                        (0073) ;           1.5
                                        (0074) ;        -------------- * 50uSec
                                        (0075) ;        clock_freq(MHz)
                                        (0076) ;
                                        (0077) ;
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;
                                        (0080) ;  ARGUMENTS: none
                                        (0081) ;
                                        (0082) ;  RETURNS: none
                                        (0083) ;
                                        (0084) ;  SIDE EFFECTS:
                                        (0085) ;    The A and X registers may be modified by this or future implementations
                                        (0086) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0087) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0088) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0089) ;    functions.
                                        (0090) ;
                                        (0091) ;  THEORY of OPERATION or PROCEDURE:
                                        (0092) ;
                                        (0093) .LITERAL
                                        (0094)  Delay50u_Table::
                                        (0095)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0096) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0097) .ENDLITERAL
                                        (0098) .SECTION
                                        (0099) 
                                        (0100)   Delay50u:
                                        (0101)  _Delay50u:                      ; [11]  Call
                                        (0102)     RAM_PROLOGUE RAM_USE_CLASS_1
0A4D: 08       PUSH  A                  (0103)     push  A
0A4E: 71 10    OR    F,0x10             
                                        (0104)     M8C_SetBank1                       ; [4]
0A50: 5D E0    MOV   A,REG[0xE0]        (0105)     mov   A, reg[OSC_CR0]              ; [6] Get delay value
0A52: 70 EF    AND   F,0xEF             
                                        (0106)     M8C_SetBank0                       ; [4]
0A54: 21 07    AND   A,0x7              (0107)     and   A,07h                        ; [4] Mask off only the clock bits
0A56: 39 05    CMP   A,0x5              (0108)     cmp   A,05h
0A58: D0 06    JNC   0x0A5F             (0109)     jnc   Delay50u_End
0A5A: FF E9    INDEX Delay50u_Table     (0110)     index Delay50u_Table               ; [13] Get delay value
                                        (0111) Delay50u_Loop:                         ;
0A5C: 78       DEC   A                  (0112)     dec   A                            ; [4]
0A5D: BF FE    JNZ   0x0A5C             (0113)     jnz   Delay50u_Loop                ; [5]
                                        (0114) Delay50u_End:
0A5F: 18       POP   A                  (0115)     pop   A
                                        (0116)     RAM_EPILOGUE RAM_USE_CLASS_1
0A60: 7F       RET                      (0117)     ret
FILE: C:\Users\Ralf\DOCUME~1\DSM_SA~1\DSM_SA~1\DSM_SA~1\dsm.c
(0001) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0002) #include "dsm.h"
(0003) #include "serial.h"
(0004) #include "timer.h"
(0005) 
(0006) BYTE hex[3];
(0007) 
(0008) 
(0009) BYTE channels[23];
(0010) BYTE chidx;
(0011) BOOL Is_DSMX;
(0012) BOOL Ch_A;
(0013) BYTE sop_col;
(0014) BYTE data_col;
(0015) BYTE Bind_cnt;
(0016) BYTE bind_channal;
(0017) BYTE num_channels;
(0018) BYTE tx_buf[16];
(0019) BYTE cyrfmfg_id[6];
(0020) BOOL Rang_Check;
(0021) 
(0022) void ToHex(BYTE val,BYTE out[])
(0023) {
_ToHex:
  v                    --> X+0
  out                  --> X-6
  val                  --> X-4
    0A61: 10       PUSH  X
    0A62: 4F       MOV   X,SP
    0A63: 38 01    ADD   SP,0x1
(0024) 	BYTE v=val>>4;
    0A65: 52 FC    MOV   A,[X-4]
    0A67: 62 D0 00 MOV   REG[0xD0],0x0
    0A6A: 67       ASR   A
    0A6B: 67       ASR   A
    0A6C: 67       ASR   A
    0A6D: 67       ASR   A
    0A6E: 21 0F    AND   A,0xF
    0A70: 54 00    MOV   [X+0],A
(0025) 	if (v<0xa)
    0A72: 3D 00 0A CMP   [X+0],0xA
    0A75: D0 15    JNC   0x0A8B
    0A77: 52 00    MOV   A,[X+0]
    0A79: 01 30    ADD   A,0x30
    0A7B: 53 3F    MOV   [__r0],A
    0A7D: 52 FB    MOV   A,[X-5]
    0A7F: 53 3C    MOV   [__r3],A
    0A81: 52 FA    MOV   A,[X-6]
    0A83: 60 D5    MOV   REG[0xD5],A
    0A85: 51 3F    MOV   A,[__r0]
    0A87: 3F 3C    MVI   [__r3],A
    0A89: 80 19    JMP   0x0AA3
(0026) 		out[0]='0'+v;
(0027) 	else 
(0028) 		out[0]='A'+(v-0xa);
    0A8B: 62 D0 00 MOV   REG[0xD0],0x0
    0A8E: 52 00    MOV   A,[X+0]
    0A90: 11 0A    SUB   A,0xA
    0A92: 53 3F    MOV   [__r0],A
    0A94: 06 3F 41 ADD   [__r0],0x41
    0A97: 52 FB    MOV   A,[X-5]
    0A99: 53 3C    MOV   [__r3],A
    0A9B: 52 FA    MOV   A,[X-6]
    0A9D: 60 D5    MOV   REG[0xD5],A
    0A9F: 51 3F    MOV   A,[__r0]
    0AA1: 3F 3C    MVI   [__r3],A
(0029) 	v=val&0xF;
    0AA3: 52 FC    MOV   A,[X-4]
    0AA5: 21 0F    AND   A,0xF
    0AA7: 54 00    MOV   [X+0],A
(0030) 	if (v<0xa)
    0AA9: 3D 00 0A CMP   [X+0],0xA
    0AAC: D0 0F    JNC   0x0ABC
(0031) 		out[1]='0'+v;
    0AAE: 62 D0 00 MOV   REG[0xD0],0x0
    0AB1: 52 00    MOV   A,[X+0]
    0AB3: 01 30    ADD   A,0x30
    0AB5: 53 3F    MOV   [__r0],A
    0AB7: 7C 19 4F LCALL 0x194F
    0ABA: 80 10    JMP   0x0ACB
(0032) 	else 
(0033) 		out[1]='A'+(v-0xa);
    0ABC: 62 D0 00 MOV   REG[0xD0],0x0
    0ABF: 52 00    MOV   A,[X+0]
    0AC1: 11 0A    SUB   A,0xA
    0AC3: 53 3F    MOV   [__r0],A
    0AC5: 06 3F 41 ADD   [__r0],0x41
    0AC8: 7C 19 4F LCALL 0x194F
    0ACB: 38 FF    ADD   SP,0xFF
    0ACD: 20       POP   X
    0ACE: 7F       RET   
(0034) }
(0035) 
(0036) static const BYTE pncodes[5][9][8] = {
(0037)     /* Note these are in order transmitted (LSB 1st) */
(0038) { /* Row 0 */
(0039)   /* Col 0 */ {0x03, 0xBC, 0x6E, 0x8A, 0xEF, 0xBD, 0xFE, 0xF8},
(0040)   /* Col 1 */ {0x88, 0x17, 0x13, 0x3B, 0x2D, 0xBF, 0x06, 0xD6},
(0041)   /* Col 2 */ {0xF1, 0x94, 0x30, 0x21, 0xA1, 0x1C, 0x88, 0xA9},
(0042)   /* Col 3 */ {0xD0, 0xD2, 0x8E, 0xBC, 0x82, 0x2F, 0xE3, 0xB4},
(0043)   /* Col 4 */ {0x8C, 0xFA, 0x47, 0x9B, 0x83, 0xA5, 0x66, 0xD0},
(0044)   /* Col 5 */ {0x07, 0xBD, 0x9F, 0x26, 0xC8, 0x31, 0x0F, 0xB8},
(0045)   /* Col 6 */ {0xEF, 0x03, 0x95, 0x89, 0xB4, 0x71, 0x61, 0x9D},
(0046)   /* Col 7 */ {0x40, 0xBA, 0x97, 0xD5, 0x86, 0x4F, 0xCC, 0xD1},
(0047)   /* Col 8 */ {0xD7, 0xA1, 0x54, 0xB1, 0x5E, 0x89, 0xAE, 0x86}
(0048) },
(0049) { /* Row 1 */
(0050)   /* Col 0 */ {0x83, 0xF7, 0xA8, 0x2D, 0x7A, 0x44, 0x64, 0xD3},
(0051)   /* Col 1 */ {0x3F, 0x2C, 0x4E, 0xAA, 0x71, 0x48, 0x7A, 0xC9},
(0052)   /* Col 2 */ {0x17, 0xFF, 0x9E, 0x21, 0x36, 0x90, 0xC7, 0x82},
(0053)   /* Col 3 */ {0xBC, 0x5D, 0x9A, 0x5B, 0xEE, 0x7F, 0x42, 0xEB},
(0054)   /* Col 4 */ {0x24, 0xF5, 0xDD, 0xF8, 0x7A, 0x77, 0x74, 0xE7},
(0055)   /* Col 5 */ {0x3D, 0x70, 0x7C, 0x94, 0xDC, 0x84, 0xAD, 0x95},
(0056)   /* Col 6 */ {0x1E, 0x6A, 0xF0, 0x37, 0x52, 0x7B, 0x11, 0xD4},
(0057)   /* Col 7 */ {0x62, 0xF5, 0x2B, 0xAA, 0xFC, 0x33, 0xBF, 0xAF},
(0058)   /* Col 8 */ {0x40, 0x56, 0x32, 0xD9, 0x0F, 0xD9, 0x5D, 0x97}
(0059) },
(0060) { /* Row 2 */
(0061)   /* Col 0 */ {0x40, 0x56, 0x32, 0xD9, 0x0F, 0xD9, 0x5D, 0x97},
(0062)   /* Col 1 */ {0x8E, 0x4A, 0xD0, 0xA9, 0xA7, 0xFF, 0x20, 0xCA},
(0063)   /* Col 2 */ {0x4C, 0x97, 0x9D, 0xBF, 0xB8, 0x3D, 0xB5, 0xBE},
(0064)   /* Col 3 */ {0x0C, 0x5D, 0x24, 0x30, 0x9F, 0xCA, 0x6D, 0xBD},
(0065)   /* Col 4 */ {0x50, 0x14, 0x33, 0xDE, 0xF1, 0x78, 0x95, 0xAD},
(0066)   /* Col 5 */ {0x0C, 0x3C, 0xFA, 0xF9, 0xF0, 0xF2, 0x10, 0xC9},
(0067)   /* Col 6 */ {0xF4, 0xDA, 0x06, 0xDB, 0xBF, 0x4E, 0x6F, 0xB3},
(0068)   /* Col 7 */ {0x9E, 0x08, 0xD1, 0xAE, 0x59, 0x5E, 0xE8, 0xF0},
(0069)   /* Col 8 */ {0xC0, 0x90, 0x8F, 0xBB, 0x7C, 0x8E, 0x2B, 0x8E}
(0070) },
(0071) { /* Row 3 */
(0072)   /* Col 0 */ {0xC0, 0x90, 0x8F, 0xBB, 0x7C, 0x8E, 0x2B, 0x8E},
(0073)   /* Col 1 */ {0x80, 0x69, 0x26, 0x80, 0x08, 0xF8, 0x49, 0xE7},
(0074)   /* Col 2 */ {0x7D, 0x2D, 0x49, 0x54, 0xD0, 0x80, 0x40, 0xC1},
(0075)   /* Col 3 */ {0xB6, 0xF2, 0xE6, 0x1B, 0x80, 0x5A, 0x36, 0xB4},
(0076)   /* Col 4 */ {0x42, 0xAE, 0x9C, 0x1C, 0xDA, 0x67, 0x05, 0xF6},
(0077)   /* Col 5 */ {0x9B, 0x75, 0xF7, 0xE0, 0x14, 0x8D, 0xB5, 0x80},
(0078)   /* Col 6 */ {0xBF, 0x54, 0x98, 0xB9, 0xB7, 0x30, 0x5A, 0x88},
(0079)   /* Col 7 */ {0x35, 0xD1, 0xFC, 0x97, 0x23, 0xD4, 0xC9, 0x88},
(0080)   /* Col 8 */ {0x88, 0xE1, 0xD6, 0x31, 0x26, 0x5F, 0xBD, 0x40}
(0081) },
(0082) { /* Row 4 */
(0083)   /* Col 0 */ {0xE1, 0xD6, 0x31, 0x26, 0x5F, 0xBD, 0x40, 0x93},
(0084)   /* Col 1 */ {0xDC, 0x68, 0x08, 0x99, 0x97, 0xAE, 0xAF, 0x8C},
(0085)   /* Col 2 */ {0xC3, 0x0E, 0x01, 0x16, 0x0E, 0x32, 0x06, 0xBA},
(0086)   /* Col 3 */ {0xE0, 0x83, 0x01, 0xFA, 0xAB, 0x3E, 0x8F, 0xAC},
(0087)   /* Col 4 */ {0x5C, 0xD5, 0x9C, 0xB8, 0x46, 0x9C, 0x7D, 0x84},
(0088)   /* Col 5 */ {0xF1, 0xC6, 0xFE, 0x5C, 0x9D, 0xA5, 0x4F, 0xB7},
(0089)   /* Col 6 */ {0x58, 0xB5, 0xB3, 0xDD, 0x0E, 0x28, 0xF1, 0xB0},
(0090)   /* Col 7 */ {0x5F, 0x30, 0x3B, 0x56, 0x96, 0x45, 0xF4, 0xA1},
(0091)   /* Col 8 */ {0x03, 0xBC, 0x6E, 0x8A, 0xEF, 0xBD, 0xFE, 0xF8}
(0092) },};
(0093) 
(0094) 
(0095) static const BYTE init_vals[][2] = {
(0096) //	{CYRF_MODE_OVERRIDE, 0x01},
(0097)     {CYRF_CLK_EN, 0x02},
(0098)     {CYRF_AUTO_CAL_TIME, 0x3c},
(0099)     {CYRF_AUTO_CAL_OFFSET, 0x14},
(0100) 	{CYRF_IO_CFG,0x40}, //IRQ active High 
(0101)     {CYRF_RX_CFG, 0x48},
(0102)     {CYRF_TX_OFFSET_LSB, 0x55},
(0103)     {CYRF_TX_OFFSET_MSB, 0x05},
(0104)     {CYRF_XACT_CFG, 0x24},
(0105)     {CYRF_TX_CFG, 0x38},
(0106)     {CYRF_DATA64_THOLD, 0x0a},
(0107)     {CYRF_XACT_CFG, 0x04},
(0108)     {CYRF_ANALOG_CTRL, 0x01},
(0109)     {CYRF_XACT_CFG, 0x24}, //Force IDLE
(0110)     {CYRF_RX_ABORT, 0x00}, //Clear RX abort
(0111)     {CYRF_DATA64_THOLD, 0x0a}, //set pn correlation threshold
(0112)     {CYRF_FRAMING_CFG, 0x4a}, //set sop len and threshold
(0113)     {CYRF_RX_ABORT, 0x0f}, //Clear RX abort?
(0114) };
(0115) static const BYTE Transmit_vals[][2] = {
(0116)     {CYRF_TX_CFG,0x0F},
(0117) 	{CYRF_FRAMING_CFG, 0xEA},
(0118)     {CYRF_TX_OVERRIDE, 0x00},
(0119)     {CYRF_RX_OVERRIDE, 0x00},
(0120) };
(0121) 
(0122) static const BYTE bind_vals[][2] = {
(0123)     {CYRF_TX_CFG, 0x38|DSM_BIND_POWER}, //Set 64chip, SDR mode
(0124)     {CYRF_FRAMING_CFG, 0x4A}, //set sop len and threshold
(0125)     {CYRF_TX_OVERRIDE, 0x04}, //disable tx CRC
(0126)     {CYRF_RX_OVERRIDE, 0x14}, //disable rx CRC
(0127)     {CYRF_EOP_CTRL, 0x02}, //set EOP sync == 2
(0128) };
(0129) 
(0130) static const BYTE preamble[]={0x04,0x33,0x33};
(0131) static  BYTE tx_cmd[]={0x10,0xC3};
(0132) 
(0133) 
(0134) void DSM_SetRangeCheck(BOOL val)
(0135) {
_DSM_SetRangeCheck:
  val                  --> X-4
    0ACF: 10       PUSH  X
    0AD0: 4F       MOV   X,SP
(0136) if(Rang_Check&& !val)
    0AD1: 62 D0 00 MOV   REG[0xD0],0x0
    0AD4: 3C 6C 00 CMP   [Rang_Check],0x0
    0AD7: A0 11    JZ    0x0AE9
    0AD9: 3D FC 00 CMP   [X-4],0x0
    0ADC: B0 0C    JNZ   0x0AE9
(0137) 	CYRF_WriteRegister(CYRF_TX_CFG,0x28|DSM_TX_POWER);
    0ADE: 50 2F    MOV   A,0x2F
    0AE0: 08       PUSH  A
    0AE1: 50 03    MOV   A,0x3
    0AE3: 08       PUSH  A
    0AE4: 7C 07 7A LCALL _CYRF_WriteRegister
    0AE7: 38 FE    ADD   SP,0xFE
(0138) Rang_Check=val;
    0AE9: 52 FC    MOV   A,[X-4]
    0AEB: 62 D0 00 MOV   REG[0xD0],0x0
    0AEE: 53 6C    MOV   [Rang_Check],A
    0AF0: 20       POP   X
    0AF1: 7F       RET   
(0139) }
(0140) 
(0141) void DSM_SetMode(BYTE mode)
(0142) {
_DSM_SetMode:
  mode                 --> X-4
    0AF2: 10       PUSH  X
    0AF3: 4F       MOV   X,SP
    0AF4: 38 02    ADD   SP,0x2
(0143) Is_DSMX=(mode==DSMX);
    0AF6: 3D FC 18 CMP   [X-4],0x18
    0AF9: B0 09    JNZ   0x0B03
    0AFB: 56 01 01 MOV   [X+1],0x1
    0AFE: 56 00 00 MOV   [X+0],0x0
    0B01: 80 07    JMP   0x0B09
    0B03: 56 01 00 MOV   [X+1],0x0
    0B06: 56 00 00 MOV   [X+0],0x0
    0B09: 52 01    MOV   A,[X+1]
    0B0B: 62 D0 00 MOV   REG[0xD0],0x0
    0B0E: 53 61    MOV   [Is_DSMX],A
    0B10: 38 FE    ADD   SP,0xFE
    0B12: 20       POP   X
    0B13: 7F       RET   
(0144) }
(0145) 
(0146) void calc_dsmx_channel(void)
(0147) {
_calc_dsmx_channel:
  count_52_76          --> X+20
  count_28_51          --> X+18
  count_3_27           --> X+16
  next_ch              --> X+15
  i                    --> X+13
  id                   --> X+5
  id_tmp               --> X+1
  idx                  --> X+0
    0B14: 10       PUSH  X
    0B15: 4F       MOV   X,SP
    0B16: 38 16    ADD   SP,0x16
(0148)     BYTE idx = 0;
    0B18: 56 00 00 MOV   [X+0],0x0
(0149) 	DWORD id_tmp;
(0150)     DWORD id = ~(((DWORD)cyrfmfg_id[0] << 24) | ((DWORD)cyrfmfg_id[1] << 16) | ((DWORD)cyrfmfg_id[2] << 8) | ((DWORD)cyrfmfg_id[3] << 0));
    0B1B: 62 D0 00 MOV   REG[0xD0],0x0
    0B1E: 51 51    MOV   A,[cyrfmfg_id+3]
    0B20: 56 09 00 MOV   [X+9],0x0
    0B23: 56 0A 00 MOV   [X+10],0x0
    0B26: 56 0B 00 MOV   [X+11],0x0
    0B29: 54 0C    MOV   [X+12],A
    0B2B: 51 50    MOV   A,[cyrfmfg_id+2]
    0B2D: 53 38    MOV   [__r7],A
    0B2F: 55 39 00 MOV   [__r6],0x0
    0B32: 55 3A 00 MOV   [__r5],0x0
    0B35: 55 3B 00 MOV   [__r4],0x0
    0B38: 50 08    MOV   A,0x8
    0B3A: 62 D0 00 MOV   REG[0xD0],0x0
    0B3D: 65 38    ASL   [__r7]
    0B3F: 6B 39    RLC   [__r6]
    0B41: 6B 3A    RLC   [__r5]
    0B43: 6B 3B    RLC   [__r4]
    0B45: 78       DEC   A
    0B46: BF F3    JNZ   0x0B3A
    0B48: 51 4F    MOV   A,[cyrfmfg_id+1]
    0B4A: 53 34    MOV   [__r11],A
    0B4C: 55 35 00 MOV   [__r10],0x0
    0B4F: 55 36 00 MOV   [__r9],0x0
    0B52: 55 37 00 MOV   [__r8],0x0
    0B55: 50 10    MOV   A,0x10
    0B57: 62 D0 00 MOV   REG[0xD0],0x0
    0B5A: 65 34    ASL   [__r11]
    0B5C: 6B 35    RLC   [__r10]
    0B5E: 6B 36    RLC   [__r9]
    0B60: 6B 37    RLC   [__r8]
    0B62: 78       DEC   A
    0B63: BF F3    JNZ   0x0B57
    0B65: 51 4E    MOV   A,[cyrfmfg_id]
    0B67: 7C 19 6C LCALL 0x196C
    0B6A: 50 18    MOV   A,0x18
    0B6C: 62 D0 00 MOV   REG[0xD0],0x0
    0B6F: 65 3C    ASL   [__r3]
    0B71: 6B 3D    RLC   [__r2]
    0B73: 6B 3E    RLC   [__r1]
    0B75: 6B 3F    RLC   [__r0]
    0B77: 78       DEC   A
    0B78: BF F3    JNZ   0x0B6C
    0B7A: 51 34    MOV   A,[__r11]
    0B7C: 2C 3C    OR    [__r3],A
    0B7E: 51 35    MOV   A,[__r10]
    0B80: 2C 3D    OR    [__r2],A
    0B82: 51 36    MOV   A,[__r9]
    0B84: 2C 3E    OR    [__r1],A
    0B86: 51 37    MOV   A,[__r8]
    0B88: 2C 3F    OR    [__r0],A
    0B8A: 51 38    MOV   A,[__r7]
    0B8C: 2C 3C    OR    [__r3],A
    0B8E: 51 39    MOV   A,[__r6]
    0B90: 2C 3D    OR    [__r2],A
    0B92: 51 3A    MOV   A,[__r5]
    0B94: 2C 3E    OR    [__r1],A
    0B96: 51 3B    MOV   A,[__r4]
    0B98: 2C 3F    OR    [__r0],A
    0B9A: 52 0C    MOV   A,[X+12]
    0B9C: 2C 3C    OR    [__r3],A
    0B9E: 52 0B    MOV   A,[X+11]
    0BA0: 2C 3D    OR    [__r2],A
    0BA2: 52 0A    MOV   A,[X+10]
    0BA4: 2C 3E    OR    [__r1],A
    0BA6: 52 09    MOV   A,[X+9]
    0BA8: 2C 3F    OR    [__r0],A
    0BAA: 51 3F    MOV   A,[__r0]
    0BAC: 73       CPL   A
    0BAD: 54 05    MOV   [X+5],A
    0BAF: 51 3E    MOV   A,[__r1]
    0BB1: 73       CPL   A
    0BB2: 54 06    MOV   [X+6],A
    0BB4: 51 3D    MOV   A,[__r2]
    0BB6: 73       CPL   A
    0BB7: 54 07    MOV   [X+7],A
    0BB9: 51 3C    MOV   A,[__r3]
    0BBB: 73       CPL   A
    0BBC: 54 08    MOV   [X+8],A
(0151)     id_tmp = id;
    0BBE: 52 05    MOV   A,[X+5]
    0BC0: 54 01    MOV   [X+1],A
    0BC2: 52 06    MOV   A,[X+6]
    0BC4: 54 02    MOV   [X+2],A
    0BC6: 52 07    MOV   A,[X+7]
    0BC8: 54 03    MOV   [X+3],A
    0BCA: 52 08    MOV   A,[X+8]
    0BCC: 54 04    MOV   [X+4],A
    0BCE: 81 89    JMP   0x0D58
(0152)     while(idx < 23) {
(0153)         int i;
(0154)         BYTE next_ch;
(0155) 		int count_3_27 = 0, count_28_51 = 0, count_52_76 = 0;
    0BD0: 56 11 00 MOV   [X+17],0x0
    0BD3: 56 10 00 MOV   [X+16],0x0
    0BD6: 56 13 00 MOV   [X+19],0x0
    0BD9: 56 12 00 MOV   [X+18],0x0
    0BDC: 56 15 00 MOV   [X+21],0x0
    0BDF: 56 14 00 MOV   [X+20],0x0
(0156)         id_tmp = id_tmp * 0x0019660D + 0x3C6EF35F; // Randomization
    0BE2: 62 D0 00 MOV   REG[0xD0],0x0
    0BE5: 52 01    MOV   A,[X+1]
    0BE7: 08       PUSH  A
    0BE8: 52 02    MOV   A,[X+2]
    0BEA: 08       PUSH  A
    0BEB: 52 03    MOV   A,[X+3]
    0BED: 08       PUSH  A
    0BEE: 52 04    MOV   A,[X+4]
    0BF0: 08       PUSH  A
    0BF1: 50 00    MOV   A,0x0
    0BF3: 08       PUSH  A
    0BF4: 50 19    MOV   A,0x19
    0BF6: 08       PUSH  A
    0BF7: 50 66    MOV   A,0x66
    0BF9: 08       PUSH  A
    0BFA: 50 0D    MOV   A,0xD
    0BFC: 08       PUSH  A
    0BFD: 7C 18 8F LCALL 0x188F
    0C00: 38 FC    ADD   SP,0xFC
    0C02: 18       POP   A
    0C03: 53 3C    MOV   [__r3],A
    0C05: 18       POP   A
    0C06: 53 3D    MOV   [__r2],A
    0C08: 18       POP   A
    0C09: 53 3E    MOV   [__r1],A
    0C0B: 18       POP   A
    0C0C: 53 3F    MOV   [__r0],A
    0C0E: 51 3C    MOV   A,[__r3]
    0C10: 01 5F    ADD   A,0x5F
    0C12: 54 04    MOV   [X+4],A
    0C14: 51 3D    MOV   A,[__r2]
    0C16: 09 F3    ADC   A,0xF3
    0C18: 54 03    MOV   [X+3],A
    0C1A: 51 3E    MOV   A,[__r1]
    0C1C: 09 6E    ADC   A,0x6E
    0C1E: 54 02    MOV   [X+2],A
    0C20: 51 3F    MOV   A,[__r0]
    0C22: 09 3C    ADC   A,0x3C
    0C24: 54 01    MOV   [X+1],A
(0157)         next_ch = ((id_tmp >> 8) % 0x49) + 3;       // Use least-significant byte and must be larger than 3
    0C26: 52 01    MOV   A,[X+1]
    0C28: 53 3F    MOV   [__r0],A
    0C2A: 52 02    MOV   A,[X+2]
    0C2C: 53 3E    MOV   [__r1],A
    0C2E: 52 03    MOV   A,[X+3]
    0C30: 53 3D    MOV   [__r2],A
    0C32: 52 04    MOV   A,[X+4]
    0C34: 53 3C    MOV   [__r3],A
    0C36: 50 08    MOV   A,0x8
    0C38: 70 FB    AND   F,0xFB
    0C3A: 62 D0 00 MOV   REG[0xD0],0x0
    0C3D: 6E 3F    RRC   [__r0]
    0C3F: 6E 3E    RRC   [__r1]
    0C41: 6E 3D    RRC   [__r2]
    0C43: 6E 3C    RRC   [__r3]
    0C45: 78       DEC   A
    0C46: BF F1    JNZ   0x0C38
    0C48: 50 00    MOV   A,0x0
    0C4A: 08       PUSH  A
    0C4B: 08       PUSH  A
    0C4C: 08       PUSH  A
    0C4D: 50 49    MOV   A,0x49
    0C4F: 08       PUSH  A
    0C50: 51 3F    MOV   A,[__r0]
    0C52: 08       PUSH  A
    0C53: 51 3E    MOV   A,[__r1]
    0C55: 08       PUSH  A
    0C56: 51 3D    MOV   A,[__r2]
    0C58: 08       PUSH  A
    0C59: 51 3C    MOV   A,[__r3]
    0C5B: 08       PUSH  A
    0C5C: 7C 17 83 LCALL 0x1783
    0C5F: 38 FC    ADD   SP,0xFC
    0C61: 18       POP   A
    0C62: 53 3C    MOV   [__r3],A
    0C64: 18       POP   A
    0C65: 18       POP   A
    0C66: 18       POP   A
    0C67: 06 3C 03 ADD   [__r3],0x3
    0C6A: 51 3C    MOV   A,[__r3]
    0C6C: 54 0F    MOV   [X+15],A
(0158)         if (((next_ch ^ id) & 0x01 )== 0)
    0C6E: 52 0F    MOV   A,[X+15]
    0C70: 7C 19 6C LCALL 0x196C
    0C73: 52 08    MOV   A,[X+8]
    0C75: 34 3C    XOR   [__r3],A
    0C77: 52 07    MOV   A,[X+7]
    0C79: 34 3D    XOR   [__r2],A
    0C7B: 52 06    MOV   A,[X+6]
    0C7D: 34 3E    XOR   [__r1],A
    0C7F: 52 05    MOV   A,[X+5]
    0C81: 34 3F    XOR   [__r0],A
    0C83: 26 3C 01 AND   [__r3],0x1
    0C86: 26 3D 00 AND   [__r2],0x0
    0C89: 26 3E 00 AND   [__r1],0x0
    0C8C: 26 3F 00 AND   [__r0],0x0
    0C8F: B0 12    JNZ   0x0CA2
    0C91: 3C 3E 00 CMP   [__r1],0x0
    0C94: B0 0D    JNZ   0x0CA2
    0C96: 3C 3D 00 CMP   [__r2],0x0
    0C99: B0 08    JNZ   0x0CA2
    0C9B: 3C 3C 00 CMP   [__r3],0x0
    0C9E: B0 03    JNZ   0x0CA2
(0159)             continue;
    0CA0: 80 B7    JMP   0x0D58
(0160)         for (i = 0; i < idx; i++) {
    0CA2: 56 0E 00 MOV   [X+14],0x0
    0CA5: 56 0D 00 MOV   [X+13],0x0
    0CA8: 80 38    JMP   0x0CE1
(0161)             if(channels[i] == next_ch)
    0CAA: 7C 18 F2 LCALL 0x18F2
    0CAD: 3B 0F    CMP   A,[X+15]
    0CAF: B0 03    JNZ   0x0CB3
(0162)                 break;
    0CB1: 80 48    JMP   0x0CFA
(0163)             if(channels[i] <= 27)
    0CB3: 7C 18 F2 LCALL 0x18F2
    0CB6: 53 3F    MOV   [__r0],A
    0CB8: 50 1B    MOV   A,0x1B
    0CBA: 3A 3F    CMP   A,[__r0]
    0CBC: C0 08    JC    0x0CC5
(0164)                 count_3_27++;
    0CBE: 77 11    INC   [X+17]
    0CC0: 0F 10 00 ADC   [X+16],0x0
    0CC3: 80 18    JMP   0x0CDC
(0165)             else if (channels[i] <= 51)
    0CC5: 7C 18 F2 LCALL 0x18F2
    0CC8: 53 3F    MOV   [__r0],A
    0CCA: 50 33    MOV   A,0x33
    0CCC: 3A 3F    CMP   A,[__r0]
    0CCE: C0 08    JC    0x0CD7
(0166)                 count_28_51++;
    0CD0: 77 13    INC   [X+19]
    0CD2: 0F 12 00 ADC   [X+18],0x0
    0CD5: 80 06    JMP   0x0CDC
(0167)             else
(0168)                 count_52_76++;
    0CD7: 77 15    INC   [X+21]
    0CD9: 0F 14 00 ADC   [X+20],0x0
(0169)         }
    0CDC: 77 0E    INC   [X+14]
    0CDE: 0F 0D 00 ADC   [X+13],0x0
    0CE1: 62 D0 00 MOV   REG[0xD0],0x0
    0CE4: 52 00    MOV   A,[X+0]
    0CE6: 53 3E    MOV   [__r1],A
    0CE8: 52 0E    MOV   A,[X+14]
    0CEA: 12 3E    SUB   A,[__r1]
    0CEC: 50 00    MOV   A,0x0
    0CEE: 31 80    XOR   A,0x80
    0CF0: 53 33    MOV   [__rX],A
    0CF2: 52 0D    MOV   A,[X+13]
    0CF4: 31 80    XOR   A,0x80
    0CF6: 1A 33    SBB   A,[__rX]
    0CF8: CF B1    JC    0x0CAA
(0170)         if (i != idx)
    0CFA: 7C 18 E7 LCALL <created procedures>
    0CFD: 52 0D    MOV   A,[X+13]
    0CFF: 3A 3F    CMP   A,[__r0]
    0D01: B0 07    JNZ   0x0D09
    0D03: 52 0E    MOV   A,[X+14]
    0D05: 3A 3E    CMP   A,[__r1]
    0D07: A0 03    JZ    0x0D0B
(0171)             continue;
    0D09: 80 4E    JMP   0x0D58
(0172)         if ((next_ch < 28 && count_3_27 < 8)
    0D0B: 3D 0F 1C CMP   [X+15],0x1C
    0D0E: D0 0D    JNC   0x0D1C
    0D10: 52 11    MOV   A,[X+17]
    0D12: 11 08    SUB   A,0x8
    0D14: 52 10    MOV   A,[X+16]
    0D16: 31 80    XOR   A,0x80
    0D18: 19 80    SBB   A,0x80
    0D1A: C0 28    JC    0x0D43
    0D1C: 3D 0F 1C CMP   [X+15],0x1C
    0D1F: C0 12    JC    0x0D32
    0D21: 3D 0F 34 CMP   [X+15],0x34
    0D24: D0 0D    JNC   0x0D32
    0D26: 52 13    MOV   A,[X+19]
    0D28: 11 07    SUB   A,0x7
    0D2A: 52 12    MOV   A,[X+18]
    0D2C: 31 80    XOR   A,0x80
    0D2E: 19 80    SBB   A,0x80
    0D30: C0 12    JC    0x0D43
    0D32: 3D 0F 34 CMP   [X+15],0x34
    0D35: C0 22    JC    0x0D58
    0D37: 52 15    MOV   A,[X+21]
    0D39: 11 08    SUB   A,0x8
    0D3B: 52 14    MOV   A,[X+20]
    0D3D: 31 80    XOR   A,0x80
    0D3F: 19 80    SBB   A,0x80
    0D41: D0 16    JNC   0x0D58
(0173)           ||(next_ch >= 28 && next_ch < 52 && count_28_51 < 7)
(0174)           ||(next_ch >= 52 && count_52_76 < 8))
(0175)         {
(0176)             channels[idx++] = next_ch;
    0D43: 7C 18 E7 LCALL <created procedures>
    0D46: 01 01    ADD   A,0x1
    0D48: 54 00    MOV   [X+0],A
    0D4A: 06 3E 0A ADD   [__r1],0xA
    0D4D: 0E 3F 00 ADC   [__r0],0x0
    0D50: 51 3F    MOV   A,[__r0]
    0D52: 60 D5    MOV   REG[0xD5],A
    0D54: 52 0F    MOV   A,[X+15]
    0D56: 3F 3E    MVI   [__r1],A
(0177)         }
(0178)     }
    0D58: 3D 00 17 CMP   [X+0],0x17
    0D5B: CE 74    JC    0x0BD0
    0D5D: 38 EA    ADD   SP,0xEA
    0D5F: 20       POP   X
    0D60: 7F       RET   
(0179) }
(0180) 
(0181) void SetTimer(void)
(0182) {
(0183) 	if(Ch_A)
_SetTimer:
    0D61: 62 D0 00 MOV   REG[0xD0],0x0
    0D64: 3C 62 00 CMP   [Ch_A],0x0
    0D67: A0 0C    JZ    0x0D74
(0184) 	{
(0185) 		Timer_SetPeriod(4000);
    0D69: 10       PUSH  X
    0D6A: 57 0F    MOV   X,0xF
    0D6C: 50 A0    MOV   A,0xA0
    0D6E: 7C 06 9E LCALL _Counter16_1_WritePeriod
    0D71: 20       POP   X
(0186) 	}
    0D72: 80 0A    JMP   0x0D7D
(0187) 	else
(0188) 	{
(0189) 		Timer_SetPeriod(11000+7000);
    0D74: 10       PUSH  X
    0D75: 57 46    MOV   X,0x46
    0D77: 50 50    MOV   A,0x50
    0D79: 7C 06 9E LCALL _Counter16_1_WritePeriod
    0D7C: 20       POP   X
(0190) 	}
    0D7D: 7F       RET   
(0191) }
(0192) 
(0193) void SetCH_CRC_SOP_DATA(void)
(0194) {
_SetCH_CRC_SOP_DATA:
  CRCSeed              --> X+2
  pn_row               --> X+1
  channel              --> X+0
    0D7E: 10       PUSH  X
    0D7F: 4F       MOV   X,SP
    0D80: 38 08    ADD   SP,0x8
(0195) 	BYTE channel=channels[chidx];
    0D82: 62 D0 00 MOV   REG[0xD0],0x0
    0D85: 51 6E    MOV   A,[chidx]
    0D87: 53 3E    MOV   [__r1],A
    0D89: 55 3F 00 MOV   [__r0],0x0
    0D8C: 06 3E 0A ADD   [__r1],0xA
    0D8F: 0E 3F 00 ADC   [__r0],0x0
    0D92: 51 3F    MOV   A,[__r0]
    0D94: 60 D4    MOV   REG[0xD4],A
    0D96: 3E 3E    MVI   A,[__r1]
    0D98: 54 00    MOV   [X+0],A
    0D9A: 3C 61 00 CMP   [Is_DSMX],0x0
    0D9D: A0 27    JZ    0x0DC5
    0D9F: 52 00    MOV   A,[X+0]
    0DA1: 53 3E    MOV   [__r1],A
    0DA3: 55 3F 00 MOV   [__r0],0x0
    0DA6: 16 3E 02 SUB   [__r1],0x2
    0DA9: 1E 3F 00 SBB   [__r0],0x0
    0DAC: 50 00    MOV   A,0x0
    0DAE: 08       PUSH  A
    0DAF: 50 05    MOV   A,0x5
    0DB1: 08       PUSH  A
    0DB2: 51 3F    MOV   A,[__r0]
    0DB4: 08       PUSH  A
    0DB5: 51 3E    MOV   A,[__r1]
    0DB7: 08       PUSH  A
    0DB8: 7C 17 35 LCALL 0x1735
    0DBB: 38 FE    ADD   SP,0xFE
    0DBD: 18       POP   A
    0DBE: 54 05    MOV   [X+5],A
    0DC0: 18       POP   A
    0DC1: 54 04    MOV   [X+4],A
    0DC3: 80 1F    JMP   0x0DE3
    0DC5: 62 D0 00 MOV   REG[0xD0],0x0
    0DC8: 52 00    MOV   A,[X+0]
    0DCA: 53 3E    MOV   [__r1],A
    0DCC: 50 00    MOV   A,0x0
    0DCE: 08       PUSH  A
    0DCF: 50 05    MOV   A,0x5
    0DD1: 08       PUSH  A
    0DD2: 50 00    MOV   A,0x0
    0DD4: 08       PUSH  A
    0DD5: 51 3E    MOV   A,[__r1]
    0DD7: 08       PUSH  A
    0DD8: 7C 17 35 LCALL 0x1735
    0DDB: 38 FE    ADD   SP,0xFE
    0DDD: 18       POP   A
    0DDE: 54 05    MOV   [X+5],A
    0DE0: 18       POP   A
    0DE1: 54 04    MOV   [X+4],A
    0DE3: 52 05    MOV   A,[X+5]
    0DE5: 54 01    MOV   [X+1],A
(0196) 	BYTE pn_row = Is_DSMX ? (channel - 2)%5 : channel%5;
(0197) 	WORD CRCSeed=Ch_A?~((cyrfmfg_id[0] << 8) + cyrfmfg_id[1]):((cyrfmfg_id[0] << 8) + cyrfmfg_id[1]);
    0DE7: 62 D0 00 MOV   REG[0xD0],0x0
    0DEA: 3C 62 00 CMP   [Ch_A],0x0
    0DED: A0 15    JZ    0x0E03
    0DEF: 51 4F    MOV   A,[cyrfmfg_id+1]
    0DF1: 53 3E    MOV   [__r1],A
    0DF3: 51 4E    MOV   A,[cyrfmfg_id]
    0DF5: 53 3F    MOV   [__r0],A
    0DF7: 51 3E    MOV   A,[__r1]
    0DF9: 73       CPL   A
    0DFA: 54 07    MOV   [X+7],A
    0DFC: 51 3F    MOV   A,[__r0]
    0DFE: 73       CPL   A
    0DFF: 54 06    MOV   [X+6],A
    0E01: 80 0C    JMP   0x0E0E
    0E03: 62 D0 00 MOV   REG[0xD0],0x0
    0E06: 51 4F    MOV   A,[cyrfmfg_id+1]
    0E08: 54 07    MOV   [X+7],A
    0E0A: 51 4E    MOV   A,[cyrfmfg_id]
    0E0C: 54 06    MOV   [X+6],A
    0E0E: 52 07    MOV   A,[X+7]
    0E10: 54 03    MOV   [X+3],A
    0E12: 52 06    MOV   A,[X+6]
    0E14: 54 02    MOV   [X+2],A
(0198) 
(0199) 	CYRF_SetRFChannel(channel);
    0E16: 52 00    MOV   A,[X+0]
    0E18: 08       PUSH  A
    0E19: 50 00    MOV   A,0x0
    0E1B: 08       PUSH  A
    0E1C: 7C 07 7A LCALL _CYRF_WriteRegister
(0200) 	
(0201) 	CYRF_SetCRCSeed(CRCSeed);
    0E1F: 52 02    MOV   A,[X+2]
    0E21: 08       PUSH  A
    0E22: 52 03    MOV   A,[X+3]
    0E24: 08       PUSH  A
    0E25: 50 15    MOV   A,0x15
    0E27: 08       PUSH  A
    0E28: 7C 07 B9 LCALL _CYRF_WriteDoubleRegister
    0E2B: 38 FB    ADD   SP,0xFB
(0202)     CYRF_SetSOPCode(pncodes[pn_row][sop_col]);
    0E2D: 50 08    MOV   A,0x8
    0E2F: 08       PUSH  A
    0E30: 62 D0 00 MOV   REG[0xD0],0x0
    0E33: 52 01    MOV   A,[X+1]
    0E35: 53 3E    MOV   [__r1],A
    0E37: 50 00    MOV   A,0x0
    0E39: 08       PUSH  A
    0E3A: 51 3E    MOV   A,[__r1]
    0E3C: 08       PUSH  A
    0E3D: 50 00    MOV   A,0x0
    0E3F: 08       PUSH  A
    0E40: 50 48    MOV   A,0x48
    0E42: 08       PUSH  A
    0E43: 7C 18 5F LCALL 0x185F
    0E46: 38 FC    ADD   SP,0xFC
    0E48: 51 33    MOV   A,[__rX]
    0E4A: 53 3E    MOV   [__r1],A
    0E4C: 51 32    MOV   A,[__rY]
    0E4E: 53 3F    MOV   [__r0],A
    0E50: 06 3E 70 ADD   [__r1],0x70
    0E53: 0E 3F 01 ADC   [__r0],0x1
    0E56: 62 D0 00 MOV   REG[0xD0],0x0
    0E59: 51 63    MOV   A,[sop_col]
    0E5B: 53 3C    MOV   [__r3],A
    0E5D: 55 3D 00 MOV   [__r2],0x0
    0E60: 65 3C    ASL   [__r3]
    0E62: 6B 3D    RLC   [__r2]
    0E64: 65 3C    ASL   [__r3]
    0E66: 6B 3D    RLC   [__r2]
    0E68: 65 3C    ASL   [__r3]
    0E6A: 6B 3D    RLC   [__r2]
    0E6C: 51 3C    MOV   A,[__r3]
    0E6E: 02 3E    ADD   A,[__r1]
    0E70: 53 3E    MOV   [__r1],A
    0E72: 51 3D    MOV   A,[__r2]
    0E74: 0A 3F    ADC   A,[__r0]
    0E76: 08       PUSH  A
    0E77: 51 3E    MOV   A,[__r1]
    0E79: 08       PUSH  A
    0E7A: 50 22    MOV   A,0x22
    0E7C: 08       PUSH  A
    0E7D: 7C 08 2D LCALL _CYRF_WriteRegisterMulti
    0E80: 38 FC    ADD   SP,0xFC
(0203)     CYRF_SetDataCode(pncodes[pn_row][data_col], 16);
    0E82: 50 10    MOV   A,0x10
    0E84: 08       PUSH  A
    0E85: 62 D0 00 MOV   REG[0xD0],0x0
    0E88: 52 01    MOV   A,[X+1]
    0E8A: 53 3E    MOV   [__r1],A
    0E8C: 50 00    MOV   A,0x0
    0E8E: 08       PUSH  A
    0E8F: 51 3E    MOV   A,[__r1]
    0E91: 08       PUSH  A
    0E92: 50 00    MOV   A,0x0
    0E94: 08       PUSH  A
    0E95: 50 48    MOV   A,0x48
    0E97: 08       PUSH  A
    0E98: 7C 18 5F LCALL 0x185F
    0E9B: 38 FC    ADD   SP,0xFC
    0E9D: 51 33    MOV   A,[__rX]
    0E9F: 53 3E    MOV   [__r1],A
    0EA1: 51 32    MOV   A,[__rY]
    0EA3: 53 3F    MOV   [__r0],A
    0EA5: 06 3E 70 ADD   [__r1],0x70
    0EA8: 0E 3F 01 ADC   [__r0],0x1
    0EAB: 62 D0 00 MOV   REG[0xD0],0x0
    0EAE: 51 64    MOV   A,[data_col]
    0EB0: 53 3C    MOV   [__r3],A
    0EB2: 55 3D 00 MOV   [__r2],0x0
    0EB5: 65 3C    ASL   [__r3]
    0EB7: 6B 3D    RLC   [__r2]
    0EB9: 65 3C    ASL   [__r3]
    0EBB: 6B 3D    RLC   [__r2]
    0EBD: 65 3C    ASL   [__r3]
    0EBF: 6B 3D    RLC   [__r2]
    0EC1: 51 3C    MOV   A,[__r3]
    0EC3: 02 3E    ADD   A,[__r1]
    0EC5: 53 3E    MOV   [__r1],A
    0EC7: 51 3D    MOV   A,[__r2]
    0EC9: 0A 3F    ADC   A,[__r0]
    0ECB: 08       PUSH  A
    0ECC: 51 3E    MOV   A,[__r1]
    0ECE: 08       PUSH  A
    0ECF: 50 23    MOV   A,0x23
    0ED1: 08       PUSH  A
    0ED2: 7C 08 2D LCALL _CYRF_WriteRegisterMulti
    0ED5: 38 FC    ADD   SP,0xFC
(0204)     if(Is_DSMX)
    0ED7: 62 D0 00 MOV   REG[0xD0],0x0
    0EDA: 3C 61 00 CMP   [Is_DSMX],0x0
    0EDD: A0 1A    JZ    0x0EF8
    0EDF: 51 6E    MOV   A,[chidx]
    0EE1: 01 01    ADD   A,0x1
    0EE3: 53 3F    MOV   [__r0],A
    0EE5: 50 17    MOV   A,0x17
    0EE7: 08       PUSH  A
    0EE8: 51 3F    MOV   A,[__r0]
    0EEA: 08       PUSH  A
    0EEB: 7C 17 92 LCALL 0x1792
    0EEE: 38 FF    ADD   SP,0xFF
    0EF0: 18       POP   A
    0EF1: 62 D0 00 MOV   REG[0xD0],0x0
    0EF4: 53 6E    MOV   [chidx],A
    0EF6: 80 1B    JMP   0x0F12
(0205)         chidx = (chidx + 1) % 23;
(0206)     else
(0207)         chidx = (chidx + 1) % 2;
    0EF8: 62 D0 00 MOV   REG[0xD0],0x0
    0EFB: 51 6E    MOV   A,[chidx]
    0EFD: 01 01    ADD   A,0x1
    0EFF: 53 3F    MOV   [__r0],A
    0F01: 50 02    MOV   A,0x2
    0F03: 08       PUSH  A
    0F04: 51 3F    MOV   A,[__r0]
    0F06: 08       PUSH  A
    0F07: 7C 17 92 LCALL 0x1792
    0F0A: 38 FF    ADD   SP,0xFF
    0F0C: 18       POP   A
    0F0D: 62 D0 00 MOV   REG[0xD0],0x0
    0F10: 53 6E    MOV   [chidx],A
    0F12: 38 F8    ADD   SP,0xF8
    0F14: 20       POP   X
    0F15: 7F       RET   
(0208) }
(0209) 
(0210) void DSM_Load_Config(const BYTE vals[][2],BYTE cnt)
(0211) {
_DSM_Load_Config:
  n                    --> X+0
  cnt                  --> X-6
  vals                 --> X-5
    0F16: 10       PUSH  X
    0F17: 4F       MOV   X,SP
    0F18: 38 01    ADD   SP,0x1
(0212) BYTE n;
(0213) for(n=0;n<cnt;n++)
    0F1A: 56 00 00 MOV   [X+0],0x0
    0F1D: 80 2F    JMP   0x0F4D
(0214) 	{
(0215) 	CYRF_WriteRegister(vals[n][0],vals[n][1]);
    0F1F: 7C 18 E7 LCALL <created procedures>
    0F22: 65 3E    ASL   [__r1]
    0F24: 6B 3F    RLC   [__r0]
    0F26: 52 FC    MOV   A,[X-4]
    0F28: 04 3E    ADD   [__r1],A
    0F2A: 52 FB    MOV   A,[X-5]
    0F2C: 0C 3F    ADC   [__r0],A
    0F2E: 51 3E    MOV   A,[__r1]
    0F30: 01 01    ADD   A,0x1
    0F32: 53 3C    MOV   [__r3],A
    0F34: 51 3F    MOV   A,[__r0]
    0F36: 09 00    ADC   A,0x0
    0F38: 10       PUSH  X
    0F39: 58 3C    MOV   X,[__r3]
    0F3B: 28       ROMX  
    0F3C: 20       POP   X
    0F3D: 08       PUSH  A
    0F3E: 51 3F    MOV   A,[__r0]
    0F40: 10       PUSH  X
    0F41: 58 3E    MOV   X,[__r1]
    0F43: 28       ROMX  
    0F44: 20       POP   X
    0F45: 08       PUSH  A
    0F46: 7C 07 7A LCALL _CYRF_WriteRegister
    0F49: 38 FE    ADD   SP,0xFE
(0216) 	}
    0F4B: 77 00    INC   [X+0]
    0F4D: 52 00    MOV   A,[X+0]
    0F4F: 3B FA    CMP   A,[X-6]
    0F51: CF CD    JC    0x0F1F
    0F53: 38 FF    ADD   SP,0xFF
    0F55: 20       POP   X
    0F56: 7F       RET   
(0217) }
(0218) 
(0219) 
(0220) void DSM_build_bind_packet(void)
(0221) {
_DSM_build_bind_packet:
  sum                  --> X+1
  i                    --> X+0
    0F57: 10       PUSH  X
    0F58: 4F       MOV   X,SP
    0F59: 38 05    ADD   SP,0x5
(0222)     BYTE i;
(0223)     WORD sum = 384 - 0x10;
    0F5B: 56 02 70 MOV   [X+2],0x70
    0F5E: 56 01 01 MOV   [X+1],0x1
(0224)     tx_buf[0] = ~cyrfmfg_id[0];
    0F61: 62 D0 00 MOV   REG[0xD0],0x0
    0F64: 51 4E    MOV   A,[cyrfmfg_id]
    0F66: 73       CPL   A
    0F67: 53 21    MOV   [tx_buf],A
    0F69: 51 4F    MOV   A,[cyrfmfg_id+1]
    0F6B: 73       CPL   A
    0F6C: 53 22    MOV   [tx_buf+1],A
    0F6E: 51 50    MOV   A,[cyrfmfg_id+2]
    0F70: 73       CPL   A
    0F71: 53 23    MOV   [tx_buf+2],A
    0F73: 51 51    MOV   A,[cyrfmfg_id+3]
    0F75: 73       CPL   A
    0F76: 53 24    MOV   [tx_buf+3],A
(0225)     tx_buf[1] = ~cyrfmfg_id[1];
(0226)     tx_buf[2] = ~cyrfmfg_id[2];
(0227)     tx_buf[3] = ~cyrfmfg_id[3];
(0228)     tx_buf[4] = tx_buf[0];
    0F78: 51 21    MOV   A,[tx_buf]
    0F7A: 53 25    MOV   [tx_buf+4],A
(0229)     tx_buf[5] = tx_buf[1];
    0F7C: 51 22    MOV   A,[tx_buf+1]
    0F7E: 53 26    MOV   [tx_buf+5],A
(0230)     tx_buf[6] = tx_buf[2];
    0F80: 51 23    MOV   A,[tx_buf+2]
    0F82: 53 27    MOV   [tx_buf+6],A
(0231)     tx_buf[7] = tx_buf[3];
    0F84: 51 24    MOV   A,[tx_buf+3]
    0F86: 53 28    MOV   [tx_buf+7],A
(0232)     for(i = 0; i < 8; i++)
    0F88: 56 00 00 MOV   [X+0],0x0
    0F8B: 80 19    JMP   0x0FA5
(0233)         sum += tx_buf[i];
    0F8D: 7C 18 E7 LCALL <created procedures>
    0F90: 06 3E 21 ADD   [__r1],0x21
    0F93: 0E 3F 00 ADC   [__r0],0x0
    0F96: 51 3F    MOV   A,[__r0]
    0F98: 60 D4    MOV   REG[0xD4],A
    0F9A: 3E 3E    MVI   A,[__r1]
    0F9C: 05 02    ADD   [X+2],A
    0F9E: 50 00    MOV   A,0x0
    0FA0: 0F 01 00 ADC   [X+1],0x0
    0FA3: 77 00    INC   [X+0]
    0FA5: 3D 00 08 CMP   [X+0],0x8
    0FA8: CF E4    JC    0x0F8D
(0234)     tx_buf[8] = sum >> 8;
    0FAA: 52 01    MOV   A,[X+1]
    0FAC: 62 D0 00 MOV   REG[0xD0],0x0
    0FAF: 53 29    MOV   [tx_buf+8],A
(0235)     tx_buf[9] = sum & 0xff;
    0FB1: 52 02    MOV   A,[X+2]
    0FB3: 53 2A    MOV   [tx_buf+9],A
(0236)     tx_buf[10] = 0x01; //?Air 0x2; //surface 
    0FB5: 55 2B 01 MOV   [tx_buf+10],0x1
    0FB8: 51 6B    MOV   A,[num_channels]
    0FBA: 53 2C    MOV   [tx_buf+11],A
    0FBC: 3C 61 00 CMP   [Is_DSMX],0x0
    0FBF: A0 09    JZ    0x0FC9
    0FC1: 56 04 A2 MOV   [X+4],0xA2
    0FC4: 56 03 00 MOV   [X+3],0x0
    0FC7: 80 07    JMP   0x0FCF
    0FC9: 56 04 01 MOV   [X+4],0x1
    0FCC: 56 03 00 MOV   [X+3],0x0
    0FCF: 52 04    MOV   A,[X+4]
    0FD1: 62 D0 00 MOV   REG[0xD0],0x0
    0FD4: 53 2D    MOV   [tx_buf+12],A
(0237)     tx_buf[11] =num_channels;
(0238)         tx_buf[12] = Is_DSMX?0xA2:0x01;
(0239)     tx_buf[13] = 0x00; //???
    0FD6: 55 2E 00 MOV   [tx_buf+13],0x0
(0240)     for(i = 8; i < 14; i++)
    0FD9: 56 00 08 MOV   [X+0],0x8
    0FDC: 80 19    JMP   0x0FF6
(0241)         sum += tx_buf[i];
    0FDE: 7C 18 E7 LCALL <created procedures>
    0FE1: 06 3E 21 ADD   [__r1],0x21
    0FE4: 0E 3F 00 ADC   [__r0],0x0
    0FE7: 51 3F    MOV   A,[__r0]
    0FE9: 60 D4    MOV   REG[0xD4],A
    0FEB: 3E 3E    MVI   A,[__r1]
    0FED: 05 02    ADD   [X+2],A
    0FEF: 50 00    MOV   A,0x0
    0FF1: 0F 01 00 ADC   [X+1],0x0
    0FF4: 77 00    INC   [X+0]
    0FF6: 3D 00 0E CMP   [X+0],0xE
    0FF9: CF E4    JC    0x0FDE
(0242)     tx_buf[14] = sum >> 8;
    0FFB: 52 01    MOV   A,[X+1]
    0FFD: 62 D0 00 MOV   REG[0xD0],0x0
    1000: 53 2F    MOV   [tx_buf+14],A
(0243)     tx_buf[15] = sum & 0xff;
    1002: 52 02    MOV   A,[X+2]
    1004: 53 30    MOV   [tx_buf+15],A
    1006: 38 FB    ADD   SP,0xFB
    1008: 20       POP   X
    1009: 7F       RET   
(0244) }
(0245) void Xmit_cb(void)
(0246) {
_Xmit_cb:
    100A: 10       PUSH  X
    100B: 4F       MOV   X,SP
    100C: 38 02    ADD   SP,0x2
(0247) 	CYRF_WriteRegisterInc(CYRF_TX_LENGTH,tx_cmd,sizeof(tx_cmd)/sizeof(BYTE));
    100E: 50 02    MOV   A,0x2
    1010: 08       PUSH  A
    1011: 50 00    MOV   A,0x0
    1013: 08       PUSH  A
    1014: 50 5D    MOV   A,0x5D
    1016: 08       PUSH  A
    1017: 50 01    MOV   A,0x1
    1019: 08       PUSH  A
    101A: 7C 08 D8 LCALL _CYRF_WriteRegisterInc
(0248) 	CYRF_WriteTx_Data(tx_buf);
    101D: 50 10    MOV   A,0x10
    101F: 08       PUSH  A
    1020: 50 00    MOV   A,0x0
    1022: 08       PUSH  A
    1023: 50 21    MOV   A,0x21
    1025: 08       PUSH  A
    1026: 50 20    MOV   A,0x20
    1028: 08       PUSH  A
    1029: 7C 08 83 LCALL _CYRF_WriteRegisterMultiD
    102C: 38 F8    ADD   SP,0xF8
(0249) 	if (Bind_cnt)
    102E: 62 D0 00 MOV   REG[0xD0],0x0
    1031: 3C 65 00 CMP   [Bind_cnt],0x0
    1034: A0 03    JZ    0x1038
(0250) 	{
(0251) 		return;
    1036: 80 1E    JMP   0x1055
(0252) 	}
(0253) 	Ch_A=!Ch_A;
    1038: 62 D0 00 MOV   REG[0xD0],0x0
    103B: 3C 62 00 CMP   [Ch_A],0x0
    103E: B0 09    JNZ   0x1048
    1040: 56 01 01 MOV   [X+1],0x1
    1043: 56 00 00 MOV   [X+0],0x0
    1046: 80 07    JMP   0x104E
    1048: 56 01 00 MOV   [X+1],0x0
    104B: 56 00 00 MOV   [X+0],0x0
    104E: 52 01    MOV   A,[X+1]
    1050: 62 D0 00 MOV   REG[0xD0],0x0
    1053: 53 62    MOV   [Ch_A],A
    1055: 38 FE    ADD   SP,0xFE
    1057: 20       POP   X
    1058: 7F       RET   
(0254) }
(0255) 
(0256) void DSM_initialize_bind(void)
(0257) {
(0258) 	Bind_cnt=201;
_DSM_initialize_bind:
    1059: 62 D0 00 MOV   REG[0xD0],0x0
    105C: 55 65 C9 MOV   [Bind_cnt],0xC9
(0259) 	calc_dsmx_channel();
    105F: 9A B3    CALL  _calc_dsmx_channel
(0260) 	DSM_Load_Config(bind_vals,sizeof(bind_vals)/(sizeof(BYTE)*2));
    1061: 50 05    MOV   A,0x5
    1063: 08       PUSH  A
    1064: 50 03    MOV   A,0x3
    1066: 08       PUSH  A
    1067: 50 02    MOV   A,0x2
    1069: 08       PUSH  A
    106A: 9E AA    CALL  _DSM_Load_Config
    106C: 38 FD    ADD   SP,0xFD
(0261) 	CYRF_SetRFChannel(bind_channal);
    106E: 62 D0 00 MOV   REG[0xD0],0x0
    1071: 51 6A    MOV   A,[bind_channal]
    1073: 08       PUSH  A
    1074: 50 00    MOV   A,0x0
    1076: 08       PUSH  A
    1077: 7C 07 7A LCALL _CYRF_WriteRegister
(0262) 	CYRF_SetDataCode(pncodes[0][8], 16);
    107A: 50 10    MOV   A,0x10
    107C: 08       PUSH  A
    107D: 50 01    MOV   A,0x1
    107F: 08       PUSH  A
    1080: 50 B0    MOV   A,0xB0
    1082: 08       PUSH  A
    1083: 50 23    MOV   A,0x23
    1085: 08       PUSH  A
    1086: 7C 08 2D LCALL _CYRF_WriteRegisterMulti
    1089: 38 FA    ADD   SP,0xFA
(0263) 	DSM_build_bind_packet();
    108B: 9E CA    CALL  _DSM_build_bind_packet
(0264) 	Timer_SetPeriod(10000);
    108D: 10       PUSH  X
    108E: 57 27    MOV   X,0x27
    1090: 50 10    MOV   A,0x10
    1092: 7C 06 9E LCALL _Counter16_1_WritePeriod
    1095: 20       POP   X
(0265) 	Timer_SetCallback(Xmit_cb);
    1096: 50 03    MOV   A,0x3
    1098: 08       PUSH  A
    1099: 50 C5    MOV   A,0xC5
    109B: 08       PUSH  A
    109C: 7C 15 EB LCALL _Timer_SetCallback
    109F: 38 FE    ADD   SP,0xFE
(0266) 	Timer_Start();
    10A1: 10       PUSH  X
    10A2: 7C 06 96 LCALL _Counter16_1_DisableInt|Counter16_1_Start|_Counter16_1_Start
    10A5: 20       POP   X
    10A6: 7F       RET   
(0267) 	
(0268) }
(0269) #define BITS 11
(0270) #define BITSHIFT (BITS-8)
(0271) #define BITMASK ((1<<BITSHIFT)-1)
(0272) static const BYTE ch_map[] = {(1<<BITSHIFT),(5<<BITSHIFT),(2<<BITSHIFT),(3<<BITSHIFT),(0<<BITSHIFT),(4<<BITSHIFT),0xff};
(0273) void DSM_build_data_packet(BYTE data[])
(0274) {
_DSM_build_data_packet:
  i                    --> X+0
  data                 --> X-5
    10A7: 10       PUSH  X
    10A8: 4F       MOV   X,SP
    10A9: 38 01    ADD   SP,0x1
(0275) BYTE i;
(0276) 
(0277)    if (Is_DSMX) {
    10AB: 62 D0 00 MOV   REG[0xD0],0x0
    10AE: 3C 61 00 CMP   [Is_DSMX],0x0
    10B1: A0 0B    JZ    0x10BD
    10B3: 51 50    MOV   A,[cyrfmfg_id+2]
    10B5: 53 21    MOV   [tx_buf],A
    10B7: 51 51    MOV   A,[cyrfmfg_id+3]
    10B9: 53 22    MOV   [tx_buf+1],A
(0278)         tx_buf[0] = cyrfmfg_id[2];
(0279)         tx_buf[1] = cyrfmfg_id[3];
(0280)     } else {
    10BB: 80 0E    JMP   0x10CA
(0281)         tx_buf[0] = ~cyrfmfg_id[2];
    10BD: 62 D0 00 MOV   REG[0xD0],0x0
    10C0: 51 50    MOV   A,[cyrfmfg_id+2]
    10C2: 73       CPL   A
    10C3: 53 21    MOV   [tx_buf],A
    10C5: 51 51    MOV   A,[cyrfmfg_id+3]
    10C7: 73       CPL   A
    10C8: 53 22    MOV   [tx_buf+1],A
(0282)         tx_buf[1] = ~cyrfmfg_id[3];
(0283)     }
(0284)     for (i = 0; i < 6; i++) 
    10CA: 56 00 00 MOV   [X+0],0x0
    10CD: 80 6A    JMP   0x1138
(0285) 		{
(0286) 		tx_buf[i*2+2]=(data[i*2]&BITMASK)|ch_map[i];
    10CF: 7C 18 E7 LCALL <created procedures>
    10D2: 65 3E    ASL   [__r1]
    10D4: 6B 3F    RLC   [__r0]
    10D6: 52 00    MOV   A,[X+0]
    10D8: 53 3C    MOV   [__r3],A
    10DA: 55 3D 00 MOV   [__r2],0x0
    10DD: 06 3C 0F ADD   [__r3],0xF
    10E0: 0E 3D 03 ADC   [__r2],0x3
    10E3: 51 3D    MOV   A,[__r2]
    10E5: 10       PUSH  X
    10E6: 58 3C    MOV   X,[__r3]
    10E8: 28       ROMX  
    10E9: 20       POP   X
    10EA: 53 3D    MOV   [__r2],A
    10EC: 51 3E    MOV   A,[__r1]
    10EE: 03 FC    ADD   A,[X-4]
    10F0: 53 3A    MOV   [__r5],A
    10F2: 51 3F    MOV   A,[__r0]
    10F4: 0B FB    ADC   A,[X-5]
    10F6: 60 D4    MOV   REG[0xD4],A
    10F8: 3E 3A    MVI   A,[__r5]
    10FA: 53 3B    MOV   [__r4],A
    10FC: 26 3B 07 AND   [__r4],0x7
    10FF: 51 3B    MOV   A,[__r4]
    1101: 2A 3D    OR    A,[__r2]
    1103: 53 3D    MOV   [__r2],A
    1105: 06 3E 23 ADD   [__r1],0x23
    1108: 7C 19 60 LCALL 0x1960
(0287) 		tx_buf[i*2+3]=data[i*2+1];
    110B: 52 00    MOV   A,[X+0]
    110D: 53 3E    MOV   [__r1],A
    110F: 55 3F 00 MOV   [__r0],0x0
    1112: 65 3E    ASL   [__r1]
    1114: 6B 3F    RLC   [__r0]
    1116: 51 3E    MOV   A,[__r1]
    1118: 03 FC    ADD   A,[X-4]
    111A: 53 3C    MOV   [__r3],A
    111C: 51 3F    MOV   A,[__r0]
    111E: 0B FB    ADC   A,[X-5]
    1120: 53 3D    MOV   [__r2],A
    1122: 06 3C 01 ADD   [__r3],0x1
    1125: 0E 3D 00 ADC   [__r2],0x0
    1128: 51 3D    MOV   A,[__r2]
    112A: 60 D4    MOV   REG[0xD4],A
    112C: 3E 3C    MVI   A,[__r3]
    112E: 53 3D    MOV   [__r2],A
    1130: 06 3E 24 ADD   [__r1],0x24
    1133: 7C 19 60 LCALL 0x1960
(0288)  		}
    1136: 77 00    INC   [X+0]
    1138: 3D 00 06 CMP   [X+0],0x6
    113B: CF 93    JC    0x10CF
(0289) 	tx_buf[14]=0xff;
    113D: 62 D0 00 MOV   REG[0xD0],0x0
    1140: 55 2F FF MOV   [tx_buf+14],0xFF
(0290) 	tx_buf[15]=0xff;
    1143: 55 30 FF MOV   [tx_buf+15],0xFF
    1146: 38 FF    ADD   SP,0xFF
    1148: 20       POP   X
    1149: 7F       RET   
(0291)  }
(0292) 
(0293) 
(0294) void DSM_Cyclic(void)
(0295) {
_DSM_Cyclic:
  TX_irg_Status        --> X+0
    114A: 10       PUSH  X
    114B: 4F       MOV   X,SP
    114C: 38 03    ADD   SP,0x3
(0296) 	if(CY_irq)
    114E: 62 D0 00 MOV   REG[0xD0],0x0
    1151: 3C 6D 00 CMP   [CY_irq],0x0
    1154: A0 5B    JZ    0x11B0
(0297) 	{
(0298) 		BYTE TX_irg_Status=CYRF_TX_IRQ_Status();		//read IRQ Status
    1156: 50 04    MOV   A,0x4
    1158: 08       PUSH  A
    1159: 7C 08 F1 LCALL _CYRF_ReadRegister
    115C: 38 FF    ADD   SP,0xFF
    115E: 54 00    MOV   [X+0],A
(0299) 		//BYTE RX_irg_Status=CYRF_RX_IRQ_Status();
(0300) 		CY_irq=FALSE;
    1160: 62 D0 00 MOV   REG[0xD0],0x0
    1163: 55 6D 00 MOV   [CY_irq],0x0
(0301) 		
(0302) 		//see cyrf6936 datasheet
(0303) 		if(!TX_irg_Status&(1<<0))
    1166: 3D 00 00 CMP   [X+0],0x0
    1169: 97 AF    CALL  0x191A
    116B: 40       NOP   
    116C: 21 01    AND   A,0x1
    116E: 53 3E    MOV   [__r1],A
    1170: 52 01    MOV   A,[X+1]
    1172: 21 00    AND   A,0x0
    1174: 39 00    CMP   A,0x0
    1176: B0 06    JNZ   0x117D
    1178: 3C 3E 00 CMP   [__r1],0x0
    117B: A0 15    JZ    0x1191
(0304) 		{
(0305) 			TX_irg_Status|=(CYRF_TX_IRQ_Status()&1);
    117D: 50 04    MOV   A,0x4
    117F: 08       PUSH  A
    1180: 7C 08 F1 LCALL _CYRF_ReadRegister
    1183: 38 FF    ADD   SP,0xFF
    1185: 62 D0 00 MOV   REG[0xD0],0x0
    1188: 53 3F    MOV   [__r0],A
    118A: 26 3F 01 AND   [__r0],0x1
    118D: 51 3F    MOV   A,[__r0]
    118F: 2D 00    OR    [X+0],A
(0306) 		}
(0307) 		//tx done
(0308) 		if(TX_irg_Status&(1<<1))
    1191: 48 00 02 TST   [X+0],0x2
    1194: A0 1B    JZ    0x11B0
(0309) 		{
(0310) 			if(Bind_cnt)
    1196: 62 D0 00 MOV   REG[0xD0],0x0
    1199: 3C 65 00 CMP   [Bind_cnt],0x0
    119C: A0 0F    JZ    0x11AC
(0311) 			{
(0312) 				Bind_cnt--;
    119E: 7A 65    DEC   [Bind_cnt]
(0313) 				if(!Bind_cnt) //end of bind
    11A0: 3C 65 00 CMP   [Bind_cnt],0x0
    11A3: B0 0C    JNZ   0x11B0
(0314) 					Timer_Stop();
    11A5: 10       PUSH  X
    11A6: 7C 06 9A LCALL _Counter16_1_Stop
    11A9: 20       POP   X
(0315) 			}
    11AA: 80 05    JMP   0x11B0
(0316) 			else
(0317) 			{
(0318) 				SetCH_CRC_SOP_DATA();
    11AC: 9B D0    CALL  _SetCH_CRC_SOP_DATA
(0319) 				SetTimer();
    11AE: 9B B1    CALL  _SetTimer
(0320) 			}	
(0321) 		}	
(0322) 	}
    11B0: 38 FD    ADD   SP,0xFD
    11B2: 20       POP   X
    11B3: 7F       RET   
(0323) }
(0324) 
(0325) 
(0326) void DSM_StartTransmitMode(void)
(0327) {
_DSM_StartTransmitMode:
    11B4: 10       PUSH  X
    11B5: 4F       MOV   X,SP
    11B6: 38 02    ADD   SP,0x2
(0328) 	DSM_Load_Config(Transmit_vals,sizeof(Transmit_vals)/(sizeof(BYTE)*2));
    11B8: 50 04    MOV   A,0x4
    11BA: 08       PUSH  A
    11BB: 50 02    MOV   A,0x2
    11BD: 08       PUSH  A
    11BE: 50 FA    MOV   A,0xFA
    11C0: 08       PUSH  A
    11C1: 9D 53    CALL  _DSM_Load_Config
    11C3: 38 FD    ADD   SP,0xFD
(0329) 	CYRF_WriteRegister(CYRF_TX_CFG,Rang_Check?0x28|DSM_RANGE_CHECK_POWER:0x28|DSM_TX_POWER);
    11C5: 62 D0 00 MOV   REG[0xD0],0x0
    11C8: 3C 6C 00 CMP   [Rang_Check],0x0
    11CB: A0 09    JZ    0x11D5
    11CD: 56 01 2B MOV   [X+1],0x2B
    11D0: 56 00 00 MOV   [X+0],0x0
    11D3: 80 07    JMP   0x11DB
    11D5: 56 01 2F MOV   [X+1],0x2F
    11D8: 56 00 00 MOV   [X+0],0x0
    11DB: 62 D0 00 MOV   REG[0xD0],0x0
    11DE: 52 01    MOV   A,[X+1]
    11E0: 08       PUSH  A
    11E1: 50 03    MOV   A,0x3
    11E3: 08       PUSH  A
    11E4: 7C 07 7A LCALL _CYRF_WriteRegister
    11E7: 38 FE    ADD   SP,0xFE
(0330) 	SetCH_CRC_SOP_DATA();
    11E9: 9B 93    CALL  _SetCH_CRC_SOP_DATA
(0331) 	//wait for Serial data
(0332) 	while(!SerialReadData());
    11EB: 7C 14 00 LCALL _SerialReadData
    11EE: 62 D0 00 MOV   REG[0xD0],0x0
    11F1: 39 00    CMP   A,0x0
    11F3: AF F7    JZ    0x11EB
(0333) 	DSM_build_data_packet(&ser_databuf[2]);
    11F5: 50 00    MOV   A,0x0
    11F7: 08       PUSH  A
    11F8: 50 42    MOV   A,0x42
    11FA: 08       PUSH  A
    11FB: 9E AA    CALL  _DSM_build_data_packet
(0334) 	Timer_SetCallback(Xmit_cb);
    11FD: 50 03    MOV   A,0x3
    11FF: 08       PUSH  A
    1200: 50 C5    MOV   A,0xC5
    1202: 08       PUSH  A
    1203: 7C 15 EB LCALL _Timer_SetCallback
    1206: 38 FC    ADD   SP,0xFC
(0335) 	Timer_Stop();
    1208: 10       PUSH  X
    1209: 7C 06 9A LCALL _Counter16_1_Stop
(0336) 	Timer_SetPeriod(2000);
    120C: 57 07    MOV   X,0x7
    120E: 50 D0    MOV   A,0xD0
    1210: 7C 06 9E LCALL _Counter16_1_WritePeriod
(0337) 	Timer_Start();
    1213: 7C 06 96 LCALL _Counter16_1_DisableInt|Counter16_1_Start|_Counter16_1_Start
    1216: 20       POP   X
(0338) 	SetTimer();
    1217: 9B 48    CALL  _SetTimer
    1219: 38 FE    ADD   SP,0xFE
    121B: 20       POP   X
    121C: 7F       RET   
(0339) }
(0340) 
(0341) void DSM_Init(void)
(0342) {
_DSM_Init:
  n                    --> X+0
    121D: 10       PUSH  X
    121E: 4F       MOV   X,SP
    121F: 38 01    ADD   SP,0x1
(0343) 	if(CYRF_Init())
    1221: 7C 07 05 LCALL _CYRF_Init
    1224: 39 00    CMP   A,0x0
    1226: A0 AC    JZ    0x12D3
(0344) 		{
(0345) 		BYTE n;
(0346) 		hex[2]=0;	
    1228: 62 D0 00 MOV   REG[0xD0],0x0
    122B: 55 56 00 MOV   [hex+2],0x0
    122E: 55 61 01 MOV   [Is_DSMX],0x1
    1231: 55 62 01 MOV   [Ch_A],0x1
    1234: 55 6E 00 MOV   [chidx],0x0
    1237: 55 6A 0B MOV   [bind_channal],0xB
    123A: 55 65 00 MOV   [Bind_cnt],0x0
    123D: 55 6B 06 MOV   [num_channels],0x6
    1240: 55 6C 00 MOV   [Rang_Check],0x0
    1243: 51 4E    MOV   A,[cyrfmfg_id]
    1245: 02 4F    ADD   A,[cyrfmfg_id+1]
    1247: 53 3F    MOV   [__r0],A
    1249: 51 50    MOV   A,[cyrfmfg_id+2]
    124B: 04 3F    ADD   [__r0],A
    124D: 06 3F 02 ADD   [__r0],0x2
    1250: 51 3F    MOV   A,[__r0]
    1252: 21 07    AND   A,0x7
    1254: 53 63    MOV   [sop_col],A
(0347) 		Is_DSMX=TRUE;
(0348) 		Ch_A=TRUE;
(0349) 		chidx=0;
(0350) 		bind_channal=0x0B;
(0351) 		Bind_cnt=0;
(0352) 		num_channels=6;
(0353) 		Rang_Check=FALSE;
(0354) 		sop_col = (cyrfmfg_id[0] + cyrfmfg_id[1] + cyrfmfg_id[2] + 2) & 0x07;
(0355) 	    data_col = 7 - sop_col;
    1256: 50 07    MOV   A,0x7
    1258: 12 63    SUB   A,[sop_col]
    125A: 53 64    MOV   [data_col],A
(0356) 		DSM_Load_Config(init_vals,sizeof(init_vals)/(sizeof(BYTE)*2));
    125C: 50 11    MOV   A,0x11
    125E: 08       PUSH  A
    125F: 50 02    MOV   A,0x2
    1261: 08       PUSH  A
    1262: 50 D8    MOV   A,0xD8
    1264: 08       PUSH  A
    1265: 9C AF    CALL  _DSM_Load_Config
(0357) 		CYRF_WritePreamble(preamble);
    1267: 50 03    MOV   A,0x3
    1269: 08       PUSH  A
    126A: 50 03    MOV   A,0x3
    126C: 08       PUSH  A
    126D: 50 0C    MOV   A,0xC
    126F: 08       PUSH  A
    1270: 50 24    MOV   A,0x24
    1272: 08       PUSH  A
    1273: 7C 08 2D LCALL _CYRF_WriteRegisterMulti
    1276: 38 F9    ADD   SP,0xF9
(0358) 	    CYRF_GetMfgData(cyrfmfg_id);
    1278: 50 00    MOV   A,0x0
    127A: 08       PUSH  A
    127B: 50 4E    MOV   A,0x4E
    127D: 08       PUSH  A
    127E: 7C 0A 19 LCALL _CYRF_GetMfgData
(0359) 		CYRF_SetRFChannel(0x61);
    1281: 50 61    MOV   A,0x61
    1283: 08       PUSH  A
    1284: 50 00    MOV   A,0x0
    1286: 08       PUSH  A
    1287: 7C 07 7A LCALL _CYRF_WriteRegister
    128A: 38 FC    ADD   SP,0xFC
(0360) 		TX8SW_1_CPutString("CYFR6936 Init Done MfgId:");
    128C: 10       PUSH  X
    128D: 50 03    MOV   A,0x3
    128F: 08       PUSH  A
    1290: 50 20    MOV   A,0x20
    1292: 5C       MOV   X,A
    1293: 18       POP   A
    1294: 7C 05 9E LCALL _TX8SW_1_CPutString|_TX8SW_1_PutSHexInt|TX8SW_1_CPutString
    1297: 20       POP   X
(0361) 		for (n=0;n<6;n++)
    1298: 56 00 00 MOV   [X+0],0x0
    129B: 80 2A    JMP   0x12C6
(0362) 			{
(0363) 			ToHex(cyrfmfg_id[n],hex);	
    129D: 50 00    MOV   A,0x0
    129F: 08       PUSH  A
    12A0: 50 54    MOV   A,0x54
    12A2: 08       PUSH  A
    12A3: 96 42    CALL  <created procedures>
    12A5: 40       NOP   
    12A6: 06 3E 4E ADD   [__r1],0x4E
    12A9: 0E 3F 00 ADC   [__r0],0x0
    12AC: 51 3F    MOV   A,[__r0]
    12AE: 60 D4    MOV   REG[0xD4],A
    12B0: 3E 3E    MVI   A,[__r1]
    12B2: 08       PUSH  A
    12B3: 7C 0A 61 LCALL _ToHex
    12B6: 38 FD    ADD   SP,0xFD
(0364) 			TX8SW_1_PutString(hex);
    12B8: 10       PUSH  X
    12B9: 50 00    MOV   A,0x0
    12BB: 08       PUSH  A
    12BC: 50 54    MOV   A,0x54
    12BE: 5C       MOV   X,A
    12BF: 18       POP   A
    12C0: 7C 05 B0 LCALL _TX8SW_1_PutString
    12C3: 20       POP   X
(0365) 			}
    12C4: 77 00    INC   [X+0]
    12C6: 3D 00 06 CMP   [X+0],0x6
    12C9: CF D3    JC    0x129D
(0366) 		CY_irq=FALSE;;
    12CB: 62 D0 00 MOV   REG[0xD0],0x0
    12CE: 55 6D 00 MOV   [CY_irq],0x0
(0367) 		}	
    12D1: 80 0D    JMP   0x12DF
(0368) 	else 
(0369) 		{
(0370) 		TX8SW_1_CPutString("Init Fail");
    12D3: 10       PUSH  X
    12D4: 50 03    MOV   A,0x3
    12D6: 08       PUSH  A
    12D7: 50 16    MOV   A,0x16
    12D9: 5C       MOV   X,A
    12DA: 18       POP   A
    12DB: 7C 05 9E LCALL _TX8SW_1_CPutString|_TX8SW_1_PutSHexInt|TX8SW_1_CPutString
    12DE: 20       POP   X
(0371) 		}	
    12DF: 38 FF    ADD   SP,0xFF
    12E1: 20       POP   X
    12E2: 7F       RET   
FILE: C:\Users\Ralf\DOCUME~1\DSM_SA~1\DSM_SA~1\DSM_SA~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #include "serial.h"
(0008) #include "timer.h"
(0009) #include "CYRF6936.h"
(0010) #include "DSM.h"
(0011) 
(0012) extern BYTE hex[3];
(0013) void ToHex(BYTE val,BYTE out[]);
(0014) 
(0015) 
(0016) void main(void)
(0017) {
_main:
  new_data             --> X+0
    12E3: 10       PUSH  X
    12E4: 4F       MOV   X,SP
    12E5: 38 01    ADD   SP,0x1
(0018) 	BOOL new_data=FALSE;
    12E7: 56 00 00 MOV   [X+0],0x0
(0019) 			hex[2]=0;	
    12EA: 62 D0 00 MOV   REG[0xD0],0x0
    12ED: 55 56 00 MOV   [hex+2],0x0
(0020) 
(0021) 	M8C_EnableGInt;		 		// Enable Global Interrupts
    12F0: 71 01    OR    F,0x1
(0022) 	TX8SW_1_Start();
    12F2: 10       PUSH  X
    12F3: 7C 04 CB LCALL _TX8SW_1_Start
    12F6: 20       POP   X
(0023) 	SerialRX_Init();
    12F7: 7C 13 B1 LCALL _SerialRX_Init
(0024) 	Timer_init();
    12FA: 7C 15 9B LCALL _Timer_init
(0025) 	
(0026) 	TX8SW_1_CPutString("Hello");
    12FD: 10       PUSH  X
    12FE: 50 03    MOV   A,0x3
    1300: 08       PUSH  A
    1301: 50 45    MOV   A,0x45
    1303: 5C       MOV   X,A
    1304: 18       POP   A
    1305: 7C 05 9E LCALL _TX8SW_1_CPutString|_TX8SW_1_PutSHexInt|TX8SW_1_CPutString
(0027) 	LED_1_Start();
    1308: 7C 06 47 LCALL _LED_1_Start|RST_Invert|RST_GetState|_LED_1_Off|_LED_1_Stop|LED_1_Start|LED_1_On|LED_1_Off|LED_1_Stop
    130B: 20       POP   X
(0028) 	DSM_Init();
    130C: 7C 12 1D LCALL _DSM_Init
(0029) 
(0030) 	//wait for serial data
(0031) 	while(!SerialReadData());
    130F: 7C 14 00 LCALL _SerialReadData
    1312: 39 00    CMP   A,0x0
    1314: AF FA    JZ    0x130F
    1316: 96 18    CALL  0x1930
    1318: 40       NOP   
(0032) 	SER_RESET();
    1319: 47 40 20 TST   [ser_databuf],0x20
    131C: A0 09    JZ    0x1326
(0033) 
(0034) 
(0035) 	if(ser_databuf[0]&(1<<SPTX_RANGE_CHECK))
(0036) 		{
(0037) 		DSM_SetRangeCheck(TRUE);
    131E: 50 01    MOV   A,0x1
    1320: 08       PUSH  A
    1321: 7C 0A CF LCALL _DSM_SetRangeCheck
    1324: 38 FF    ADD   SP,0xFF
(0038) 		}
(0039) 	
(0040) 	DSM_SetMode(ser_databuf[0]&DSMX);
    1326: 62 D0 00 MOV   REG[0xD0],0x0
    1329: 51 40    MOV   A,[ser_databuf]
    132B: 21 18    AND   A,0x18
    132D: 08       PUSH  A
    132E: 7C 0A F2 LCALL _DSM_SetMode
    1331: 38 FF    ADD   SP,0xFF
(0041) 	
(0042) 	if(ser_databuf[0]&(1<<SPTX_BIND_MODE))
    1333: 62 D0 00 MOV   REG[0xD0],0x0
    1336: 47 40 80 TST   [ser_databuf],0x80
    1339: A0 28    JZ    0x1362
(0043) 	{
(0044) 		TX8SW_1_CPutString("BIND ");
    133B: 10       PUSH  X
    133C: 50 03    MOV   A,0x3
    133E: 08       PUSH  A
    133F: 50 3F    MOV   A,0x3F
    1341: 5C       MOV   X,A
    1342: 18       POP   A
    1343: 7C 05 9E LCALL _TX8SW_1_CPutString|_TX8SW_1_PutSHexInt|TX8SW_1_CPutString
    1346: 20       POP   X
(0045) 		DSM_initialize_bind();
    1347: 7C 10 59 LCALL _DSM_initialize_bind
(0046) 		do
(0047) 			{
(0048) 			DSM_Cyclic();
    134A: 7C 11 4A LCALL _DSM_Cyclic
(0049) 			if(SerialReadData())
    134D: 7C 14 00 LCALL _SerialReadData
    1350: 39 00    CMP   A,0x0
    1352: A0 04    JZ    0x1357
    1354: 95 DA    CALL  0x1930
    1356: 40       NOP   
(0050) 				SER_RESET();
(0051) 			}
(0052) 		while(!DSM_BIND_DONE());
    1357: 62 D0 00 MOV   REG[0xD0],0x0
    135A: 3C 65 00 CMP   [Bind_cnt],0x0
    135D: BF EC    JNZ   0x134A
(0053) 		new_data=FALSE;
    135F: 56 00 00 MOV   [X+0],0x0
(0054) 	}
(0055) 	TX8SW_1_CPutString("RUN ");
    1362: 10       PUSH  X
    1363: 50 03    MOV   A,0x3
    1365: 08       PUSH  A
    1366: 50 3A    MOV   A,0x3A
    1368: 5C       MOV   X,A
    1369: 18       POP   A
    136A: 7C 05 9E LCALL _TX8SW_1_CPutString|_TX8SW_1_PutSHexInt|TX8SW_1_CPutString
    136D: 20       POP   X
(0056) 	DSM_StartTransmitMode();	
    136E: 7C 11 B4 LCALL _DSM_StartTransmitMode
    1371: 80 29    JMP   0x139B
(0057) 	while (1)
(0058) 	{
(0059) 	DSM_Cyclic();
    1373: 7C 11 4A LCALL _DSM_Cyclic
(0060) 	if (SerialReadData())
    1376: 7C 14 00 LCALL _SerialReadData
    1379: 39 00    CMP   A,0x0
    137B: A0 07    JZ    0x1383
(0061) 		{
(0062) 		new_data=TRUE;
    137D: 56 00 01 MOV   [X+0],0x1
    1380: 95 AE    CALL  0x1930
    1382: 40       NOP   
(0063) 		SER_RESET();
(0064) 		}
(0065) 	if (new_data)
    1383: 3D 00 00 CMP   [X+0],0x0
    1386: A0 14    JZ    0x139B
(0066) 		{
(0067) 		new_data=FALSE;
    1388: 56 00 00 MOV   [X+0],0x0
(0068) 		DSM_build_data_packet(&ser_databuf[2]);
    138B: 50 00    MOV   A,0x0
    138D: 08       PUSH  A
    138E: 50 42    MOV   A,0x42
    1390: 08       PUSH  A
    1391: 7C 10 A7 LCALL _DSM_build_data_packet
    1394: 38 FE    ADD   SP,0xFE
(0069) 		LED_1_Invert(); 
    1396: 10       PUSH  X
    1397: 7C 06 61 LCALL _LED_1_Invert
    139A: 20       POP   X
(0070) 		}
(0071) 	}
    139B: 8F D7    JMP   0x1373
(0072) }
FILE: C:\Users\Ralf\DOCUME~1\DSM_SA~1\DSM_SA~1\DSM_SA~1\serial.c
(0001) /*this module contains the code for serial reciving the data from the Transmitter
(0002) * a Buffer of 16 byte ist used to store recived data
(0003) * most work is doen within the interrupt sevice routine
(0004) *datarate is set in the chip design to 115200 by the devider for VC3
(0005) *the timer module will call the ser_Tic function once per ms
(0006) *if for 5ms no more chars are recived the index is reset to zerro
(0007) */
(0008) 
(0009) #include <m8c.h>        // part specific constants and macros
(0010) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0011) #include "serial.h"
(0012) 
(0013) 
(0014) BYTE ser_databuf[SER_BUFFER_SIZE]; //the buffer to hold the recived data
(0015) BYTE ser_idx=0;						//index into buffer
(0016) BYTE ser_status=0;					//reciver status
(0017) BYTE ser_to=0;						//timeout variable to determin end of transmision
(0018) 
(0019) ser_callback_t serial_cb;
(0020) 
(0021) void SerialSetCallback(ser_callback_t cb)
(0022) {
_SerialSetCallback:
  cb                   --> X-5
    13A2: 10       PUSH  X
    13A3: 4F       MOV   X,SP
(0023) 	serial_cb=cb;
    13A4: 62 D0 00 MOV   REG[0xD0],0x0
    13A7: 52 FC    MOV   A,[X-4]
    13A9: 53 58    MOV   [serial_cb+1],A
    13AB: 52 FB    MOV   A,[X-5]
    13AD: 53 57    MOV   [serial_cb],A
    13AF: 20       POP   X
    13B0: 7F       RET   
(0024) }
(0025) 
(0026) //initialize the RX8 module
(0027) void SerialRX_Init(void )
(0028) {
_SerialRX_Init:
  n                    --> X+0
    13B1: 10       PUSH  X
    13B2: 4F       MOV   X,SP
    13B3: 38 02    ADD   SP,0x2
(0029) 	int n;
(0030) 	serial_cb=0;
    13B5: 62 D0 00 MOV   REG[0xD0],0x0
    13B8: 55 58 C7 MOV   [serial_cb+1],0xC7
    13BB: 55 57 03 MOV   [serial_cb],0x3
(0031) 	RX8_1_EnableInt(); //enable hardwar
    13BE: 10       PUSH  X
    13BF: 7C 06 18 LCALL _RX8_1_EnableInt
    13C2: 20       POP   X
(0032) 	//clear buffer
(0033) 	for (n=0;n<16;n++)
    13C3: 56 01 00 MOV   [X+1],0x0
    13C6: 56 00 00 MOV   [X+0],0x0
(0034) 		ser_databuf[n]=0;
    13C9: 62 D0 00 MOV   REG[0xD0],0x0
    13CC: 52 01    MOV   A,[X+1]
    13CE: 01 40    ADD   A,0x40
    13D0: 53 3E    MOV   [__r1],A
    13D2: 52 00    MOV   A,[X+0]
    13D4: 09 00    ADC   A,0x0
    13D6: 60 D5    MOV   REG[0xD5],A
    13D8: 50 00    MOV   A,0x0
    13DA: 3F 3E    MVI   [__r1],A
    13DC: 77 01    INC   [X+1]
    13DE: 0F 00 00 ADC   [X+0],0x0
    13E1: 52 01    MOV   A,[X+1]
    13E3: 11 10    SUB   A,0x10
    13E5: 52 00    MOV   A,[X+0]
    13E7: 31 80    XOR   A,0x80
    13E9: 19 80    SBB   A,0x80
    13EB: CF DD    JC    0x13C9
    13ED: 55 66 00 MOV   [ser_idx],0x0
(0035) 	//set index to 0
(0036) 	ser_idx=0;
(0037) 	//enable interrupts
(0038) 	M8C_EnableGInt;
    13F0: 71 01    OR    F,0x1
(0039) 	RX8_1_EnableInt();
    13F2: 10       PUSH  X
    13F3: 7C 06 18 LCALL _RX8_1_EnableInt
(0040) 	//start reciving
(0041) 	RX8_1_Start(RX8_PARITY_NONE);
    13F6: 50 00    MOV   A,0x0
    13F8: 7C 06 1C LCALL _RX8_1_DisableInt|_RX8_1_Start|RX8_1_Start
    13FB: 20       POP   X
    13FC: 38 FE    ADD   SP,0xFE
    13FE: 20       POP   X
    13FF: 7F       RET   
(0042) }
(0043) 
(0044) //check if there is a compleet package avaliable
(0045) BOOL SerialReadData(void )
(0046) {
(0047) 	//check if status contains anny error bits
(0048) 	if (0xF0&SER_GET_STATUS())
_SerialReadData:
    1400: 62 D0 00 MOV   REG[0xD0],0x0
    1403: 47 67 F0 TST   [ser_status],0xF0
    1406: A0 0E    JZ    0x1415
(0049) 	{	//reset in case of an error
(0050) 		SER_CLEAR_ERROR();
    1408: 26 67 F0 AND   [ser_status],0xF0
(0051) 		SER_RESET();
    140B: 55 67 00 MOV   [ser_status],0x0
    140E: 55 66 00 MOV   [ser_idx],0x0
    1411: 50 00    MOV   A,0x0
    1413: 80 12    JMP   0x1426
(0052) 		return 0;
(0053) 	}
(0054) 	//ckeck if buffer is full
(0055) 	if (SER_PEAK())
    1415: 62 D0 00 MOV   REG[0xD0],0x0
    1418: 47 67 01 TST   [ser_status],0x1
    141B: A0 05    JZ    0x1421
    141D: 50 01    MOV   A,0x1
    141F: 80 06    JMP   0x1426
(0056) 	{
(0057) 		return 1;
(0058) 	}
(0059) return 0;
    1421: 62 D0 00 MOV   REG[0xD0],0x0
    1424: 50 00    MOV   A,0x0
    1426: 7F       RET   
(0060) }
(0061) 
(0062) 
(0063) //this is called from the system timer once per 1,953125 ms
(0064) //ser_to is reset to zerro each time a char is recived by the serial interupt service
(0065) //if there has not been anny char recived for 3 consecutive calls then reset the index
(0066) void ser_Tic(void )
(0067) {
(0068) 	ser_to++; //increment timeout
_ser_Tic:
    1427: 62 D0 00 MOV   REG[0xD0],0x0
    142A: 76 68    INC   [ser_to]
    142C: 3C 66 00 CMP   [ser_idx],0x0
    142F: A0 0A    JZ    0x143A
    1431: 50 03    MOV   A,0x3
    1433: 3A 68    CMP   A,[ser_to]
    1435: D0 04    JNC   0x143A
    1437: 55 66 00 MOV   [ser_idx],0x0
    143A: 7F       RET   
(0069) 	if (ser_idx!=0 && ser_to > 3) //to we have a timeout (>6ms)
(0070) 		ser_idx=0; //reset index
(0071) }
(0072) 
(0073) #define RX8_1_RX_ENABLE 1
(0074) #pragma interrupt_handler RX8_1_Interrupt
(0075) 
(0076) //interrupt handler called if a char is recived
(0077) void RX8_1_Interrupt(void )
(0078) {
_RX8_1_Interrupt:
    143B: 71 C0    OR    F,0xC0
    143D: 08       PUSH  A
    143E: 5D D0    MOV   A,REG[0xD0]
    1440: 08       PUSH  A
    1441: 5D D3    MOV   A,REG[0xD3]
    1443: 08       PUSH  A
    1444: 5D D4    MOV   A,REG[0xD4]
    1446: 08       PUSH  A
    1447: 5D D5    MOV   A,REG[0xD5]
    1449: 08       PUSH  A
    144A: 62 D0 00 MOV   REG[0xD0],0x0
    144D: 51 3F    MOV   A,[__r0]
    144F: 08       PUSH  A
    1450: 51 3E    MOV   A,[__r1]
    1452: 08       PUSH  A
    1453: 51 3D    MOV   A,[__r2]
    1455: 08       PUSH  A
    1456: 51 3C    MOV   A,[__r3]
    1458: 08       PUSH  A
    1459: 51 3B    MOV   A,[__r4]
    145B: 08       PUSH  A
    145C: 51 3A    MOV   A,[__r5]
    145E: 08       PUSH  A
    145F: 51 39    MOV   A,[__r6]
    1461: 08       PUSH  A
    1462: 51 38    MOV   A,[__r7]
    1464: 08       PUSH  A
    1465: 51 37    MOV   A,[__r8]
    1467: 08       PUSH  A
    1468: 51 36    MOV   A,[__r9]
    146A: 08       PUSH  A
    146B: 51 35    MOV   A,[__r10]
    146D: 08       PUSH  A
    146E: 51 34    MOV   A,[__r11]
    1470: 08       PUSH  A
    1471: 51 33    MOV   A,[__rX]
    1473: 08       PUSH  A
    1474: 51 32    MOV   A,[__rY]
    1476: 08       PUSH  A
    1477: 51 31    MOV   A,[__rZ]
    1479: 08       PUSH  A
    147A: 55 68 00 MOV   [ser_to],0x0
    147D: 80 94    JMP   0x1512
(0079) 	static BYTE ser_c; //the char buffer, defined as static to save stack space
(0080) 	
(0081) 	ser_to=0; //reset timeout
(0082) 
(0083) 
(0084) 	//if a char is recived 
(0085) 	//we use while instead of if because it can happen that another char is recived while we are here, 
(0086) 	//in that case no extra interrop for that one will occour
(0087) 	while (RX8_RX_COMPLETE & RX8_1_CONTROL_REG)
(0088) 	{	//get the char
(0089) 		ser_c=RX8_1_RX_BUFFER_REG;
    147F: 5D 2E    MOV   A,REG[0x2E]
    1481: 62 D0 00 MOV   REG[0xD0],0x0
    1484: 53 69    MOV   [ser_to+1],A
    1486: 94 F0    CALL  0x1978
    1488: 40       NOP   
(0090) 		//if we have no error store the char
(0091) 		if (!(RX8_1_RX_ERROR & RX8_1_CONTROL_REG))
    1489: B0 66    JNZ   0x14F0
    148B: 3C 66 0E CMP   [ser_idx],0xE
    148E: D0 59    JNC   0x14E8
    1490: 51 66    MOV   A,[ser_idx]
    1492: 53 3E    MOV   [__r1],A
    1494: 55 3F 00 MOV   [__r0],0x0
    1497: 01 01    ADD   A,0x1
    1499: 53 66    MOV   [ser_idx],A
    149B: 06 3E 40 ADD   [__r1],0x40
    149E: 0E 3F 00 ADC   [__r0],0x0
    14A1: 51 3F    MOV   A,[__r0]
    14A3: 60 D5    MOV   REG[0xD5],A
    14A5: 51 69    MOV   A,[ser_to+1]
    14A7: 3F 3E    MVI   [__r1],A
    14A9: 3C 66 0E CMP   [ser_idx],0xE
    14AC: B0 71    JNZ   0x151E
    14AE: 2E 67 01 OR    [ser_status],0x1
    14B1: 51 58    MOV   A,[serial_cb+1]
    14B3: 08       PUSH  A
    14B4: 51 57    MOV   A,[serial_cb]
    14B6: 53 3F    MOV   [__r0],A
    14B8: 18       POP   A
    14B9: 53 3E    MOV   [__r1],A
    14BB: 51 3F    MOV   A,[__r0]
    14BD: 10       PUSH  X
    14BE: 58 3E    MOV   X,[__r1]
    14C0: 08       PUSH  A
    14C1: 28       ROMX  
    14C2: 53 3F    MOV   [__r0],A
    14C4: 18       POP   A
    14C5: 75       INC   X
    14C6: 09 00    ADC   A,0x0
    14C8: 28       ROMX  
    14C9: 20       POP   X
    14CA: 3C 3F 00 CMP   [__r0],0x0
    14CD: B0 05    JNZ   0x14D3
    14CF: 39 00    CMP   A,0x0
    14D1: A0 4C    JZ    0x151E
(0092) 		{
(0093) 			//if there is still room in bufffer
(0094) 			if (ser_idx<SER_BUFFER_SIZE)
(0095) 			{//store data
(0096) 				ser_databuf[ser_idx++]=ser_c;
(0097) 				//check if buffer is full now
(0098) 				if (ser_idx==SER_BUFFER_SIZE)
(0099) 				{
(0100) 					ser_status|=SER_BUFFERFULL; //flag that we are done
(0101) 					if(serial_cb)
(0102) 						serial_cb();
    14D3: 62 D0 00 MOV   REG[0xD0],0x0
    14D6: 51 58    MOV   A,[serial_cb+1]
    14D8: 08       PUSH  A
    14D9: 51 57    MOV   A,[serial_cb]
    14DB: 53 3F    MOV   [__r0],A
    14DD: 18       POP   A
    14DE: 10       PUSH  X
    14DF: 5C       MOV   X,A
    14E0: 51 3F    MOV   A,[__r0]
    14E2: 7C 18 DA LCALL __plcall
    14E5: 20       POP   X
(0103) 				}
(0104) 			}
    14E6: 80 37    JMP   0x151E
(0105) 			else 
(0106) 				ser_status|=SER_BUFOVERRUN_ERROR; //flag a buffer overrun
    14E8: 62 D0 00 MOV   REG[0xD0],0x0
    14EB: 2E 67 10 OR    [ser_status],0x10
(0107) 			return ;
    14EE: 80 2F    JMP   0x151E
(0108) 		}
(0109) 		//if we got anny error
(0110) 		if(RX8_1_RX_ERROR & RX8_1_CONTROL_REG)
    14F0: 94 86    CALL  0x1978
    14F2: 40       NOP   
    14F3: A0 1E    JZ    0x1512
    14F5: 55 66 00 MOV   [ser_idx],0x0
(0111) 		{
(0112) 			ser_idx=0; //reset index , trash all we have so far
(0113) 			ser_status|=RX8_1_CONTROL_REG & RX8_1_RX_ERROR; //update status
    14F8: 5D 2F    MOV   A,REG[0x2F]
    14FA: 53 3F    MOV   [__r0],A
    14FC: 26 3F E0 AND   [__r0],0xE0
    14FF: 51 3F    MOV   A,[__r0]
    1501: 2C 67    OR    [ser_status],A
(0114) 			//special case framing error
(0115) 			if (RX8_1_RX_FRAMING_ERROR & RX8_1_CONTROL_REG)
    1503: 5D 2F    MOV   A,REG[0x2F]
    1505: 53 3F    MOV   [__r0],A
    1507: 47 3F 20 TST   [__r0],0x20
    150A: A0 07    JZ    0x1512
(0116) 			{
(0117) 				RX8_1_CONTROL_REG&=~RX8_1_RX_ENABLE; //disable RX
    150C: 41 2F FE AND   REG[0x2F],0xFE
(0118) 				RX8_1_CONTROL_REG|=RX8_1_RX_ENABLE; //enable RX
    150F: 43 2F 01 OR    REG[0x2F],0x1
(0119) 			}
(0120) 		}
(0121) 	}
    1512: 5D 2F    MOV   A,REG[0x2F]
(0122) } //end of ISRFILE: C:\Users\Ralf\DOCUME~1\DSM_SA~1\DSM_SA~1\DSM_SA~1\timer.c
(0001) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0002) #include "timer.h"
(0003) #include "serial.h"
(0004) 
(0005) WORD systic=0;   //will be incremented once per 1,953125 ms
(0006) WORD cnt_last;
(0007) tmr_callback_t timer_cb=0;
(0008) 
(0009) //a delay
(0010) void Timer_Wait_ms(BYTE ms)
(0011) {
_Timer_Wait_ms:
  ms                   --> X-4
    155C: 10       PUSH  X
    155D: 4F       MOV   X,SP
(0012) SleepTimer_1_TickWait(ms>>2);
    155E: 52 FC    MOV   A,[X-4]
    1560: 62 D0 00 MOV   REG[0xD0],0x0
    1563: 53 3F    MOV   [__r0],A
    1565: 68 3F    ASR   [__r0]
    1567: 68 3F    ASR   [__r0]
    1569: 26 3F 3F AND   [__r0],0x3F
    156C: 10       PUSH  X
    156D: 51 3F    MOV   A,[__r0]
    156F: 7C 06 02 LCALL _SleepTimer_1_SetInterval|SleepTimer_1_TickWait|_SleepTimer_1_TickWait|_SleepTimer_1_Stop
    1572: 20       POP   X
    1573: 20       POP   X
    1574: 7F       RET   
(0013) }
(0014) 
(0015) void Timer_Enable(BOOL val)
(0016) {
_Timer_Enable:
  val                  --> X-4
    1575: 10       PUSH  X
    1576: 4F       MOV   X,SP
    1577: 38 02    ADD   SP,0x2
(0017) Counter16_1_INPUT_LSB_REG=val?0x16:0x6;
    1579: 3D FC 00 CMP   [X-4],0x0
    157C: A0 09    JZ    0x1586
    157E: 56 01 16 MOV   [X+1],0x16
    1581: 56 00 00 MOV   [X+0],0x0
    1584: 80 07    JMP   0x158C
    1586: 56 01 06 MOV   [X+1],0x6
    1589: 56 00 00 MOV   [X+0],0x0
    158C: 62 D0 00 MOV   REG[0xD0],0x0
    158F: 52 01    MOV   A,[X+1]
    1591: 71 10    OR    F,0x10
    1593: 60 21    MOV   REG[0x21],A
    1595: 70 CF    AND   F,0xCF
    1597: 38 FE    ADD   SP,0xFE
    1599: 20       POP   X
    159A: 7F       RET   
(0018) }
(0019) 
(0020) void Timer_init (void)
(0021) {
(0022) timer_cb=0;
_Timer_init:
    159B: 62 D0 00 MOV   REG[0xD0],0x0
    159E: 55 5A C9 MOV   [timer_cb+1],0xC9
    15A1: 55 59 03 MOV   [timer_cb],0x3
(0023) SleepTimer_1_EnableInt();
    15A4: 10       PUSH  X
    15A5: 7C 05 EE LCALL _SleepTimer_1_EnableInt
(0024) SleepTimer_1_Start();
    15A8: 7C 05 F2 LCALL _SleepTimer_1_DisableInt|SleepTimer_1_Start|_SleepTimer_1_Start
(0025) Counter16_1_EnableInt();
    15AB: 7C 06 92 LCALL _Counter16_1_EnableInt
(0026) Counter16_1_Start();
    15AE: 7C 06 96 LCALL _Counter16_1_DisableInt|Counter16_1_Start|_Counter16_1_Start
    15B1: 20       POP   X
(0027) Timer_Enable(TRUE);
    15B2: 50 01    MOV   A,0x1
    15B4: 08       PUSH  A
    15B5: 9F BE    CALL  _Timer_Enable
    15B7: 38 FF    ADD   SP,0xFF
    15B9: 7F       RET   
(0028) }
(0029) 
(0030) 
(0031) 
(0032) WORD Timer_GetTime(void)
(0033) {
_Timer_GetTime:
  time                 --> X+0
    15BA: 10       PUSH  X
    15BB: 4F       MOV   X,SP
    15BC: 38 02    ADD   SP,0x2
(0034) 	WORD time;
(0035) 	Timer_Enable(FALSE);
    15BE: 50 00    MOV   A,0x0
    15C0: 08       PUSH  A
    15C1: 9F B2    CALL  _Timer_Enable
    15C3: 38 FF    ADD   SP,0xFF
(0036) 	time=Counter16_1_wReadCounter();
    15C5: 10       PUSH  X
    15C6: 7C 06 A4 LCALL _wCounter16_1_ReadCompareValue|_Counter16_1_wReadCompareValue|_Counter16_1_WriteCompareValue|wCounter16_1_ReadCounter|Counter16_1_wReadCounter|_wCounter16_1_ReadCounter|wCounter16_1_ReadCompareValue|_Counter16_1_wReadCounter
    15C9: 62 D0 00 MOV   REG[0xD0],0x0
    15CC: 5A 3F    MOV   [__r0],X
    15CE: 20       POP   X
    15CF: 54 01    MOV   [X+1],A
    15D1: 51 3F    MOV   A,[__r0]
    15D3: 54 00    MOV   [X+0],A
(0037) 	Timer_Enable(TRUE);
    15D5: 50 01    MOV   A,0x1
    15D7: 08       PUSH  A
    15D8: 9F 9B    CALL  _Timer_Enable
    15DA: 38 FF    ADD   SP,0xFF
(0038) 	return time;
    15DC: 62 D0 00 MOV   REG[0xD0],0x0
    15DF: 52 01    MOV   A,[X+1]
    15E1: 53 3E    MOV   [__r1],A
    15E3: 52 00    MOV   A,[X+0]
    15E5: 53 3F    MOV   [__r0],A
    15E7: 38 FE    ADD   SP,0xFE
    15E9: 20       POP   X
    15EA: 7F       RET   
(0039) }
(0040) 
(0041) void Timer_SetCallback(tmr_callback_t cb_fn)
(0042) {
_Timer_SetCallback:
  cb_fn                --> X-5
    15EB: 10       PUSH  X
    15EC: 4F       MOV   X,SP
(0043) 	timer_cb=cb_fn;
    15ED: 62 D0 00 MOV   REG[0xD0],0x0
    15F0: 52 FC    MOV   A,[X-4]
    15F2: 53 5A    MOV   [timer_cb+1],A
    15F4: 52 FB    MOV   A,[X-5]
    15F6: 53 59    MOV   [timer_cb],A
    15F8: 20       POP   X
    15F9: 7F       RET   
(0044) }
(0045) 
(0046) #pragma interrupt_handler Sleep_Timer_Interrupt
(0047) 
(0048) //interrupt handler on TC of LSB
(0049) void Sleep_Timer_Interrupt(void )
(0050) {
_Sleep_Timer_Interrupt:
    15FA: 71 C0    OR    F,0xC0
    15FC: 08       PUSH  A
    15FD: 5D D0    MOV   A,REG[0xD0]
    15FF: 08       PUSH  A
    1600: 5D D3    MOV   A,REG[0xD3]
    1602: 08       PUSH  A
    1603: 5D D4    MOV   A,REG[0xD4]
    1605: 08       PUSH  A
    1606: 5D D5    MOV   A,REG[0xD5]
    1608: 08       PUSH  A
    1609: 62 D0 00 MOV   REG[0xD0],0x0
    160C: 51 3F    MOV   A,[__r0]
    160E: 08       PUSH  A
    160F: 51 3E    MOV   A,[__r1]
    1611: 08       PUSH  A
    1612: 51 3D    MOV   A,[__r2]
    1614: 08       PUSH  A
    1615: 51 3C    MOV   A,[__r3]
    1617: 08       PUSH  A
    1618: 51 3B    MOV   A,[__r4]
    161A: 08       PUSH  A
    161B: 51 3A    MOV   A,[__r5]
    161D: 08       PUSH  A
    161E: 51 39    MOV   A,[__r6]
    1620: 08       PUSH  A
    1621: 51 38    MOV   A,[__r7]
    1623: 08       PUSH  A
    1624: 51 37    MOV   A,[__r8]
    1626: 08       PUSH  A
    1627: 51 36    MOV   A,[__r9]
    1629: 08       PUSH  A
    162A: 51 35    MOV   A,[__r10]
    162C: 08       PUSH  A
    162D: 51 34    MOV   A,[__r11]
    162F: 08       PUSH  A
    1630: 51 33    MOV   A,[__rX]
    1632: 08       PUSH  A
    1633: 51 32    MOV   A,[__rY]
    1635: 08       PUSH  A
    1636: 51 31    MOV   A,[__rZ]
    1638: 08       PUSH  A
    1639: 76 5C    INC   [systic+1]
    163B: 0E 5B 00 ADC   [systic],0x0
(0051) 	systic++;
(0052) 	ser_Tic();
    163E: 7C 14 27 LCALL _ser_Tic
    1641: 62 D0 00 MOV   REG[0xD0],0x0
    1644: 18       POP   A
    1645: 53 31    MOV   [__rZ],A
    1647: 18       POP   A
    1648: 53 32    MOV   [__rY],A
    164A: 18       POP   A
    164B: 53 33    MOV   [__rX],A
    164D: 18       POP   A
    164E: 53 34    MOV   [__r11],A
    1650: 18       POP   A
    1651: 53 35    MOV   [__r10],A
    1653: 18       POP   A
    1654: 53 36    MOV   [__r9],A
    1656: 18       POP   A
    1657: 53 37    MOV   [__r8],A
    1659: 18       POP   A
    165A: 53 38    MOV   [__r7],A
    165C: 18       POP   A
    165D: 53 39    MOV   [__r6],A
    165F: 18       POP   A
    1660: 53 3A    MOV   [__r5],A
    1662: 18       POP   A
    1663: 53 3B    MOV   [__r4],A
    1665: 18       POP   A
    1666: 53 3C    MOV   [__r3],A
    1668: 18       POP   A
    1669: 53 3D    MOV   [__r2],A
    166B: 18       POP   A
    166C: 53 3E    MOV   [__r1],A
    166E: 18       POP   A
    166F: 53 3F    MOV   [__r0],A
    1671: 18       POP   A
    1672: 60 D5    MOV   REG[0xD5],A
    1674: 18       POP   A
    1675: 60 D4    MOV   REG[0xD4],A
    1677: 18       POP   A
    1678: 60 D3    MOV   REG[0xD3],A
    167A: 18       POP   A
    167B: 60 D0    MOV   REG[0xD0],A
    167D: 18       POP   A
    167E: 7E       RETI  
(0053) }
(0054) 
(0055) #pragma interrupt_handler Counter16_1_Interrupt
(0056) 
(0057) void Counter16_1_Interrupt(void)
(0058) {
_Counter16_1_Interrupt:
    167F: 71 C0    OR    F,0xC0
    1681: 08       PUSH  A
    1682: 5D D0    MOV   A,REG[0xD0]
    1684: 08       PUSH  A
    1685: 5D D3    MOV   A,REG[0xD3]
    1687: 08       PUSH  A
    1688: 5D D4    MOV   A,REG[0xD4]
    168A: 08       PUSH  A
    168B: 5D D5    MOV   A,REG[0xD5]
    168D: 08       PUSH  A
    168E: 62 D0 00 MOV   REG[0xD0],0x0
    1691: 51 3F    MOV   A,[__r0]
    1693: 08       PUSH  A
    1694: 51 3E    MOV   A,[__r1]
    1696: 08       PUSH  A
    1697: 51 3D    MOV   A,[__r2]
    1699: 08       PUSH  A
    169A: 51 3C    MOV   A,[__r3]
    169C: 08       PUSH  A
    169D: 51 3B    MOV   A,[__r4]
    169F: 08       PUSH  A
    16A0: 51 3A    MOV   A,[__r5]
    16A2: 08       PUSH  A
    16A3: 51 39    MOV   A,[__r6]
    16A5: 08       PUSH  A
    16A6: 51 38    MOV   A,[__r7]
    16A8: 08       PUSH  A
    16A9: 51 37    MOV   A,[__r8]
    16AB: 08       PUSH  A
    16AC: 51 36    MOV   A,[__r9]
    16AE: 08       PUSH  A
    16AF: 51 35    MOV   A,[__r10]
    16B1: 08       PUSH  A
    16B2: 51 34    MOV   A,[__r11]
    16B4: 08       PUSH  A
    16B5: 51 33    MOV   A,[__rX]
    16B7: 08       PUSH  A
    16B8: 51 32    MOV   A,[__rY]
    16BA: 08       PUSH  A
    16BB: 51 31    MOV   A,[__rZ]
    16BD: 08       PUSH  A
    16BE: 51 5A    MOV   A,[timer_cb+1]
    16C0: 08       PUSH  A
    16C1: 51 59    MOV   A,[timer_cb]
    16C3: 53 3F    MOV   [__r0],A
    16C5: 18       POP   A
    16C6: 53 3E    MOV   [__r1],A
    16C8: 51 3F    MOV   A,[__r0]
    16CA: 10       PUSH  X
    16CB: 58 3E    MOV   X,[__r1]
    16CD: 08       PUSH  A
    16CE: 28       ROMX  
    16CF: 53 3F    MOV   [__r0],A
    16D1: 18       POP   A
    16D2: 75       INC   X
    16D3: 09 00    ADC   A,0x0
    16D5: 28       ROMX  
    16D6: 20       POP   X
    16D7: 3C 3F 00 CMP   [__r0],0x0
    16DA: B0 05    JNZ   0x16E0
    16DC: 39 00    CMP   A,0x0
    16DE: A0 14    JZ    0x16F3
(0059) 	if(timer_cb!=0)
(0060) 		timer_cb();
    16E0: 62 D0 00 MOV   REG[0xD0],0x0
    16E3: 51 5A    MOV   A,[timer_cb+1]
    16E5: 08       PUSH  A
    16E6: 51 59    MOV   A,[timer_cb]
    16E8: 53 3F    MOV   [__r0],A
    16EA: 18       POP   A
    16EB: 10       PUSH  X
    16EC: 5C       MOV   X,A
    16ED: 51 3F    MOV   A,[__r0]
    16EF: 7C 18 DA LCALL __plcall
    16F2: 20       POP   X
    16F3: 62 D0 00 MOV   REG[0xD0],0x0
    16F6: 18       POP   A
    16F7: 53 31    MOV   [__rZ],A
    16F9: 18       POP   A
    16FA: 53 32    MOV   [__rY],A
    16FC: 18       POP   A
    16FD: 53 33    MOV   [__rX],A
    16FF: 18       POP   A
    1700: 53 34    MOV   [__r11],A
    1702: 18       POP   A
    1703: 53 35    MOV   [__r10],A
    1705: 18       POP   A
    1706: 53 36    MOV   [__r9],A
    1708: 18       POP   A
    1709: 53 37    MOV   [__r8],A
    170B: 18       POP   A
    170C: 53 38    MOV   [__r7],A
    170E: 18       POP   A
    170F: 53 39    MOV   [__r6],A
    1711: 18       POP   A
    1712: 53 3A    MOV   [__r5],A
    1714: 18       POP   A
    1715: 53 3B    MOV   [__r4],A
    1717: 18       POP   A
    1718: 53 3C    MOV   [__r3],A
    171A: 18       POP   A
    171B: 53 3D    MOV   [__r2],A
    171D: 18       POP   A
    171E: 53 3E    MOV   [__r1],A
    1720: 18       POP   A
    1721: 53 3F    MOV   [__r0],A
    1723: 18       POP   A
    1724: 60 D5    MOV   REG[0xD5],A
    1726: 18       POP   A
    1727: 60 D4    MOV   REG[0xD4],A
    1729: 18       POP   A
    172A: 60 D3    MOV   REG[0xD3],A
    172C: 18       POP   A
    172D: 60 D0    MOV   REG[0xD0],A
    172F: 18       POP   A
    1730: 7E       RETI  
FILE: lib\psocgpioint.asm               (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;;*****************************************************************************
                                        (0004) ;;*****************************************************************************
                                        (0005) ;;  FILENAME: PSoCGPIOINT.asm
                                        (0006) ;;   Version: 2.0.0.20, Updated on 2003/07/17 at 12:10:35
                                        (0007) ;;  @PSOC_VERSION
                                        (0008) ;;
                                        (0009) ;;  DESCRIPTION: PSoC GPIO Interrupt Service Routine
                                        (0010) ;;-----------------------------------------------------------------------------
                                        (0011) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;;*****************************************************************************
                                        (0013) ;;*****************************************************************************
                                        (0014) 
                                        (0015) include "m8c.inc"
                                        (0016) include "PSoCGPIOINT.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export   PSoC_GPIO_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) ;-----------------------------------------------
                                        (0025) ;  Constant Definitions
                                        (0026) ;-----------------------------------------------
                                        (0027) 
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ; Variable Allocation
                                        (0031) ;-----------------------------------------------
                                        (0032) 	
                                        (0033) 
                                        (0034) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0035) ;---------------------------------------------------
                                        (0036) ; Insert your custom declarations below this banner
                                        (0037) ;---------------------------------------------------
                                        (0038) 
                                        (0039) ;---------------------------------------------------
                                        (0040) ; Insert your custom declarations above this banner
                                        (0041) ;---------------------------------------------------
                                        (0042) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0043) 
                                        (0044) 
                                        (0045) ;-----------------------------------------------------------------------------
                                        (0046) ;  FUNCTION NAME: PSoC_GPIO_ISR
                                        (0047) ;
                                        (0048) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0049) ;
                                        (0050) ;-----------------------------------------------------------------------------
                                        (0051) ;
                                        (0052) PSoC_GPIO_ISR:
                                        (0053) 
                                        (0054) 
                                        (0055)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0056)    ;---------------------------------------------------
                                        (0057)    ; Insert your custom code below this banner
                                        (0058)    ;---------------------------------------------------
1731: 7D 06 E2 LJMP  __UserModules_end|_GPIO_ISR|__text_start|_GPIO_ISR(0059)    ljmp _GPIO_ISR
                                        (0060)    ;---------------------------------------------------
                                        (0061)    ; Insert your custom code above this banner
                                        (0062)    ;---------------------------------------------------
                                        (0063)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0064) 
1734: 7E       RETI                     (0065)    reti
                                        (0066) 
                                        (0067) 
                                        (0068) ; end of file PSoCGPIOINT.asm
__plcall:
    18DA: 53 33    MOV   [__rX],A
    18DC: 28       ROMX  
    18DD: 08       PUSH  A
    18DE: 51 33    MOV   A,[__rX]
    18E0: 75       INC   X
    18E1: 09 00    ADC   A,0x0
    18E3: 28       ROMX  
    18E4: 08       PUSH  A
    18E5: 7F       RET   
    18E6: 30       HALT  
<created procedures>:
    18E7: 62 D0 00 MOV   REG[0xD0],0x0
    18EA: 52 00    MOV   A,[X+0]
    18EC: 53 3E    MOV   [__r1],A
    18EE: 55 3F 00 MOV   [__r0],0x0
    18F1: 7F       RET   
    18F2: 62 D0 00 MOV   REG[0xD0],0x0
    18F5: 52 0E    MOV   A,[X+14]
    18F7: 01 0A    ADD   A,0xA
    18F9: 53 3E    MOV   [__r1],A
    18FB: 52 0D    MOV   A,[X+13]
    18FD: 09 00    ADC   A,0x0
    18FF: 60 D4    MOV   REG[0xD4],A
    1901: 3E 3E    MVI   A,[__r1]
    1903: 7F       RET   
    1904: 53 3C    MOV   [__r3],A
    1906: 55 3D 00 MOV   [__r2],0x0
    1909: 52 FB    MOV   A,[X-5]
    190B: 04 3C    ADD   [__r3],A
    190D: 52 FA    MOV   A,[X-6]
    190F: 0C 3D    ADC   [__r2],A
    1911: 51 3D    MOV   A,[__r2]
    1913: 60 D5    MOV   REG[0xD5],A
    1915: 51 3F    MOV   A,[__r0]
    1917: 3F 3C    MVI   [__r3],A
    1919: 7F       RET   
    191A: B0 09    JNZ   0x1924
    191C: 56 02 01 MOV   [X+2],0x1
    191F: 56 01 00 MOV   [X+1],0x0
    1922: 80 07    JMP   0x192A
    1924: 56 02 00 MOV   [X+2],0x0
    1927: 56 01 00 MOV   [X+1],0x0
    192A: 62 D0 00 MOV   REG[0xD0],0x0
    192D: 52 02    MOV   A,[X+2]
    192F: 7F       RET   
    1930: 62 D0 00 MOV   REG[0xD0],0x0
    1933: 55 67 00 MOV   [ser_status],0x0
    1936: 62 D0 00 MOV   REG[0xD0],0x0
    1939: 55 66 00 MOV   [ser_idx],0x0
    193C: 7F       RET   
    193D: 52 00    MOV   A,[X+0]
    193F: 53 3E    MOV   [__r1],A
    1941: 55 3F 00 MOV   [__r0],0x0
    1944: 52 FB    MOV   A,[X-5]
    1946: 04 3E    ADD   [__r1],A
    1948: 52 FA    MOV   A,[X-6]
    194A: 0C 3F    ADC   [__r0],A
    194C: 51 3F    MOV   A,[__r0]
    194E: 7F       RET   
    194F: 52 FB    MOV   A,[X-5]
    1951: 01 01    ADD   A,0x1
    1953: 53 3C    MOV   [__r3],A
    1955: 52 FA    MOV   A,[X-6]
    1957: 09 00    ADC   A,0x0
    1959: 60 D5    MOV   REG[0xD5],A
    195B: 51 3F    MOV   A,[__r0]
    195D: 3F 3C    MVI   [__r3],A
    195F: 7F       RET   
    1960: 0E 3F 00 ADC   [__r0],0x0
    1963: 51 3F    MOV   A,[__r0]
    1965: 60 D5    MOV   REG[0xD5],A
    1967: 51 3D    MOV   A,[__r2]
    1969: 3F 3E    MVI   [__r1],A
    196B: 7F       RET   
    196C: 53 3C    MOV   [__r3],A
    196E: 55 3D 00 MOV   [__r2],0x0
    1971: 55 3E 00 MOV   [__r1],0x0
    1974: 55 3F 00 MOV   [__r0],0x0
    1977: 7F       RET   
    1978: 5D 2F    MOV   A,REG[0x2F]
    197A: 62 D0 00 MOV   REG[0xD0],0x0
    197D: 53 3F    MOV   [__r0],A
    197F: 47 3F E0 TST   [__r0],0xE0
    1982: 7F       RET   
