//*****************************************************************************
//*****************************************************************************
//  FILENAME: Counter8_2.h
//   Version: 2.60, Updated on 2015/3/4 at 22:23:47
//  Generated by PSoC Designer 5.4.3191
//
//  DESCRIPTION: Counter8 User Module C Language interface file
//-----------------------------------------------------------------------------
//  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************
#ifndef Counter8_2_INCLUDE
#define Counter8_2_INCLUDE

#include <m8c.h>

#pragma fastcall16 Counter8_2_EnableInt
#pragma fastcall16 Counter8_2_DisableInt
#pragma fastcall16 Counter8_2_Start
#pragma fastcall16 Counter8_2_Stop
#pragma fastcall16 Counter8_2_bReadCounter              // Read  DR0
#pragma fastcall16 Counter8_2_WritePeriod               // Write DR1
#pragma fastcall16 Counter8_2_bReadCompareValue         // Read  DR2
#pragma fastcall16 Counter8_2_WriteCompareValue         // Write DR2

// The following symbols are deprecated.
// They may be omitted in future releases
//
#pragma fastcall16 bCounter8_2_ReadCounter              // Read  DR0 (Deprecated)
#pragma fastcall16 bCounter8_2_ReadCompareValue         // Read  DR2 (Deprecated)


//-------------------------------------------------
// Prototypes of the Counter8_2 API.
//-------------------------------------------------

extern void Counter8_2_EnableInt(void);                           // Proxy Class 1
extern void Counter8_2_DisableInt(void);                          // Proxy Class 1
extern void Counter8_2_Start(void);                               // Proxy Class 1
extern void Counter8_2_Stop(void);                                // Proxy Class 1
extern BYTE Counter8_2_bReadCounter(void);                        // Proxy Class 1
extern void Counter8_2_WritePeriod(BYTE bPeriod);                 // Proxy Class 1
extern BYTE Counter8_2_bReadCompareValue(void);                   // Proxy Class 2
extern void Counter8_2_WriteCompareValue(BYTE bCompareValue);     // Proxy Class 1

// The following functions are deprecated.
// They may be omitted in future releases
//
extern BYTE bCounter8_2_ReadCounter(void);            // Deprecated
extern BYTE bCounter8_2_ReadCompareValue(void);       // Deprecated


//--------------------------------------------------
// Constants for Counter8_2 API's.
//--------------------------------------------------

#define Counter8_2_CONTROL_REG_START_BIT       ( 0x01 )
#define Counter8_2_INT_REG_ADDR                ( 0x0e1 )
#define Counter8_2_INT_MASK                    ( 0x01 )


//--------------------------------------------------
// Constants for Counter8_2 user defined values
//--------------------------------------------------

#define Counter8_2_PERIOD                      ( 0xfa )
#define Counter8_2_COMPARE_VALUE               ( 0x7d )


//-------------------------------------------------
// Register Addresses for Counter8_2
//-------------------------------------------------

#pragma ioport  Counter8_2_COUNTER_REG: 0x020              //DR0 Count register
BYTE            Counter8_2_COUNTER_REG;
#pragma ioport  Counter8_2_PERIOD_REG:  0x021              //DR1 Period register
BYTE            Counter8_2_PERIOD_REG;
#pragma ioport  Counter8_2_COMPARE_REG: 0x022              //DR2 Compare register
BYTE            Counter8_2_COMPARE_REG;
#pragma ioport  Counter8_2_CONTROL_REG: 0x023              //Control register
BYTE            Counter8_2_CONTROL_REG;
#pragma ioport  Counter8_2_FUNC_REG:    0x120              //Function register
BYTE            Counter8_2_FUNC_REG;
#pragma ioport  Counter8_2_INPUT_REG:   0x121              //Input register
BYTE            Counter8_2_INPUT_REG;
#pragma ioport  Counter8_2_OUTPUT_REG:  0x122              //Output register
BYTE            Counter8_2_OUTPUT_REG;
#pragma ioport  Counter8_2_INT_REG:       0x0e1            //Interrupt Mask Register
BYTE            Counter8_2_INT_REG;


//-------------------------------------------------
// Counter8_2 Macro 'Functions'
//-------------------------------------------------

#define Counter8_2_Start_M \
   Counter8_2_CONTROL_REG |=  Counter8_2_CONTROL_REG_START_BIT

#define Counter8_2_Stop_M  \
   Counter8_2_CONTROL_REG &= ~Counter8_2_CONTROL_REG_START_BIT

#define Counter8_2_EnableInt_M   \
   M8C_EnableIntMask(Counter8_2_INT_REG, Counter8_2_INT_MASK)

#define Counter8_2_DisableInt_M  \
   M8C_DisableIntMask(Counter8_2_INT_REG, Counter8_2_INT_MASK)

#endif
// end of file Counter8_2.h
