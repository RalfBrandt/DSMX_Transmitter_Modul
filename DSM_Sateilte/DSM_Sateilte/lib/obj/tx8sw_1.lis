 0000           ;;*****************************************************************************
 0000           ;;  FILENAME: TX8SW_1.asm
 0000           ;;
 0000           ;;  Version: 1.30, Updated on 2015/3/4 at 22:27:54
 0000           ;;  Generated by PSoC Designer 5.4.3191
 0000           ;;
 0000           ;;  DESCRIPTION: Routines for Firmware Serial Transmitter
 0000           ;;
 0000           ;;-----------------------------------------------------------------------------
 0000           ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           
 00C0           FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
 0000           FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
 0040           FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
 0080           FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
 00C0           FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
 0000           FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
 0040           FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
 0080           FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
 00C0           FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
 0010           FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
 0008           FLAG_SUPER:        equ 08h     ; Supervisor Mode
 0004           FLAG_CARRY:        equ 04h     ; Carry Condition Flag
 0002           FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
 0001           FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           ; Port 3
 000C           PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
 000D           PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
 000E           PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
 000F           PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0061           AMUX_CFG:      equ 61h          ; Analog MUX Configuration
 0030           AMUX_CFG_INTCAP:       equ 30h    ;
 000E           AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
 0001           AMUX_CFG_EN:		  	  equ 01h	 ;
 0000           
 0000           ; old declarations DO NOT USE
 0061           AMUXCFG:      equ 61h          ; Analog MUX Configuration
 0030           AMUXCFG_INTCAP:       equ 30h    ;
 000E           AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
 0001           AMUXCFG_EN:		  	  equ 01h	 ;
 0000           
 0062           PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
 0038           PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
 0006           PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
 0001           PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0020           CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
 0010           CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
 0000           
 0068           ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
 0080           ADC0_CR_CMPST:        equ 80h    ;
 0040           ADC0_CR_LOREN:        equ 40h    ;
 0020           ADC0_CR_SHEN:         equ 20h    ;
 0008           ADC0_CR_CBSRC:        equ 08h    ;
 0004           ADC0_CR_ADCM:         equ 04h    ;
 0001           ADC0_CR_EN:	          equ 01h    ;
 0000           
 0069           ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
 0080           ADC1_CR_CMPST:        equ 80h    ;
 0040           ADC1_CR_LOREN:        equ 40h    ;
 0020           ADC1_CR_SHEN:         equ 20h    ;
 0008           ADC1_CR_CBSRC:        equ 08h    ;
 0004           ADC1_CR_ADCM:         equ 04h    ;
 0001           ADC1_CR_EN:	          equ 01h    ;
 0000           
 0000           ; Continuous Time PSoC block Type E Row 0 Col 0
 0072           ACE00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACE00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type E Row 0 Col 1
 0076           ACE01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACE01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType E Row 1 Col 0
 0080           ASE10CR0:     equ 80h          ; Control register 0                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType E Row 1 Col 1
 0084           ASE11CR0:     equ 84h          ; Control register 0                       (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global General Purpose Data Registers
 0000           ;-----------------------------------------------
 006C           TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
 006D           TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
 006E           TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
 006F           TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Ram Page Pointers
 0000           ;-----------------------------------------------
 00D0           CUR_PP:      equ 0D0h           ; Current   Page Pointer
 00D1           STK_PP:      equ 0D1h           ; Stack     Page Pointer
 00D3           IDX_PP:      equ 0D3h           ; Index     Page Pointer
 00D4           MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
 00D5           MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DD           INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00E0           INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Control Registers
 00E6           DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FD           DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
 0000           
 00FE           CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
 0010           CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 3
 000C           PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
 000D           PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
 000E           PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
 000F           PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0018           CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
 0003           CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
 0000           
 0003           CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 000F           AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
 0000           
 0064           CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
 0080           CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
 0040           CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
 0030           CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
 0008           CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
 0004           CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
 0003           CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 000F           AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 006B           CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
 0040           CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
 0030           CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
 0004           CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
 0003           CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Analog Mux Bus Port Enable Bits
 0000           ;------------------------------------------------
 00D8           MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
 00D9           MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
 00DA           MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
 00DB           MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
 0080           OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           
 00E4           VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
 0008           VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E5           ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
 00E6           ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
 0000           
 00E8           IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
 00E9           ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
 00EB           ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
 0000           
 00FA           FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
 0003           FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
 0000           
 00FD           DAC_CR:       equ 0FDh          ; Analog Mux DAC Control Register
 0008           DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
 0006           DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
 0001           DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0000           SYSTEM_STACK_PAGE: equ 0   
 0000           SYSTEM_STACK_BASE_ADDR: equ 0h   
 0000           SYSTEM_LARGE_MEMORY_MODEL: equ 0   
 0001           SYSTEM_SMALL_MEMORY_MODEL: equ 1   
 0001           IMAGECRAFT: equ 1   
 0002           HITECH: equ 2   
 0001           TOOLCHAIN: equ IMAGECRAFT   
 0001           SYSTEM_TOOLS: equ 1   
 0001           SYSTEM_IDXPG_TRACKS_STK_PP: equ 1   
 0000           SYSTEM_IDXPG_TRACKS_IDX_PP: equ 0   
 0000           SYSTEM_MULTIPAGE_STACK: equ 0 
 0000           
 0000           
 0000           ;  ******* Function Class Definitions *******
 0000           ;
 0000           ;  These definitions are used to describe RAM access patterns. They provide
 0000           ;  documentation and they control prologue and epilogue macros that perform
 0000           ;  the necessary housekeeping functions for large memory model devices like
 0000           ;  the CY8C21030.
 0000           
 0001           RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
 0002           RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
 0004           RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
 0008           RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
 0000           
 0000           ; ******* Hi Tech Specific *******
 0000           ; Turn on the expansion of all macros by default
                IF (TOOLCHAIN & HITECH)
                OPT EXPAND
                ENDIF
                ;  ******* Page Pointer Manipulation Macros *******
                ;
                ;  Most of the following macros are conditionally compiled so they only
                ;  produce code if the large memory model is selected.
                
                   ;-----------------------------------------------
                   ;  Set Stack Page Macro
                   ;-----------------------------------------------
                   ;
                   ;  DESC: Modify STK_PP in the large or small memory Models.
                   ;
                   ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
                   ;        which stack operations like PUSH and POP store and retrieve their
                   ;        data
                   ;
                   ;  COST: 8 instruction cycles (in LMM only)
                
 0000              macro RAM_SETPAGE_STK( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[STK_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_CUR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[CUR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[IDX_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVW( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVW_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX2STK
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 IF ( SYSTEM_MULTIPAGE_STACK )
 0000                    mov   A, reg[STK_PP]
 0000                    mov   reg[IDX_PP], A
 0000                 ELSE
 0000                    RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
 0000                 ENDIF
 0000              ENDIF
 0000              macro RAM_CHANGE_PAGE_MODE( MODE )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0000                 or    F,  FLAG_PGMODE_MASK & @MODE
 0000              ENDIF
 0000              macro RAM_SET_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_RESTORE_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_STACKPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 or   F, FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_INDEXPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and  F, ~FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_PROLOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                    RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                    RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro RAM_EPILOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro REG_PRESERVE( IOReg )
 0000              mov   A, reg[ @IOReg ]
 0000              push  A
 0000              macro REG_RESTORE( IOReg )
 0000              pop   A
 0000              mov   reg[ @IOReg ], A
 0000              macro ISR_PRESERVE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_PRESERVE CUR_PP
 0000                 REG_PRESERVE IDX_PP
 0000                 REG_PRESERVE MVR_PP
 0000                 REG_PRESERVE MVW_PP
 0000              ENDIF
 0000              macro ISR_RESTORE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_RESTORE MVW_PP
 0000                 REG_RESTORE MVR_PP
 0000                 REG_RESTORE IDX_PP
 0000                 REG_RESTORE CUR_PP
 0000              ENDIF
 0000           macro PRESERVE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_PRESERVE_PAGE_POINTERS
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             MOV A, [__r0]
 0000             PUSH A
 0000             MOV A, [__r1]
 0000             PUSH A
 0000             MOV A, [__r2]
 0000             PUSH A
 0000             MOV A, [__r3]
 0000             PUSH A
 0000             MOV A, [__r4]
 0000             PUSH A
 0000             MOV A, [__r5]
 0000             PUSH A
 0000             MOV A, [__r6]
 0000             PUSH A
 0000             MOV A, [__r7]
 0000             PUSH A
 0000             MOV A, [__r8]
 0000             PUSH A
 0000             MOV A, [__r9]
 0000             PUSH A
 0000             MOV A, [__r10]
 0000             PUSH A
 0000             MOV A, [__r11]
 0000             PUSH A
 0000             MOV A, [__rX]
 0000             PUSH A
 0000             MOV A, [__rY]
 0000             PUSH A
 0000             MOV A, [__rZ]
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               MOV REG[CUR_PP], 0
 0000             ENDIF
 0000           ENDIF
 0000           macro RESTORE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             POP A
 0000             MOV [__rZ], A
 0000             POP A
 0000             MOV [__rY], A
 0000             POP A
 0000             MOV [__rX], A
 0000             POP A
 0000             MOV [__r11], A
 0000             POP A
 0000             MOV [__r10], A
 0000             POP A
 0000             MOV [__r9], A
 0000             POP A
 0000             MOV [__r8], A
 0000             POP A
 0000             MOV [__r7], A
 0000             POP A
 0000             MOV [__r6], A
 0000             POP A
 0000             MOV [__r5], A
 0000             POP A
 0000             MOV [__r4], A
 0000             POP A
 0000             MOV [__r3], A
 0000             POP A
 0000             MOV [__r2], A
 0000             POP A
 0000             MOV [__r1], A
 0000             POP A
 0000             MOV [__r0], A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_RESTORE_PAGE_POINTERS
 0000               AND F, FLAG_PGMODE_0
 0000             ENDIF
 0000             POP A
 0000           ENDIF
 00C0           FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
 0000           FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
 0040           FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
 0080           FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
 00C0           FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
 0000           FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
 0040           FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
 0080           FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
 00C0           FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
 0010           FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
 0008           FLAG_SUPER:        equ 08h     ; Supervisor Mode
 0004           FLAG_CARRY:        equ 04h     ; Carry Condition Flag
 0002           FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
 0001           FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           ; Port 3
 000C           PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
 000D           PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
 000E           PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
 000F           PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0061           AMUX_CFG:      equ 61h          ; Analog MUX Configuration
 0030           AMUX_CFG_INTCAP:       equ 30h    ;
 000E           AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
 0001           AMUX_CFG_EN:		  	  equ 01h	 ;
 0000           
 0000           ; old declarations DO NOT USE
 0061           AMUXCFG:      equ 61h          ; Analog MUX Configuration
 0030           AMUXCFG_INTCAP:       equ 30h    ;
 000E           AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
 0001           AMUXCFG_EN:		  	  equ 01h	 ;
 0000           
 0062           PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
 0038           PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
 0006           PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
 0001           PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0020           CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
 0010           CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
 0000           
 0068           ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
 0080           ADC0_CR_CMPST:        equ 80h    ;
 0040           ADC0_CR_LOREN:        equ 40h    ;
 0020           ADC0_CR_SHEN:         equ 20h    ;
 0008           ADC0_CR_CBSRC:        equ 08h    ;
 0004           ADC0_CR_ADCM:         equ 04h    ;
 0001           ADC0_CR_EN:	          equ 01h    ;
 0000           
 0069           ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
 0080           ADC1_CR_CMPST:        equ 80h    ;
 0040           ADC1_CR_LOREN:        equ 40h    ;
 0020           ADC1_CR_SHEN:         equ 20h    ;
 0008           ADC1_CR_CBSRC:        equ 08h    ;
 0004           ADC1_CR_ADCM:         equ 04h    ;
 0001           ADC1_CR_EN:	          equ 01h    ;
 0000           
 0000           ; Continuous Time PSoC block Type E Row 0 Col 0
 0072           ACE00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACE00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type E Row 0 Col 1
 0076           ACE01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACE01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType E Row 1 Col 0
 0080           ASE10CR0:     equ 80h          ; Control register 0                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType E Row 1 Col 1
 0084           ASE11CR0:     equ 84h          ; Control register 0                       (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global General Purpose Data Registers
 0000           ;-----------------------------------------------
 006C           TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
 006D           TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
 006E           TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
 006F           TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Ram Page Pointers
 0000           ;-----------------------------------------------
 00D0           CUR_PP:      equ 0D0h           ; Current   Page Pointer
 00D1           STK_PP:      equ 0D1h           ; Stack     Page Pointer
 00D3           IDX_PP:      equ 0D3h           ; Index     Page Pointer
 00D4           MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
 00D5           MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DD           INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00E0           INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Control Registers
 00E6           DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FD           DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
 0000           
 00FE           CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
 0010           CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 3
 000C           PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
 000D           PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
 000E           PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
 000F           PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0018           CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
 0003           CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
 0000           
 0003           CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 000F           AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
 0000           
 0064           CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
 0080           CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
 0040           CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
 0030           CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
 0008           CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
 0004           CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
 0003           CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 000F           AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 006B           CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
 0040           CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
 0030           CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
 0004           CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
 0003           CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Analog Mux Bus Port Enable Bits
 0000           ;------------------------------------------------
 00D8           MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
 00D9           MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
 00DA           MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
 00DB           MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
 0080           OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           
 00E4           VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
 0008           VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E5           ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
 00E6           ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
 0000           
 00E8           IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
 00E9           ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
 00EB           ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
 0000           
 00FA           FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
 0003           FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
 0000           
 00FD           DAC_CR:       equ 0FDh          ; Analog Mux DAC Control Register
 0008           DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
 0006           DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
 0001           DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0002           CPU_CLOCK:				equ	2h	;CPU clock value
 0007           CPU_CLOCK_MASK:			equ	7h	;CPU clock mask
 0002           CPU_CLOCK_JUST:			equ	2h	;CPU clock value justified
 0000           SLEEP_TIMER:			equ	0h	;Sleep Timer value
 0018           SLEEP_TIMER_MASK:		equ	18h	;Sleep Timer mask
 0000           SLEEP_TIMER_JUST:		equ	0h	;Sleep Timer value justified
 0001           SWITCH_MODE_PUMP:		equ	1h	;Switch Mode Pump setting
 0080           SWITCH_MODE_PUMP_MASK:	equ	80h	;Switch Mode Pump mask
 0080           SWITCH_MODE_PUMP_JUST:	equ	80h	;Switch Mode Pump justified
 0000           LVD_TBEN:               equ 0   ; Low Voltage Throttle-back enable value
 0008           LVD_TBEN_MASK:          equ 8  ; Low Voltage Throttle-back enable mask
 0000           LVD_TBEN_JUST:          equ 0  ; Low Voltage Throttle-back enable justified
 0000           TRIP_VOLTAGE:			equ	0h   ;Trip Voltage value
 0007           TRIP_VOLTAGE_MASK:      equ 7h  ;Trip Voltage mask
 0000           TRIP_VOLTAGE_JUST:      equ 0h  ;Trip Voltage justified
 0000                                         
 0008           POWER_SETTING:			equ	8h
 0010           POWER_SET_5V0:          equ 10h  ; MASK for 5.0V operation, fast and slow 
 0010           POWER_SET_5V0_24MHZ:    equ 10h  ; Power Setting value for 5.0V fast      
 0011           POWER_SET_5V0_6MHZ:     equ 11h  ; Power Setting value for 5.0V slow      
 0008           POWER_SET_3V3:          equ 08h  ; MASK for 3.3V operation, fast and slow 
 0008           POWER_SET_3V3_24MHZ:    equ 08h	 ; Power Setting value for 3.3V fast      
 0009           POWER_SET_3V3_6MHZ:     equ 09h	 ; Power Setting value for 3.3V slow      
 0006           POWER_SET_2V7:          equ 06h  ; MASK for 2.7V operation, fast and slow
 0004           POWER_SET_2V7_12MHZ:    equ 04h	 ; MASK for 2.7V, 12MHZ operation
 0002           POWER_SET_2V7_6MHZ:     equ 02h	 ; MASK for 2.7V,  6MHZ operation
 0001           POWER_SET_SLOW_IMO:     equ 01h  ; MASK for slow Internal Main Oscillator (IMO) 
 0000           
 0001           COMM_RX_PRESENT:		equ	1	;1 = TRUE
 0000           WATCHDOG_ENABLE:		equ 0	;Watchdog Enable 1 = Enable
 0000           
 0007           CLOCK_DIV_VC1:			equ	7h	;VC1 clock divider
 00F0           CLOCK_DIV_VC1_MASK:		equ	f0h	;VC1 clock divider mask
 0070           CLOCK_DIV_VC1_JUST:		equ	70h	;VC1 clock divider justified
 0002           CLOCK_DIV_VC2:			equ	2h	;VC2 clock divider
 000F           CLOCK_DIV_VC2_MASK:		equ	fh	;VC2 clock divider mask
 0002           CLOCK_DIV_VC2_JUST:		equ	2h	;VC2 clock divider justified
 0000           CLOCK_INPUT_VC3:		equ	0h	;VC3 clock source
 0003           CLOCK_INPUT_VC3_MASK:	equ	3h	;VC3 clock source mask
 0000           CLOCK_INPUT_VC3_JUST:	equ	0h	;VC3 clock source justified
 0016           CLOCK_DIV_VC3:			equ	16h	;VC3 clock divider
 00FF           CLOCK_DIV_VC3_MASK:		equ	ffh	;VC3 clock divider mask
 0016           CLOCK_DIV_VC3_JUST:		equ	16h	;VC3 clock divider justified
 0000           SYSCLK_SOURCE:				equ	0h ;SysClk Source setting
 0004           SYSCLK_SOURCE_MASK:			equ	4h ;SysClk Source setting mask
 0000           SYSCLK_SOURCE_JUST:			equ	0h ;SysClk Source setting justified
 0000           SYSCLK_2_DISABLE:				equ	0h	;SysClk*2 Disable setting
 0001           SYSCLK_2_DISABLE_MASK:			equ	1h	;SysClk*2 Disable setting mask
 0000           SYSCLK_2_DISABLE_JUST:			equ	0h	;SysClk*2 Disable setting justified
 0000           ;
 0000           ; register initial values
 0000           ;
 0080           ANALOG_IO_CONTROL:		equ 80h	;Analog IO Control register (ABF_CR)
 0029           PORT_0_GLOBAL_SELECT:	equ 29h	;Port 0 global select register (PRT0GS)
 00BE           PORT_0_DRIVE_0:			equ beh	;Port 0 drive mode 0 register (PRT0DM0)
 0041           PORT_0_DRIVE_1:			equ 41h	;Port 0 drive mode 1 register (PRT0DM1)
 0000           PORT_0_DRIVE_2:			equ 0h	;Port 0 drive mode 2 register (PRT0DM2)
 0040           PORT_0_INTENABLE:		equ 40h	;Port 0 interrupt enable register (PRT0IE)
 0040           PORT_0_INTCTRL_0:		equ 40h	;Port 0 interrupt control 0 register (PRT0IC0)
 0040           PORT_0_INTCTRL_1:		equ 40h	;Port 0 interrupt control 1 register (PRT0IC1)
 0002           PORT_1_GLOBAL_SELECT:	equ 2h	;Port 1 global select register (PRT1GS)
 00A9           PORT_1_DRIVE_0:			equ a9h	;Port 1 drive mode 0 register (PRT1DM0)
 0056           PORT_1_DRIVE_1:			equ 56h	;Port 1 drive mode 1 register (PRT1DM1)
 0014           PORT_1_DRIVE_2:			equ 14h	;Port 1 drive mode 2 register (PRT1DM2)
 0000           PORT_1_INTENABLE:		equ 0h	;Port 1 interrupt enable register (PRT1IE)
 0000           PORT_1_INTCTRL_0:		equ 0h	;Port 1 interrupt control 0 register (PRT1IC0)
 0000           PORT_1_INTCTRL_1:		equ 0h	;Port 1 interrupt control 1 register (PRT1IC1)
 0010           PORT_2_GLOBAL_SELECT:	equ 10h	;Port 2 global select register (PRT2GS)
 00FF           PORT_2_DRIVE_0:			equ ffh	;Port 2 drive mode 0 register (PRT2DM0)
 0000           PORT_2_DRIVE_1:			equ 0h	;Port 2 drive mode 1 register (PRT2DM1)
 0000           PORT_2_DRIVE_2:			equ 0h	;Port 2 drive mode 2 register (PRT2DM2)
 0000           PORT_2_INTENABLE:		equ 0h	;Port 2 interrupt enable register (PRT2IE)
 0000           PORT_2_INTCTRL_0:		equ 0h	;Port 2 interrupt control 0 register (PRT2IC0)
 0000           PORT_2_INTCTRL_1:		equ 0h	;Port 2 interrupt control 1 register (PRT2IC1)
 0000           PORT_3_GLOBAL_SELECT:	equ 0h	;Port 3 global select register (PRT3GS)
 000F           PORT_3_DRIVE_0:			equ fh	;Port 3 drive mode 0 register (PRT3DM0)
 0000           PORT_3_DRIVE_1:			equ 0h	;Port 3 drive mode 1 register (PRT3DM1)
 0000           PORT_3_DRIVE_2:			equ 0h	;Port 3 drive mode 2 register (PRT3DM2)
 0000           PORT_3_INTENABLE:		equ 0h	;Port 3 interrupt enable register (PRT3IE)
 0000           PORT_3_INTCTRL_0:		equ 0h	;Port 3 interrupt control 0 register (PRT3IC0)
 0000           PORT_3_INTCTRL_1:		equ 0h	;Port 3 interrupt control 1 register (PRT3IC1)
 0000           
 0000           ; end of file GlobalParams.inc
 0000           
 0001           TX8SW_1_Port:          equ   0x1
 0000           
 0004           TX8SW_1_PortDR:        equ   PRT1DR
 0004           TX8SW_1_PortDM0:       equ   PRT1DM0
 0005           TX8SW_1_PortDM1:       equ   PRT1DM1
 0007           TX8SW_1_PortDM2:       equ   PRT1DM2
 0000           
 0001           TX8SW_1_PinMask:       equ   0x1
 0000           
 0001           TX8SW_1_BAUD:          equ   0x1
 0000           
 0001           TX8SW_1_BAUD_115200:   equ   0x01
 0002           TX8SW_1_BAUD_57600:    equ   0x02
 0004           TX8SW_1_BAUD_38400:    equ   0x04
 0008           TX8SW_1_BAUD_19200:    equ   0x08
 0010           TX8SW_1_BAUD_9600:     equ   0x10
 0020           TX8SW_1_BAUD_4800:     equ   0x20
 0040           TX8SW_1_BAUD_2400:     equ   0x40
 0080           TX8SW_1_BAUD_1200:     equ   0x80
 0000           
 0000           TX8SW_1_PARITY:        equ   0
 0000           TX8SW_1_PARITY_NONE:   equ   0
 0001           TX8SW_1_PARITY_ODD:    equ   1
 0002           TX8SW_1_PARITY_EVEN:   equ   2
 0000           
 0002           TX8SW_1_DATA_BITS:     equ   2
 0001           TX8SW_1_DATA_BITS_7:   equ   1
 0002           TX8SW_1_DATA_BITS_8:   equ   2
 0000           
 0000           TX8SW_1_SEND_2_STOP:   equ   0
 0000           
 0002           TX8SW_1_SEND_8:        equ   (TX8SW_1_DATA_BITS & TX8SW_1_DATA_BITS_8) + TX8SW_1_PARITY
 0000           TX8SW_1_SEND_9:        equ   (TX8SW_1_DATA_BITS & TX8SW_1_DATA_BITS_8) * TX8SW_1_PARITY
 0000           
 0001           TX8SW_1_CYCL_26:       equ   1
 0002           TX8SW_1_CYCL_39:       equ   2
 0004           TX8SW_1_CYCL_78:       equ   4
 0000           
 0000           ;------------------------------------------------------
 0000           ; CPU frequency constants for  TX8SW_1
 0000           ;------------------------------------------------------
 0001           TX8SW_1_SYS_CLK_24:    equ   0x01
 0002           TX8SW_1_SYS_CLK_12:    equ   0x02
 0004           TX8SW_1_SYS_CLK_6:     equ   0x04
 0000           
                IF (POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                    TX8SW_1_SYS_CLK: equ TX8SW_1_SYS_CLK_6
                ELSE                                         ; *** 24MHZ Main Oscillator ***
 0001               TX8SW_1_SYS_CLK: equ TX8SW_1_SYS_CLK_24
                ENDIF
                
                
                IF (POWER_SETTING & POWER_SET_2V7_12MHZ)         ; *** 2.7 Volts / 12MHZ operation ***
                    TX8SW_1_SYS_CLK: equ TX8SW_1_SYS_CLK_12
                ENDIF ; *** 2.7 Volts / 12MHZ operation ***
                
                IF (POWER_SETTING & POWER_SET_2V7_6MHZ)          ; *** 2.7 Volts /  6MHZ operation ***
                    TX8SW_1_SYS_CLK: equ TX8SW_1_SYS_CLK_6
                ENDIF ; *** 2.7 Volts /  6MHZ operation ***
                
                
 0004           TX8SW_1_BIT_2:         equ 4
 0002           TX8SW_1_BIT_1:         equ 2
 0001           TX8SW_1_BIT_0:         equ 1
 0000           
 0003           TX8SW_1_CPU_CLK_1:     equ 3
 0002           TX8SW_1_CPU_CLK_2:     equ 2
 0001           TX8SW_1_CPU_CLK_4:     equ 1
 0000           
 0003           TX8SW_1_DELAY:         equ 3
 000F           TX8SW_1_LONG_DELAY:    equ 15
 000B           TX8SW_1_MEDIUM_DELAY:  equ 11
 0005           TX8SW_1_SHORT_DELAY:   equ 5
 0000           
                IF (~CPU_CLOCK & TX8SW_1_BIT_2)  ; Proceed for CPU Clock > SysClk/16
                    IF (CPU_CLOCK)  ; Exclude CPU Clock = SysClk/8
                        IF (TX8SW_1_SYS_CLK & TX8SW_1_SYS_CLK_24) ; IMO = 24 Mhz
                            IF (CPU_CLOCK & TX8SW_1_BIT_0)
                                IF (CPU_CLOCK & TX8SW_1_BIT_1) ; CPU = IMO/1 = 24 Mhz
                                    TX8SW_1_DELAY: equ TX8SW_1_LONG_DELAY
                                ELSE
                                    TX8SW_1_DELAY: equ TX8SW_1_SHORT_DELAY       ; CPU = IMO/4 = 6 Mhz       
                                ENDIF                
                            ELSE
 000B                               TX8SW_1_DELAY: equ TX8SW_1_MEDIUM_DELAY       ; CPU = IMO/2 = 12 Mhz
                            ENDIF
                        ENDIF
                
                        IF (TX8SW_1_SYS_CLK & TX8SW_1_SYS_CLK_12) ; IMO = 12 Mhz
                            IF (CPU_CLOCK & TX8SW_1_BIT_0)
                                IF (CPU_CLOCK & TX8SW_1_BIT_1) ; CPU = IMO/1 = 12 Mhz
                                    TX8SW_1_DELAY: equ TX8SW_1_MEDIUM_DELAY
                                ENDIF
                            ELSE
                                IF (CPU_CLOCK & TX8SW_1_BIT_1) ; CPU = IMO/2 = 6 Mhz
                                    TX8SW_1_DELAY: equ TX8SW_1_SHORT_DELAY
                                ENDIF
                            ENDIF
                        ENDIF
                        
                        IF (TX8SW_1_SYS_CLK & TX8SW_1_SYS_CLK_6) ; IMO = 6 Mhz
                            IF (CPU_CLOCK & TX8SW_1_BIT_0)
                                IF (CPU_CLOCK & TX8SW_1_BIT_1) ; CPU = IMO/1 = 6 Mhz
                                    TX8SW_1_DELAY: equ TX8SW_1_SHORT_DELAY
                                ENDIF
                            ENDIF
                        ENDIF
                    ENDIF
                ENDIF
                
                ;------------------------------------------------------
                ; OSC_CR0 settings depending on IMO frequency and baudrate
                ;------------------------------------------------------
                IF (TX8SW_1_SYS_CLK & TX8SW_1_SYS_CLK_24)
                  IF (TX8SW_1_BAUD & TX8SW_1_BAUD_115200)
 0000               TX8SW_1_OSC_CR0:  equ 0
 0001               TX8SW_1_CYCL:     equ TX8SW_1_CYCL_26
                  ENDIF
                
                  IF (TX8SW_1_BAUD & TX8SW_1_BAUD_57600)
                    TX8SW_1_OSC_CR0:  equ 4
                    TX8SW_1_CYCL:     equ TX8SW_1_CYCL_26
                  ENDIF
                
                  IF (TX8SW_1_BAUD & TX8SW_1_BAUD_38400)
                    TX8SW_1_OSC_CR0:  equ 4
                    TX8SW_1_CYCL:     equ TX8SW_1_CYCL_39
                  ENDIF
                
                  IF (TX8SW_1_BAUD & TX8SW_1_BAUD_19200)
                    TX8SW_1_OSC_CR0:  equ 5
                    TX8SW_1_CYCL:     equ TX8SW_1_CYCL_39
                  ENDIF
                
                  IF (TX8SW_1_BAUD & TX8SW_1_BAUD_9600)
                    TX8SW_1_OSC_CR0:  equ 5
                    TX8SW_1_CYCL:     equ TX8SW_1_CYCL_78
                  ENDIF
                
                  IF (TX8SW_1_BAUD & TX8SW_1_BAUD_4800)
                    TX8SW_1_OSC_CR0:  equ 6
                    TX8SW_1_CYCL:     equ TX8SW_1_CYCL_39
                  ENDIF
                
                  IF (TX8SW_1_BAUD & TX8SW_1_BAUD_2400)
                    TX8SW_1_OSC_CR0:  equ 7
                    TX8SW_1_CYCL:     equ TX8SW_1_CYCL_39
                  ENDIF
                
                  IF (TX8SW_1_BAUD & TX8SW_1_BAUD_1200)
                    TX8SW_1_OSC_CR0:  equ 7
                    TX8SW_1_CYCL:     equ TX8SW_1_CYCL_78
                  ENDIF
                ENDIF
                
                IF (TX8SW_1_SYS_CLK & TX8SW_1_SYS_CLK_12)
                  IF (TX8SW_1_BAUD & TX8SW_1_BAUD_115200)
                    TX8SW_1_OSC_CR0:  equ 1
                    TX8SW_1_CYCL:     equ TX8SW_1_CYCL_26
                  ENDIF
                
                  IF (TX8SW_1_BAUD & TX8SW_1_BAUD_57600)
                    TX8SW_1_OSC_CR0:  equ 0
                    TX8SW_1_CYCL:     equ TX8SW_1_CYCL_26
                  ENDIF
                
                  IF (TX8SW_1_BAUD & TX8SW_1_BAUD_38400)
                    TX8SW_1_OSC_CR0:  equ 0
                    TX8SW_1_CYCL:     equ TX8SW_1_CYCL_39
                  ENDIF
                
                  IF (TX8SW_1_BAUD & TX8SW_1_BAUD_19200)
                    TX8SW_1_OSC_CR0:  equ 4
                    TX8SW_1_CYCL:     equ TX8SW_1_CYCL_39
                  ENDIF
                
                  IF (TX8SW_1_BAUD & TX8SW_1_BAUD_9600)
                    TX8SW_1_OSC_CR0:  equ 5
                    TX8SW_1_CYCL:     equ TX8SW_1_CYCL_39
                  ENDIF
                
                  IF (TX8SW_1_BAUD & TX8SW_1_BAUD_4800)
                    TX8SW_1_OSC_CR0:  equ 5
                    TX8SW_1_CYCL:     equ TX8SW_1_CYCL_78
                  ENDIF
                
                  IF (TX8SW_1_BAUD & TX8SW_1_BAUD_2400)
                    TX8SW_1_OSC_CR0:  equ 6
                    TX8SW_1_CYCL:     equ TX8SW_1_CYCL_39
                  ENDIF
                
                  IF (TX8SW_1_BAUD & TX8SW_1_BAUD_1200)
                    TX8SW_1_OSC_CR0:  equ 7
                    TX8SW_1_CYCL:     equ TX8SW_1_CYCL_39
                  ENDIF
                ENDIF
                
                IF (TX8SW_1_SYS_CLK & TX8SW_1_SYS_CLK_6)
                  IF (TX8SW_1_BAUD & TX8SW_1_BAUD_115200)
                    TX8SW_1_OSC_CR0:  equ 2
                    TX8SW_1_CYCL:     equ TX8SW_1_CYCL_26
                  ENDIF
                
                  IF (TX8SW_1_BAUD & TX8SW_1_BAUD_57600)
                    TX8SW_1_OSC_CR0:  equ 1
                    TX8SW_1_CYCL:     equ TX8SW_1_CYCL_26
                  ENDIF
                
                  IF (TX8SW_1_BAUD & TX8SW_1_BAUD_38400)
                    TX8SW_1_OSC_CR0:  equ 1
                    TX8SW_1_CYCL:     equ TX8SW_1_CYCL_39
                  ENDIF
                
                  IF (TX8SW_1_BAUD & TX8SW_1_BAUD_19200)
                    TX8SW_1_OSC_CR0:  equ 0
                    TX8SW_1_CYCL:     equ TX8SW_1_CYCL_39
                  ENDIF
                
                  IF (TX8SW_1_BAUD & TX8SW_1_BAUD_9600)
                    TX8SW_1_OSC_CR0:  equ 4
                    TX8SW_1_CYCL:     equ TX8SW_1_CYCL_39
                  ENDIF
                
                  IF (TX8SW_1_BAUD & TX8SW_1_BAUD_4800)
                    TX8SW_1_OSC_CR0:  equ 5
                    TX8SW_1_CYCL:     equ TX8SW_1_CYCL_39
                  ENDIF
                
                  IF (TX8SW_1_BAUD & TX8SW_1_BAUD_2400)
                    TX8SW_1_OSC_CR0:  equ 5
                    TX8SW_1_CYCL:     equ TX8SW_1_CYCL_78
                  ENDIF
                
                  IF (TX8SW_1_BAUD & TX8SW_1_BAUD_1200)
                    TX8SW_1_OSC_CR0:  equ 6
                    TX8SW_1_CYCL:     equ TX8SW_1_CYCL_39
                  ENDIF
                ENDIF
                
                ;------------------------------------------------------
                ;  Macros for  TX8SW_1
                ;------------------------------------------------------
                
 0000           macro TX8SW_1_Start_M
 0000               or      [Port_1_Data_SHADE], TX8SW_1_PinMask
 0000               mov     A, [Port_1_Data_SHADE]
 0000               mov     reg[TX8SW_1_PortDR], A
 0000               and     reg[TX8SW_1_PortDM2], ~TX8SW_1_PinMask
 0000               M8C_SetBank1
 0000               or      reg[TX8SW_1_PortDM0], TX8SW_1_PinMask
 0000               and     reg[TX8SW_1_PortDM1], ~TX8SW_1_PinMask
 0000               M8C_SetBank0
 0000           macro TX8SW_1_Stop_M
 0000               or      reg[TX8SW_1_PortDM2], TX8SW_1_PinMask
 0000               M8C_SetBank1
 0000               or      reg[TX8SW_1_PortDM1], TX8SW_1_PinMask
 0000               and     reg[TX8SW_1_PortDM0], ~TX8SW_1_PinMask
 0000               M8C_SetBank0
 0000           macro TX8SW_1_SendBit                          ; = 26
 0000               rrc     [TX8SW_1_bData]                    ; 7
 0000               jc      . + 6                                       ; 5
 0000               and     A, ~TX8SW_1_PinMask                ; 4
 0000               jmp     . + 6                                       ; 5
 0000               or      A, TX8SW_1_PinMask                 ; 4
 0000               jmp     . + 2                                       ; 5
 0000               mov     reg[TX8SW_1_PortDR], A             ; 5
                export   TX8SW_1_Start
                export  _TX8SW_1_Start
                export   TX8SW_1_Stop
                export  _TX8SW_1_Stop
                export   TX8SW_1_SendData
                export  _TX8SW_1_SendData
                
                ;-----------------------------------------------
                ;  High Level TX functions
                ;-----------------------------------------------
                export  TX8SW_1_PutSHexByte
                export _TX8SW_1_PutSHexByte
                export  TX8SW_1_PutSHexInt
                export _TX8SW_1_PutSHexInt
                export  TX8SW_1_PutChar
                export _TX8SW_1_PutChar
                export  TX8SW_1_CPutString
                export _TX8SW_1_CPutString
                export  TX8SW_1_PutString
                export _TX8SW_1_PutString
                export  TX8SW_1_Write
                export _TX8SW_1_Write
                export  TX8SW_1_CWrite
                export _TX8SW_1_CWrite
                export  TX8SW_1_PutCRLF
                export _TX8SW_1_PutCRLF
                
                ;-----------------------------------------------
                AREA InterruptRAM (RAM, REL)
 0000             TX8SW_1_bData:    blk  1
 0001             TX8SW_1_bParity:  blk  1
 0002           ;-----------------------------------------------
 0002           
                AREA UserModules (ROM, REL)
                
 0000           .LITERAL
 0000 30313233343536373839414243444546   Digits:    DS    "0123456789ABCDEF"
 0010           .ENDLITERAL
 0010           
 0010           .SECTION
 0010           ;-----------------------------------------------------------------------------
 0010           ;  FUNCTION NAME: TX8SW_1_Start(void)
 0010           ;
 0010           ;  DESCRIPTION:
 0010           ;     Sets the output pin into high logical level
 0010           ;
 0010           ;-----------------------------------------------------------------------------
 0010           ;
 0010           ;  ARGUMENTS: none
 0010           ;
 0010           ;  RETURNS:  none
 0010           ;
 0010           ;  SIDE EFFECTS:
 0010           ;    The A and X registers may be modified by this or future implementations
 0010           ;    of this function.  The same is true for all RAM page pointer registers in
 0010           ;    the Large Memory Model.  When necessary, it is the calling function's
 0010           ;    responsibility to preserve their values across calls to fastcall16
 0010           ;    functions.
 0010           ;-----------------------------------------------------------------------------
 0010            TX8SW_1_Start:
 0010           _TX8SW_1_Start:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >Port_1_Data_SHADE
                   ENDIF
                   
 0010 2E0001        or      [Port_1_Data_SHADE], TX8SW_1_PinMask
 0013 5100          mov     A, [Port_1_Data_SHADE]
 0015 6004          mov     reg[TX8SW_1_PortDR], A
 0017 4107FE        and     reg[TX8SW_1_PortDM2], ~TX8SW_1_PinMask
 001A 7110          or    F, FLAG_XIO_MASK
 001C 430401        or      reg[TX8SW_1_PortDM0], TX8SW_1_PinMask
 001F 4105FE        and     reg[TX8SW_1_PortDM1], ~TX8SW_1_PinMask
 0022 70EF          and   F, ~FLAG_XIO_MASK
 0024           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0024 7F           ret
 0025           .ENDSECTION
 0025           
 0025           .SECTION
 0025           ;-----------------------------------------------------------------------------
 0025           ;  FUNCTION NAME: TX8SW_1_Stop
 0025           ;
 0025           ;  DESCRIPTION:
 0025           ;     This function was added for compatibility reason
 0025           ;
 0025           ;-----------------------------------------------------------------------------
 0025           ;
 0025           ;  ARGUMENTS:  none
 0025           ;
 0025           ;  RETURNS:  none
 0025           ;
 0025           ;  SIDE EFFECTS:
 0025           ;    The A and X registers may be modified by this or future implementations
 0025           ;    of this function.  The same is true for all RAM page pointer registers in
 0025           ;    the Large Memory Model.  When necessary, it is the calling function's
 0025           ;    responsibility to preserve their values across calls to fastcall16
 0025           ;    functions.
 0025           ;-----------------------------------------------------------------------------
 0025            TX8SW_1_Stop:
 0025           _TX8SW_1_Stop:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                
 0025 430701        or      reg[TX8SW_1_PortDM2], TX8SW_1_PinMask
 0028 7110          or    F, FLAG_XIO_MASK
 002A 430501        or      reg[TX8SW_1_PortDM1], TX8SW_1_PinMask
 002D 4104FE        and     reg[TX8SW_1_PortDM0], ~TX8SW_1_PinMask
 0030 70EF          and   F, ~FLAG_XIO_MASK
 0032           
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0032 7F           ret
 0033           .ENDSECTION
 0033           
 0033           
 0033           .SECTION
 0033           ;-----------------------------------------------------------------------------
 0033           ;  FUNCTION NAME: TX8SW_1_PutChar
 0033           ;  FUNCTION NAME: TX8SW_1_SendData
 0033           ;
 0033           ;  DESCRIPTION:
 0033           ;     Sends one byte via TX pin.
 0033           ;
 0033           ;  ARGUMENTS:
 0033           ;     A  => (BYTE) Data/char to transmit
 0033           ;
 0033           ;  RETURNS:
 0033           ;
 0033           ;  SIDE EFFECTS:
 0033           ;    The A and X registers may be modified by this or future implementations
 0033           ;    of this function.  The same is true for all RAM page pointer registers in
 0033           ;    the Large Memory Model.  When necessary, it is the calling function's
 0033           ;    responsibility to preserve their values across calls to fastcall16
 0033           ;    functions.
 0033           ;-----------------------------------------------------------------------------
 0033            TX8SW_1_PutChar:
 0033           _TX8SW_1_PutChar:
 0033            TX8SW_1_SendData:
 0033           _TX8SW_1_SendData:
 0033           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >TX8SW_1_bData
                   ENDIF
                
 0033 5300          mov     [TX8SW_1_bData], A
                IF (TX8SW_1_PARITY)
                  IF (TX8SW_1_DATA_BITS & TX8SW_1_DATA_BITS_8)
                
                    IF (TX8SW_1_PARITY & TX8SW_1_PARITY_ODD)
                    mov     [TX8SW_1_bParity], 1
                    ELSE
                    mov     [TX8SW_1_bParity], 0
                    ENDIF
                
                    mov     X, 8
                .P0:
                    rlc     A
                    jnc     .P1
                    xor     [TX8SW_1_bParity], 1
                .P1:
                    dec     X
                    jnz     .P0
                  ELSE
                    IF (TX8SW_1_PARITY & TX8SW_1_PARITY_ODD)
                    or      [TX8SW_1_bData], 0x80
                    ELSE
                    and     [TX8SW_1_bData], ~0x80
                    ENDIF
                    mov     X, 8
                .P0:
                    rlc     A
                    jnc     .P1
                    xor     [TX8SW_1_bData], 0x80
                .P1:
                    dec     X
                    jnz     .P0
                  ENDIF
                ENDIF
                
 0035 7110          or    F, FLAG_XIO_MASK
 0037 5DE0          mov     A, reg[OSC_CR0]            ; Get the System Oscillator control register
 0039 08            push    A                          ; and save it on the stack
 003A 21F8          and     A, ~OSC_CR0_CPU            ; Clear the CPU clock selects
 003C 2900          or      A, TX8SW_1_OSC_CR0         ; Set CPU clock according to required baudrate
 003E           
 003E 70FE          and   F, ~FLAG_GLOBAL_IE
 0040 60E0          mov     reg[OSC_CR0], A            ; set CPU clock
 0042 70EF          and   F, ~FLAG_XIO_MASK
 0044           
 0044           
 0044 570B          mov     X, TX8SW_1_DELAY           ; some delay
 0046           .delay: 
 0046 79            dec     X
 0047 DFFE          jnc     .delay 
 0049           
 0049 5100          mov      A, [Port_1_Data_SHADE]
 004B           
 004B           ;-- Send data
 004B           ;----------------------------------------------------
                IF (TX8SW_1_CYCL & TX8SW_1_CYCL_26)
 004B           Send_26:                               ; send at 26 cycles per bit
 004B           ;--- send start bit
 004B 21FE          and     A, ~TX8SW_1_PinMask
 004D 6004          mov     reg[TX8SW_1_PortDR], A     ; 5
 004F           
 004F 6E00          rrc     [TX8SW_1_bData]                    ; 7
 0051 C005          jc      . + 6                                       ; 5
 0053 21FE          and     A, ~TX8SW_1_PinMask                ; 4
 0055 8005          jmp     . + 6                                       ; 5
 0057 2901          or      A, TX8SW_1_PinMask                 ; 4
 0059 8001          jmp     . + 2                                       ; 5
 005B 6004          mov     reg[TX8SW_1_PortDR], A             ; 5
 005D 6E00          rrc     [TX8SW_1_bData]                    ; 7
 005F C005          jc      . + 6                                       ; 5
 0061 21FE          and     A, ~TX8SW_1_PinMask                ; 4
 0063 8005          jmp     . + 6                                       ; 5
 0065 2901          or      A, TX8SW_1_PinMask                 ; 4
 0067 8001          jmp     . + 2                                       ; 5
 0069 6004          mov     reg[TX8SW_1_PortDR], A             ; 5
 006B 6E00          rrc     [TX8SW_1_bData]                    ; 7
 006D C005          jc      . + 6                                       ; 5
 006F 21FE          and     A, ~TX8SW_1_PinMask                ; 4
 0071 8005          jmp     . + 6                                       ; 5
 0073 2901          or      A, TX8SW_1_PinMask                 ; 4
 0075 8001          jmp     . + 2                                       ; 5
 0077 6004          mov     reg[TX8SW_1_PortDR], A             ; 5
 0079 6E00          rrc     [TX8SW_1_bData]                    ; 7
 007B C005          jc      . + 6                                       ; 5
 007D 21FE          and     A, ~TX8SW_1_PinMask                ; 4
 007F 8005          jmp     . + 6                                       ; 5
 0081 2901          or      A, TX8SW_1_PinMask                 ; 4
 0083 8001          jmp     . + 2                                       ; 5
 0085 6004          mov     reg[TX8SW_1_PortDR], A             ; 5
 0087 6E00          rrc     [TX8SW_1_bData]                    ; 7
 0089 C005          jc      . + 6                                       ; 5
 008B 21FE          and     A, ~TX8SW_1_PinMask                ; 4
 008D 8005          jmp     . + 6                                       ; 5
 008F 2901          or      A, TX8SW_1_PinMask                 ; 4
 0091 8001          jmp     . + 2                                       ; 5
 0093 6004          mov     reg[TX8SW_1_PortDR], A             ; 5
 0095 6E00          rrc     [TX8SW_1_bData]                    ; 7
 0097 C005          jc      . + 6                                       ; 5
 0099 21FE          and     A, ~TX8SW_1_PinMask                ; 4
 009B 8005          jmp     . + 6                                       ; 5
 009D 2901          or      A, TX8SW_1_PinMask                 ; 4
 009F 8001          jmp     . + 2                                       ; 5
 00A1 6004          mov     reg[TX8SW_1_PortDR], A             ; 5
 00A3 6E00          rrc     [TX8SW_1_bData]                    ; 7
 00A5 C005          jc      . + 6                                       ; 5
 00A7 21FE          and     A, ~TX8SW_1_PinMask                ; 4
 00A9 8005          jmp     . + 6                                       ; 5
 00AB 2901          or      A, TX8SW_1_PinMask                 ; 4
 00AD 8001          jmp     . + 2                                       ; 5
 00AF 6004          mov     reg[TX8SW_1_PortDR], A             ; 5
 00B1           
                IF (TX8SW_1_SEND_8)
 00B1 6E00          rrc     [TX8SW_1_bData]                    ; 7
 00B3 C005          jc      . + 6                                       ; 5
 00B5 21FE          and     A, ~TX8SW_1_PinMask                ; 4
 00B7 8005          jmp     . + 6                                       ; 5
 00B9 2901          or      A, TX8SW_1_PinMask                 ; 4
 00BB 8001          jmp     . + 2                                       ; 5
 00BD 6004          mov     reg[TX8SW_1_PortDR], A             ; 5
                ENDIF
                
                IF (TX8SW_1_SEND_9)
                    rrc     [TX8SW_1_bParity]          ; 7
                    jc      . + 6                      ; 5
                    and     A, ~TX8SW_1_PinMask        ; 4
                    jmp     . + 6                      ; 5
                    or      A, TX8SW_1_PinMask         ; 4
                    jmp     . + 2                      ; 5
                    mov     reg[TX8SW_1_PortDR], A     ; 5
                ENDIF
                
 00BF 470000        tst     [0],0                      ; 8
 00C2 490100        tst     reg[1],0                   ; 9
 00C5           
 00C5           ;--- send stop bit(s)
 00C5 2901          or      A, TX8SW_1_PinMask         ; 4
 00C7 6004          mov     reg[TX8SW_1_PortDR], A     ; 5
 00C9           
                IF (TX8SW_1_SEND_2_STOP)
                    mov     X, 4                       ; 4
                ELSE
 00C9 5701          mov     X, 1                       ; 4
                ENDIF
 00CB           .L0:
 00CB 79            dec     X                          ; 4
 00CC BFFE          jnz     .L0                        ; 5
                ENDIF
                
                ;----------------------------------------------------
                IF (TX8SW_1_CYCL & TX8SW_1_CYCL_39)
                Send_39:                               ; send at 39 cycles per bit
                ;--- send start bit
                    and     A, ~TX8SW_1_PinMask
                    mov     reg[TX8SW_1_PortDR], A     ; 5
                IF (TX8SW_1_SEND_8)
                    mov     X, 8                       ; 4
                ELSE
                    mov     X, 7
                ENDIF
                    jmp    .L1                         ; 5
                
                .L1:
                    nop                                ; 4
                    rrc     [TX8SW_1_bData]                    ; 7
                    jc      . + 6                                       ; 5
                    and     A, ~TX8SW_1_PinMask                ; 4
                    jmp     . + 6                                       ; 5
                    or      A, TX8SW_1_PinMask                 ; 4
                    jmp     . + 2                                       ; 5
                    mov     reg[TX8SW_1_PortDR], A             ; 5
                    dec    X                           ; 4
                    jnz    .L1                         ; 5
                
                
                IF (TX8SW_1_SEND_9)
                    rrc     [TX8SW_1_bParity]          ; 7   (26)
                    jc      . + 6                      ; 5
                    and     A, ~TX8SW_1_PinMask        ; 4
                    jmp     . + 6                      ; 5
                    or      A, TX8SW_1_PinMask         ; 4
                    jmp     . + 2                      ; 5
                    mov     reg[TX8SW_1_PortDR], A     ; 5
                
                    nop                                ; 4
                    dec     X                          ; 4
                    jmp    .+2                         ; 5
                ENDIF
                
                    rrc     [TX8SW_1_bParity]          ; 7
                    rrc     [TX8SW_1_bParity]          ; 7
                    rrc     [TX8SW_1_bParity]          ; 7
                
                ;--- send stop bit(s)
                    or      A, TX8SW_1_PinMask         ; 4
                    mov     reg[TX8SW_1_PortDR], A     ; 5
                
                IF (TX8SW_1_SEND_2_STOP)
                    mov     X, 7                       ; 4
                ELSE
                    mov     X, 3                       ; 4
                ENDIF
                .L0:
                    dec     X                          ; 4
                    jnz     .L0                        ; 5
                ENDIF
                
                ;----------------------------------------------------
                IF (TX8SW_1_CYCL & TX8SW_1_CYCL_78)
                Send_78:                                ; send at 78 cycles per bit
                ;--- send start bit
                    and     A, ~TX8SW_1_PinMask
                    mov     reg[TX8SW_1_PortDR], A     ; 5
                IF (TX8SW_1_SEND_8)
                    mov     X, 8                       ; 4
                ELSE
                    mov     X, 7
                ENDIF
                    jmp    .L1                         ; 5
                
                .L1:
                    swap    A, X                       ; 5
                    swap    A, X                       ; 5
                    swap    A, X                       ; 5
                    swap    A, X                       ; 5
                    swap    A, X                       ; 5
                    swap    A, X                       ; 5
                    tst     reg[1],0                   ; 9
                    nop                                ; 4
                    rrc     [TX8SW_1_bData]                    ; 7
                    jc      . + 6                                       ; 5
                    and     A, ~TX8SW_1_PinMask                ; 4
                    jmp     . + 6                                       ; 5
                    or      A, TX8SW_1_PinMask                 ; 4
                    jmp     . + 2                                       ; 5
                    mov     reg[TX8SW_1_PortDR], A             ; 5
                    dec    X                           ; 4
                    jnz    .L1                         ; 5
                
                IF (TX8SW_1_SEND_9)
                    mov     X, 3                       ; 4
                .L2:
                    nop                                ; 4
                    dec     X                          ; 4
                    jnz     .L2                        ; 5
                
                    rrc     [TX8SW_1_bParity]          ; 7   (26)
                    jc      . + 6                      ; 5
                    and     A, ~TX8SW_1_PinMask        ; 4
                    jmp     . + 6                      ; 5
                    or      A, TX8SW_1_PinMask         ; 4
                    jmp     . + 2                      ; 5
                    mov     reg[TX8SW_1_PortDR], A     ; 5
                
                    tst     reg[1],0                   ; 9
                ENDIF
                    mov     X, 3                       ; 4
                .L3:
                    rrc     [TX8SW_1_bData]            ; 7
                    dec     X                          ; 4
                    jnz     .L3                        ; 5
                
                    nop                                ; 4
                    nop                                ; 4
                
                ;--- send stop bit(s)
                    or      A, TX8SW_1_PinMask         ; 4
                    mov     reg[TX8SW_1_PortDR], A     ; 5
                
                IF (TX8SW_1_SEND_2_STOP)
                    mov     X, 16                      ; 4
                ELSE
                    mov     X, 7                       ; 4
                ENDIF
                .L0:
                    dec     X                          ; 4
                    jnz     .L0                        ; 5
                ENDIF
                ;----------------------------------------------------
                
 00CE 18            pop     A                          ; 5
 00CF 7110          or    F, FLAG_XIO_MASK
 00D1 60E0          mov     reg[OSC_CR0], A            ; Restore CPU Clock
 00D3           
 00D3 70EF          and   F, ~FLAG_XIO_MASK
 00D5 7101          or    F, FLAG_GLOBAL_IE
 00D7           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 00D7 7F            ret
 00D8           
 00D8           .ENDSECTION
 00D8           
 00D8           .SECTION
 00D8           ;-----------------------------------------------------------------------------
 00D8           ;  FUNCTION NAME: TX8SW_1_PutSHexByte
 00D8           ;
 00D8           ;  DESCRIPTION:
 00D8           ;     Send a byte in Hex representation (two characters) via TX pin
 00D8           ;
 00D8           ;  ARGUMENTS:
 00D8           ;     A  => (BYTE) Data/char to be sent
 00D8           ;
 00D8           ;  RETURNS:
 00D8           ;     none.
 00D8           ;
 00D8           ;  SIDE EFFECTS:
 00D8           ;    The A and X registers may be modified by this or future implementations
 00D8           ;    of this function.  The same is true for all RAM page pointer registers in
 00D8           ;    the Large Memory Model.  When necessary, it is the calling function's
 00D8           ;    responsibility to preserve their values across calls to fastcall16
 00D8           ;    functions.
 00D8           ;-----------------------------------------------------------------------------
 00D8            TX8SW_1_PutSHexByte:
 00D8           _TX8SW_1_PutSHexByte:
 00D8 08            push   A
 00D9 67            asr    A
 00DA 67            asr    A
 00DB 67            asr    A
 00DC 67            asr    A
 00DD 210F          and    A, 0x0F
 00DF FF1F          index  Digits
 00E1 9F50          call   TX8SW_1_PutChar
 00E3 18            pop    A
 00E4 210F          and    A, 0x0F
 00E6 FF18          index  Digits
 00E8 9F49          call   TX8SW_1_PutChar
 00EA 7F            ret
 00EB           .ENDSECTION
 00EB           
 00EB           .SECTION
 00EB           ;-----------------------------------------------------------------------------
 00EB           ;  FUNCTION NAME: TX8SW_1_PutSHexInt
 00EB           ;
 00EB           ;  DESCRIPTION:
 00EB           ;     Print an Int in Hex (four characters) to UART Tx
 00EB           ;
 00EB           ;  ARGUMENTS:
 00EB           ;     Pointer to string
 00EB           ;     A  => LSB of Int
 00EB           ;     X  => MSB of Int
 00EB           ;
 00EB           ;  RETURNS:
 00EB           ;     none.
 00EB           ;
 00EB           ;  SIDE EFFECTS:
 00EB           ;    The A and X registers may be modified by this or future implementations
 00EB           ;    of this function.  The same is true for all RAM page pointer registers in
 00EB           ;    the Large Memory Model.  When necessary, it is the calling function's
 00EB           ;    responsibility to preserve their values across calls to fastcall16
 00EB           ;    functions.
 00EB           ;
 00EB            TX8SW_1_PutSHexInt:
 00EB           _TX8SW_1_PutSHexInt:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 00EB 08            push A
 00EC 5B            mov  A, X
 00ED 9FE9          call  TX8SW_1_PutSHexByte          ; Print MSB
 00EF 18            pop   A                            ; Move LSB into position
 00F0 9FE6          call  TX8SW_1_PutSHexByte          ; Print LSB
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 00F2 7F            ret
 00F3           .ENDSECTION
 00F3           
 00F3           .SECTION
 00F3           ;-----------------------------------------------------------------------------
 00F3           ;  FUNCTION NAME: TX8SW_1_CPutString
 00F3           ;
 00F3           ;  DESCRIPTION:
 00F3           ;     Send String out through UART TX port.
 00F3           ;
 00F3           ;
 00F3           ;  ARGUMENTS:
 00F3           ;     Pointer to String
 00F3           ;     A has MSB of string address
 00F3           ;     X has LSB of string address
 00F3           ;
 00F3           ;  RETURNS:
 00F3           ;     none
 00F3           ;
 00F3           ;  SIDE EFFECTS:
 00F3           ;    The A and X registers may be modified by this or future implementations
 00F3           ;    of this function.  The same is true for all RAM page pointer registers in
 00F3           ;    the Large Memory Model.  When necessary, it is the calling function's
 00F3           ;    responsibility to preserve their values across calls to fastcall16
 00F3           ;    functions.
 00F3           ;-----------------------------------------------------------------------------
 00F3            TX8SW_1_CPutString:
 00F3           _TX8SW_1_CPutString:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 00F3 08           push  A                             ; Store ROM pointer
 00F4 10           push  X
 00F5 28           romx                                ; Get character from ROM
 00F6 A00B         jz    .End_CPutString
 00F8 9F39         call  TX8SW_1_PutChar               ; Print character
 00FA 20           pop   X
 00FB 18           pop   A
 00FC 75           inc   X                             ; Inc LSB of pointer
 00FD DFF5         jnc   TX8SW_1_CPutString            ; Check for carry
 00FF 74           inc   A                             ; Inc MSB of pointer
 0100 8FF2         jmp   TX8SW_1_CPutString
 0102           
 0102           
 0102           .End_CPutString:
 0102 38FE         add   SP, -2
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0104 7F           ret
 0105           .ENDSECTION
 0105           
 0105           .SECTION
 0105           ;-----------------------------------------------------------------------------
 0105           ;  FUNCTION NAME: TX8SW_1_PutString
 0105           ;
 0105           ;  DESCRIPTION:
 0105           ;     Send String out through UART TX port.
 0105           ;
 0105           ;
 0105           ;  ARGUMENTS:
 0105           ;     Pointer to String
 0105           ;     A has MSB of string address
 0105           ;     X has LSB of string address
 0105           ;
 0105           ;  RETURNS:
 0105           ;     none
 0105           ;
 0105           ;  SIDE EFFECTS:
 0105           ;    The A and X registers may be modified by this or future implementations
 0105           ;    of this function.  The same is true for all RAM page pointer registers in
 0105           ;    the Large Memory Model.  When necessary, it is the calling function's
 0105           ;    responsibility to preserve their values across calls to fastcall16
 0105           ;    functions.
 0105           ;
 0105           ;    Currently only the page pointer registers listed below are modified:
 0105           ;          IDX_PP
 0105           ;-----------------------------------------------------------------------------
 0105            TX8SW_1_PutString:
 0105           _TX8SW_1_PutString:
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[IDX_PP], A
                   ENDIF
 0105           .PutStringLoop:
 0105 5200         mov   A,[X]                         ; Get value pointed to by X
 0107 A008         jz    End_PutString                 ; Check for end of string
 0109 10           push  X
 010A 9F27         call  TX8SW_1_PutChar               ; Send character to Tx port
 010C 20           pop   X
 010D 75           inc   X                             ; Advance pointer to next character
 010E 8FF6         jmp   .PutStringLoop                ; Get next character
 0110           
 0110           End_PutString:
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0110 7F           ret
 0111           .ENDSECTION
 0111           
 0111           
 0111           .SECTION
 0111           ;-----------------------------------------------------------------------------
 0111           ;  FUNCTION NAME: TX8SW_1_PutCRLF
 0111           ;
 0111           ;  DESCRIPTION:
 0111           ;     Send a CR and LF
 0111           ;
 0111           ;  ARGUMENTS:
 0111           ;     none.
 0111           ;
 0111           ;  RETURNS:
 0111           ;     none.
 0111           ;
 0111           ;  SIDE EFFECTS:
 0111           ;    The A and X registers may be modified by this or future implementations
 0111           ;    of this function.  The same is true for all RAM page pointer registers in
 0111           ;    the Large Memory Model.  When necessary, it is the calling function's
 0111           ;    responsibility to preserve their values across calls to fastcall16
 0111           ;    functions.
 0111           ;-----------------------------------------------------------------------------
 0111           _TX8SW_1_PutCRLF:
 0111            TX8SW_1_PutCRLF:
 0111 500D          mov    A, 0x0D                        ; Send CR
 0113 9F1E          call   TX8SW_1_PutChar
 0115 500A          mov    A, 0x0A                        ; Send LF
 0117 9F1A          call   TX8SW_1_PutChar
 0119 7F            ret
 011A           .ENDSECTION
 011A           
 011A           .SECTION
 011A           ;-----------------------------------------------------------------------------
 011A           ;  FUNCTION NAME: TX8SW_1_Write
 011A           ;
 011A           ;  DESCRIPTION:
 011A           ;     Send String of length X to serial port
 011A           ;
 011A           ;
 011A           ;  ARGUMENTS:
 011A           ;     Pointer to String
 011A           ;     [SP-5] Count of characters to send
 011A           ;     [SP-4] has MSB of string address
 011A           ;     [SP-3] has LSB of string address
 011A           ;
 011A           ;  RETURNS:
 011A           ;     none
 011A           ;
 011A           ;  SIDE EFFECTS:
 011A           ;    The A and X registers may be modified by this or future implementations
 011A           ;    of this function.  The same is true for all RAM page pointer registers in
 011A           ;    the Large Memory Model.  When necessary, it is the calling function's
 011A           ;    responsibility to preserve their values across calls to fastcall16
 011A           ;    functions.
 011A           ;
 011A           ;    Currently only the page pointer registers listed below are modified:
 011A           ;          IDX_PP
 011A           ;-----------------------------------------------------------------------------
 FFFFFFFB           CNT_LEN:    equ -5                         ; Length of data to send
 FFFFFFFC           STR_MSB:    equ -4                         ; MSB pointer of string
 FFFFFFFD           STR_LSB:    equ -3                         ; LSB pointer of string
 011A           
 011A            TX8SW_1_Write:
 011A           _TX8SW_1_Write:
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      IF ( SYSTEM_MULTIPAGE_STACK )
                         mov   A, reg[STK_PP]
                         mov   reg[IDX_PP], A
                      ELSE
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[IDX_PP], SYSTEM_STACK_PAGE
                   ENDIF
                      ENDIF
                   ENDIF
 011A 4F           mov   X, SP
 011B           
 011B           .NextByteLoop:
 011B 52FB         mov   A,[X+CNT_LEN]                     ; Get length of string to send
 011D A00E         jz    .End_Write
 011F 7BFB         dec   [X+CNT_LEN]                       ; Decrement counter
 0121           
                   IF SYSTEM_LARGE_MEMORY_MODEL
                   mov   A, [X+STR_MSB]                    ; Load pointer to char to send
                   ENDIF
                
 0121 59FD         mov   X, [X+STR_LSB]                    ; Get character to send
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[IDX_PP], A
                   ENDIF
 0123 5200         mov   A, [X]
 0125 9F0C         call    TX8SW_1_PutChar             ; Send character to UART
 0127 4F           mov   X, SP
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      IF ( SYSTEM_MULTIPAGE_STACK )
                         mov   A, reg[STK_PP]
                         mov   reg[IDX_PP], A
                      ELSE
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[IDX_PP], SYSTEM_STACK_PAGE
                   ENDIF
                      ENDIF
                   ENDIF
 0128 77FD         inc   [X+STR_LSB]
 012A 8FF0         jmp   .NextByteLoop
 012C           
 012C           .End_Write:
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 012C 7F           ret
 012D           
 012D           .ENDSECTION
 012D           .SECTION
 012D           ;-----------------------------------------------------------------------------
 012D           ;  FUNCTION NAME: TX8SW_1_CWrite
 012D           ;
 012D           ;  DESCRIPTION:
 012D           ;     Send String of length X to serial port
 012D           ;
 012D           ;  ARGUMENTS:
 012D           ;     Pointer to String
 012D           ;     [SP-6] MSB of Count of character to send
 012D           ;     [SP-5] LSB of Count of character to send
 012D           ;     [SP-4] has MSB of string address
 012D           ;     [SP-3] has LSB of string address
 012D           ;
 012D           ;  RETURNS:
 012D           ;     none
 012D           ;
 012D           ;  SIDE EFFECTS:
 012D           ;    The A and X registers may be modified by this or future implementations
 012D           ;    of this function.  The same is true for all RAM page pointer registers in
 012D           ;    the Large Memory Model.  When necessary, it is the calling function's
 012D           ;    responsibility to preserve their values across calls to fastcall16
 012D           ;    functions.
 012D           ;-----------------------------------------------------------------------------
 FFFFFFFA           CLEN_MSB:   equ -6           ; MSB Length of data to send
 FFFFFFFB           CLEN_LSB:   equ -5           ; LSB Length of data to send
 FFFFFFFC           CSTR_MSB:   equ -4           ; MSB pointer of string
 FFFFFFFD           CSTR_LSB:   equ -3           ; LSB pointer of string
 012D           
 012D            TX8SW_1_CWrite:
 012D           _TX8SW_1_CWrite:
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 012D 4F           mov   X,SP
 012E           
 012E           .CW_Loop:
 012E                                                        ; Check for zero counter
 012E 3DFA00       cmp   [X+CLEN_MSB],0x00
 0131 B006         jnz   .CW_WRITEIT
 0133 3DFB00       cmp   [X+CLEN_LSB],0x00
 0136 A018         jz    .End_CWrite                         ; Leave if done
 0138           
 0138           .CW_WRITEIT:                                 ; Save pointers
 0138 10           push  X
 0139 52FC         mov   A,[X+CSTR_MSB]
 013B 59FD         mov   X,[X+CSTR_LSB]
 013D 28           romx                                     ; Get character from ROM
 013E 9EF3         call  TX8SW_1_PutChar
 0140 20           pop   X
 0141           
 0141 07FD01       add   [X+CSTR_LSB],1                     ; Increment the string pointer
 0144 0FFC00       adc   [X+CSTR_MSB],0
 0147           
 0147                                                       ; Dec the counter
 0147 17FB01       sub   [X+CLEN_LSB],0x01
 014A 1FFA00       sbb   [X+CLEN_MSB],0x00
 014D           
 014D 8FE0         jmp   .CW_Loop
 014F           
 014F           .End_CWrite:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 014F 7F           ret
 0150           .ENDSECTION
