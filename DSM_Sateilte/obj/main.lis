 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\Ralf\DOCUME~1\DSM_SA~1\DSM_SA~1\DSM_SA~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ;       new_data -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3801              add SP,1
 0004                   .dbline 17
 0004           ; //----------------------------------------------------------------------------
 0004           ; // C main line
 0004           ; //----------------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include "serial.h"
 0004           ; #include "timer.h"
 0004           ; #include "CYRF6936.h"
 0004           ; #include "DSM.h"
 0004           ; 
 0004           ; extern BYTE hex[3];
 0004           ; void ToHex(BYTE val,BYTE out[]);
 0004           ; 
 0004           ; 
 0004           ; void main(void)
 0004           ; {
 0004                   .dbline 18
 0004           ;       BOOL new_data=FALSE;
 0004 560000            mov [X+0],0
 0007                   .dbline 19
 0007           ;                       hex[2]=0;       
 0007 62D000            mov REG[0xd0],>_hex
 000A 550200            mov [_hex+2],0
 000D                   .dbline 21
 000D           ; 
 000D           ;       M8C_EnableGInt;                         // Enable Global Interrupts
 000D 7101                      or  F, 01h
 000F           
 000F                   .dbline 22
 000F           ;       TX8SW_1_Start();
 000F 10                push X
 0010 7C0000            xcall _TX8SW_1_Start
 0013 20                pop X
 0014                   .dbline 23
 0014           ;       SerialRX_Init();
 0014 7C0000            xcall _SerialRX_Init
 0017                   .dbline 24
 0017           ;       Timer_init();
 0017 7C0000            xcall _Timer_init
 001A                   .dbline 26
 001A           ;       
 001A           ;       TX8SW_1_CPutString("Hello");
 001A 10                push X
 001B 500B              mov A,>L5
 001D 08                push A
 001E 500B              mov A,<L5
 0020 5C                mov X,A
 0021 18                pop A
 0022 7C0000            xcall _TX8SW_1_CPutString
 0025                   .dbline 27
 0025           ;       LED_1_Start();
 0025 7C0000            xcall _LED_1_Start
 0028 20                pop X
 0029                   .dbline 28
 0029           ;       DSM_Init();
 0029 7C0000            xcall _DSM_Init
 002C           L6:
 002C                   .dbline 31
 002C           ; 
 002C           ;       //wait for serial data
 002C           ;       while(!SerialReadData());
 002C           L7:
 002C                   .dbline 31
 002C 7C0000            xcall _SerialReadData
 002F 3900              cmp A,0
 0031 AFFA              jz L6
 0033                   .dbline 32
 0033           ;       SER_RESET();
 0033                   .dbline 32
 0033                   .dbline 32
 0033 62D000            mov REG[0xd0],>_ser_status
 0036 550000            mov [_ser_status],0
 0039                   .dbline 32
 0039                   .dbline 32
 0039                   .dbline 32
 0039                   .dbline 32
 0039 62D000            mov REG[0xd0],>_ser_idx
 003C 550000            mov [_ser_idx],0
 003F                   .dbline 32
 003F                   .dbline 32
 003F                   .dbline 32
 003F                   .dbline 32
 003F                   .dbline 35
 003F           ; 
 003F           ; 
 003F           ;       if(ser_databuf[0]&(1<<SPTX_RANGE_CHECK))
 003F 62D000            mov REG[0xd0],>_ser_databuf
 0042 470020            tst [_ser_databuf],32
 0045 A009              jz L9
 0047                   .dbline 37
 0047           ;               {
 0047           ;               DSM_SetRangeCheck(TRUE);
 0047                   .dbline 37
 0047 5001              mov A,1
 0049 08                push A
 004A 7C0000            xcall _DSM_SetRangeCheck
 004D 38FF              add SP,-1
 004F                   .dbline 38
 004F           ;               }
 004F           L9:
 004F                   .dbline 40
 004F           ;       
 004F           ;       DSM_SetMode(ser_databuf[0]&DSMX);
 004F 62D000            mov REG[0xd0],>_ser_databuf
 0052 5100              mov A,[_ser_databuf]
 0054 2118              and A,24
 0056 62D000            mov REG[0xd0],>__r0
 0059 08                push A
 005A 7C0000            xcall _DSM_SetMode
 005D 38FF              add SP,-1
 005F                   .dbline 42
 005F           ;       
 005F           ;       if(ser_databuf[0]&(1<<SPTX_BIND_MODE))
 005F 62D000            mov REG[0xd0],>_ser_databuf
 0062 470080            tst [_ser_databuf],-128
 0065 A031              jz L11
 0067                   .dbline 44
 0067           ;       {
 0067           ;               TX8SW_1_CPutString("BIND ");
 0067                   .dbline 44
 0067 10                push X
 0068 5005              mov A,>L13
 006A 08                push A
 006B 5005              mov A,<L13
 006D 5C                mov X,A
 006E 18                pop A
 006F 7C0000            xcall _TX8SW_1_CPutString
 0072 20                pop X
 0073                   .dbline 45
 0073           ;               DSM_initialize_bind();
 0073 7C0000            xcall _DSM_initialize_bind
 0076           L14:
 0076                   .dbline 47
 0076           ;               do
 0076           ;                       {
 0076                   .dbline 48
 0076           ;                       DSM_Cyclic();
 0076 7C0000            xcall _DSM_Cyclic
 0079                   .dbline 49
 0079           ;                       if(SerialReadData())
 0079 7C0000            xcall _SerialReadData
 007C 3900              cmp A,0
 007E A00D              jz L17
 0080                   .dbline 50
 0080           ;                               SER_RESET();
 0080                   .dbline 50
 0080                   .dbline 50
 0080 62D000            mov REG[0xd0],>_ser_status
 0083 550000            mov [_ser_status],0
 0086                   .dbline 50
 0086                   .dbline 50
 0086                   .dbline 50
 0086                   .dbline 50
 0086 62D000            mov REG[0xd0],>_ser_idx
 0089 550000            mov [_ser_idx],0
 008C                   .dbline 50
 008C                   .dbline 50
 008C                   .dbline 50
 008C           L17:
 008C                   .dbline 50
 008C                   .dbline 51
 008C           ;                       }
 008C           L15:
 008C                   .dbline 52
 008C           ;               while(!DSM_BIND_DONE());
 008C 62D000            mov REG[0xd0],>_Bind_cnt
 008F 3C0000            cmp [_Bind_cnt],0
 0092 BFE3              jnz L14
 0094                   .dbline 53
 0094           ;               new_data=FALSE;
 0094 560000            mov [X+0],0
 0097                   .dbline 54
 0097           ;       }
 0097           L11:
 0097                   .dbline 55
 0097           ;       TX8SW_1_CPutString("RUN ");
 0097 10                push X
 0098 5000              mov A,>L19
 009A 08                push A
 009B 5000              mov A,<L19
 009D 5C                mov X,A
 009E 18                pop A
 009F 7C0000            xcall _TX8SW_1_CPutString
 00A2 20                pop X
 00A3                   .dbline 56
 00A3           ;       DSM_StartTransmitMode();        
 00A3 7C0000            xcall _DSM_StartTransmitMode
 00A6 8032              xjmp L21
 00A8           L20:
 00A8                   .dbline 58
 00A8           ;       while (1)
 00A8           ;       {
 00A8                   .dbline 59
 00A8           ;       DSM_Cyclic();
 00A8 7C0000            xcall _DSM_Cyclic
 00AB                   .dbline 60
 00AB           ;       if (SerialReadData())
 00AB 7C0000            xcall _SerialReadData
 00AE 3900              cmp A,0
 00B0 A010              jz L23
 00B2                   .dbline 62
 00B2           ;               {
 00B2           ;               new_data=TRUE;
 00B2                   .dbline 62
 00B2 560001            mov [X+0],1
 00B5                   .dbline 63
 00B5           ;               SER_RESET();
 00B5                   .dbline 63
 00B5                   .dbline 63
 00B5 62D000            mov REG[0xd0],>_ser_status
 00B8 550000            mov [_ser_status],0
 00BB                   .dbline 63
 00BB                   .dbline 63
 00BB                   .dbline 63
 00BB                   .dbline 63
 00BB 62D000            mov REG[0xd0],>_ser_idx
 00BE 550000            mov [_ser_idx],0
 00C1                   .dbline 63
 00C1                   .dbline 63
 00C1                   .dbline 63
 00C1                   .dbline 63
 00C1                   .dbline 64
 00C1           ;               }
 00C1           L23:
 00C1                   .dbline 65
 00C1           ;       if (new_data)
 00C1 3D0000            cmp [X+0],0
 00C4 A014              jz L25
 00C6                   .dbline 67
 00C6           ;               {
 00C6           ;               new_data=FALSE;
 00C6                   .dbline 67
 00C6 560000            mov [X+0],0
 00C9                   .dbline 68
 00C9           ;               DSM_build_data_packet(&ser_databuf[2]);
 00C9 5002              mov A,>_ser_databuf+2
 00CB 08                push A
 00CC 5002              mov A,<_ser_databuf+2
 00CE 08                push A
 00CF 7C0000            xcall _DSM_build_data_packet
 00D2 38FE              add SP,-2
 00D4                   .dbline 69
 00D4           ;               LED_1_Invert(); 
 00D4 10                push X
 00D5 7C0000            xcall _LED_1_Invert
 00D8 20                pop X
 00D9                   .dbline 70
 00D9           ;               }
 00D9           L25:
 00D9                   .dbline 71
 00D9           ;       }
 00D9           L21:
 00D9                   .dbline 57
 00D9 8FCE              xjmp L20
 00DB           X0:
 00DB                   .dbline -2
 00DB           L3:
 00DB 38FF              add SP,-1
 00DD 20                pop X
 00DE                   .dbline 0 ; func end
 00DE 8FFF              jmp .
 00E0                   .dbsym l new_data 0 c
 00E0                   .dbend
                        .area lit(rom, con, rel, lit)
 0000           L19:
 0000 52554E2000        .byte 'R,'U,'N,32,0
 0005           L13:
 0005 42494E442000      .byte 'B,'I,'N,'D,32,0
 000B           L5:
 000B 48656C6C6F00      .byte 'H,'e,'l,'l,'o,0
